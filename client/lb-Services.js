// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
 var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.CancellationReasons
 * @header lbServices.CancellationReasons
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CancellationReasons` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "CancellationReasons",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/CancellationReasons/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use CancellationReasons.bookings.findById() instead.
            "prototype$__findById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CancellationReasons/:id/bookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use CancellationReasons.bookings.destroyById() instead.
            "prototype$__destroyById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CancellationReasons/:id/bookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CancellationReasons.bookings.updateById() instead.
            "prototype$__updateById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CancellationReasons/:id/bookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CancellationReasons.bookings() instead.
            "prototype$__get__bookings": {
              isArray: true,
              url: urlBase + "/CancellationReasons/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use CancellationReasons.bookings.create() instead.
            "prototype$__create__bookings": {
              url: urlBase + "/CancellationReasons/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use CancellationReasons.bookings.destroyAll() instead.
            "prototype$__delete__bookings": {
              url: urlBase + "/CancellationReasons/:id/bookings",
              method: "DELETE",
            },

            // INTERNAL. Use CancellationReasons.bookings.count() instead.
            "prototype$__count__bookings": {
              url: urlBase + "/CancellationReasons/:id/bookings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#create
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/CancellationReasons",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#createMany
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/CancellationReasons",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#upsert
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/CancellationReasons",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#exists
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/CancellationReasons/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#findById
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/CancellationReasons/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#find
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/CancellationReasons",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#findOne
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/CancellationReasons/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#updateAll
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/CancellationReasons/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#deleteById
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/CancellationReasons/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#count
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/CancellationReasons/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#prototype$updateAttributes
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/CancellationReasons/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#createChangeStream
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/CancellationReasons/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Bookings.cancellationReasons() instead.
            "::get::Bookings::cancellationReasons": {
              url: urlBase + "/Bookings/:id/cancellationReasons",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#updateOrCreate
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#update
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#destroyById
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#removeById
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CancellationReasons#modelName
        * @propertyOf lbServices.CancellationReasons
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CancellationReasons`.
        */
        R.modelName = "CancellationReasons";

    /**
     * @ngdoc object
     * @name lbServices.CancellationReasons.bookings
     * @header lbServices.CancellationReasons.bookings
     * @object
     * @description
     *
     * The object `CancellationReasons.bookings` groups methods
     * manipulating `Bookings` instances related to `CancellationReasons`.
     *
     * Call {@link lbServices.CancellationReasons#bookings CancellationReasons.bookings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons#bookings
             * @methodOf lbServices.CancellationReasons
             *
             * @description
             *
             * Queries bookings of CancellationReasons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::CancellationReasons::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons.bookings#count
             * @methodOf lbServices.CancellationReasons.bookings
             *
             * @description
             *
             * Counts bookings of CancellationReasons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookings.count = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::count::CancellationReasons::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons.bookings#create
             * @methodOf lbServices.CancellationReasons.bookings
             *
             * @description
             *
             * Creates a new instance in bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.create = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::create::CancellationReasons::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons.bookings#createMany
             * @methodOf lbServices.CancellationReasons.bookings
             *
             * @description
             *
             * Creates a new instance in bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.createMany = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::createMany::CancellationReasons::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons.bookings#destroyAll
             * @methodOf lbServices.CancellationReasons.bookings
             *
             * @description
             *
             * Deletes all bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookings.destroyAll = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::delete::CancellationReasons::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons.bookings#destroyById
             * @methodOf lbServices.CancellationReasons.bookings
             *
             * @description
             *
             * Delete a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookings.destroyById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::destroyById::CancellationReasons::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons.bookings#findById
             * @methodOf lbServices.CancellationReasons.bookings
             *
             * @description
             *
             * Find a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.findById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::findById::CancellationReasons::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CancellationReasons.bookings#updateById
             * @methodOf lbServices.CancellationReasons.bookings
             *
             * @description
             *
             * Update a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.updateById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::updateById::CancellationReasons::bookings"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.CustomerDetails
 * @header lbServices.CustomerDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CustomerDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "CustomerDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/CustomerDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.findById() instead.
            "prototype$__findById__customerFavouriteAddresses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.destroyById() instead.
            "prototype$__destroyById__customerFavouriteAddresses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.updateById() instead.
            "prototype$__updateById__customerFavouriteAddresses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/CustomerDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.bookings.findById() instead.
            "prototype$__findById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/bookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.bookings.destroyById() instead.
            "prototype$__destroyById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/bookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.bookings.updateById() instead.
            "prototype$__updateById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/bookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.findById() instead.
            "prototype$__findById__permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.destroyById() instead.
            "prototype$__destroyById__permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.updateById() instead.
            "prototype$__updateById__permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerDetails() instead.
            "prototype$__get__company2CustomerDetails": {
              url: urlBase + "/CustomerDetails/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.findById() instead.
            "prototype$__findById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.destroyById() instead.
            "prototype$__destroyById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.updateById() instead.
            "prototype$__updateById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.findById() instead.
            "prototype$__findById__driverJobDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverJobDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.destroyById() instead.
            "prototype$__destroyById__driverJobDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverJobDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.updateById() instead.
            "prototype$__updateById__driverJobDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverJobDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.findById() instead.
            "prototype$__findById__company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.destroyById() instead.
            "prototype$__destroyById__company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.updateById() instead.
            "prototype$__updateById__company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.findById() instead.
            "prototype$__findById__driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverAttendance/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.destroyById() instead.
            "prototype$__destroyById__driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverAttendance/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.updateById() instead.
            "prototype$__updateById__driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverAttendance/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.findById() instead.
            "prototype$__findById__otherJobsDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.destroyById() instead.
            "prototype$__destroyById__otherJobsDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.updateById() instead.
            "prototype$__updateById__otherJobsDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses() instead.
            "prototype$__get__customerFavouriteAddresses": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.create() instead.
            "prototype$__create__customerFavouriteAddresses": {
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.destroyAll() instead.
            "prototype$__delete__customerFavouriteAddresses": {
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.count() instead.
            "prototype$__count__customerFavouriteAddresses": {
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.bookings() instead.
            "prototype$__get__bookings": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.bookings.create() instead.
            "prototype$__create__bookings": {
              url: urlBase + "/CustomerDetails/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.bookings.destroyAll() instead.
            "prototype$__delete__bookings": {
              url: urlBase + "/CustomerDetails/:id/bookings",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.bookings.count() instead.
            "prototype$__count__bookings": {
              url: urlBase + "/CustomerDetails/:id/bookings/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest() instead.
            "prototype$__get__permanentDriverRequest": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.create() instead.
            "prototype$__create__permanentDriverRequest": {
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.destroyAll() instead.
            "prototype$__delete__permanentDriverRequest": {
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.count() instead.
            "prototype$__count__permanentDriverRequest": {
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate() instead.
            "prototype$__get__company2CustomerRate": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.create() instead.
            "prototype$__create__company2CustomerRate": {
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.destroyAll() instead.
            "prototype$__delete__company2CustomerRate": {
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.count() instead.
            "prototype$__count__company2CustomerRate": {
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails() instead.
            "prototype$__get__driverJobDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/driverJobDetails",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.create() instead.
            "prototype$__create__driverJobDetails": {
              url: urlBase + "/CustomerDetails/:id/driverJobDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.destroyAll() instead.
            "prototype$__delete__driverJobDetails": {
              url: urlBase + "/CustomerDetails/:id/driverJobDetails",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.count() instead.
            "prototype$__count__driverJobDetails": {
              url: urlBase + "/CustomerDetails/:id/driverJobDetails/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails() instead.
            "prototype$__get__company2DriverDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.create() instead.
            "prototype$__create__company2DriverDetails": {
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.destroyAll() instead.
            "prototype$__delete__company2DriverDetails": {
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.count() instead.
            "prototype$__count__company2DriverDetails": {
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance() instead.
            "prototype$__get__driverAttendance": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/driverAttendance",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.create() instead.
            "prototype$__create__driverAttendance": {
              url: urlBase + "/CustomerDetails/:id/driverAttendance",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.destroyAll() instead.
            "prototype$__delete__driverAttendance": {
              url: urlBase + "/CustomerDetails/:id/driverAttendance",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.count() instead.
            "prototype$__count__driverAttendance": {
              url: urlBase + "/CustomerDetails/:id/driverAttendance/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails() instead.
            "prototype$__get__otherJobsDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.create() instead.
            "prototype$__create__otherJobsDetails": {
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.destroyAll() instead.
            "prototype$__delete__otherJobsDetails": {
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.count() instead.
            "prototype$__count__otherJobsDetails": {
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#create
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/CustomerDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#createMany
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/CustomerDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#upsert
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/CustomerDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#exists
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/CustomerDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#findById
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/CustomerDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#find
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/CustomerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#findOne
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/CustomerDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#updateAll
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/CustomerDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#deleteById
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/CustomerDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#count
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/CustomerDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#prototype$updateAttributes
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/CustomerDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#createChangeStream
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/CustomerDetails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#searchCustomers
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `from_date` – `{string}` -
             *
             *  - `to_date` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "searchCustomers": {
              url: urlBase + "/CustomerDetails/searchCustomers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#getCustomers
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             "getCustomers": {
              url: urlBase + "/CustomerDetails/getCustomers",
              method: "GET",
            },

            // INTERNAL. Use CustomerFavouriteAddresses.customerDetails() instead.
            "::get::CustomerFavouriteAddresses::customerDetails": {
              url: urlBase + "/CustomerFavouriteAddresses/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.customerDetails.findById() instead.
            "::findById::ConUsers::customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/customerDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.customerDetails.destroyById() instead.
            "::destroyById::ConUsers::customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/customerDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.customerDetails.updateById() instead.
            "::updateById::ConUsers::customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/customerDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.customerDetails() instead.
            "::get::ConUsers::customerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.customerDetails.create() instead.
            "::create::ConUsers::customerDetails": {
              url: urlBase + "/ConUsers/:id/customerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.customerDetails.createMany() instead.
            "::createMany::ConUsers::customerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/customerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.customerDetails.destroyAll() instead.
            "::delete::ConUsers::customerDetails": {
              url: urlBase + "/ConUsers/:id/customerDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.customerDetails.count() instead.
            "::count::ConUsers::customerDetails": {
              url: urlBase + "/ConUsers/:id/customerDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.customerDetails() instead.
            "::get::Bookings::customerDetails": {
              url: urlBase + "/Bookings/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use PermanentDriverRequest.customerDetails() instead.
            "::get::PermanentDriverRequest::customerDetails": {
              url: urlBase + "/PermanentDriverRequests/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.findById() instead.
            "::findById::Company2CustomerDetails::customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.destroyById() instead.
            "::destroyById::Company2CustomerDetails::customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.updateById() instead.
            "::updateById::Company2CustomerDetails::customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails() instead.
            "::get::Company2CustomerDetails::customerDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.create() instead.
            "::create::Company2CustomerDetails::customerDetails": {
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.createMany() instead.
            "::createMany::Company2CustomerDetails::customerDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.destroyAll() instead.
            "::delete::Company2CustomerDetails::customerDetails": {
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.count() instead.
            "::count::Company2CustomerDetails::customerDetails": {
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerRate.customerDetails() instead.
            "::get::Company2CustomerRate::customerDetails": {
              url: urlBase + "/Company2CustomerRates/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverJobDetails.customerDetails() instead.
            "::get::DriverJobDetails::customerDetails": {
              url: urlBase + "/DriverJobDetails/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverBlockReport.customerDetails() instead.
            "::get::DriverBlockReport::customerDetails": {
              url: urlBase + "/DriverBlockReports/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2DriverDetails.customerDetails() instead.
            "::get::Company2DriverDetails::customerDetails": {
              url: urlBase + "/Company2DriverDetails/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverAttendance.customerDetails() instead.
            "::get::DriverAttendance::customerDetails": {
              url: urlBase + "/DriverAttendances/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use AppointedDriverHistoricalData.customerDetails() instead.
            "::get::AppointedDriverHistoricalData::customerDetails": {
              url: urlBase + "/AppointedDriverHistoricalData/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsDetails.customerDetails() instead.
            "::get::OtherJobsDetails::customerDetails": {
              url: urlBase + "/OtherJobsDetails/:id/customerDetails",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#updateOrCreate
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#update
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#destroyById
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#removeById
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CustomerDetails#modelName
        * @propertyOf lbServices.CustomerDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CustomerDetails`.
        */
        R.modelName = "CustomerDetails";

    /**
     * @ngdoc object
     * @name lbServices.CustomerDetails.customerFavouriteAddresses
     * @header lbServices.CustomerDetails.customerFavouriteAddresses
     * @object
     * @description
     *
     * The object `CustomerDetails.customerFavouriteAddresses` groups methods
     * manipulating `CustomerFavouriteAddresses` instances related to `CustomerDetails`.
     *
     * Call {@link lbServices.CustomerDetails#customerFavouriteAddresses CustomerDetails.customerFavouriteAddresses()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#customerFavouriteAddresses
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Queries customerFavouriteAddresses of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             R.customerFavouriteAddresses = function() {
              var TargetResource = $injector.get("CustomerFavouriteAddresses");
              var action = TargetResource["::get::CustomerDetails::customerFavouriteAddresses"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.customerFavouriteAddresses#count
             * @methodOf lbServices.CustomerDetails.customerFavouriteAddresses
             *
             * @description
             *
             * Counts customerFavouriteAddresses of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.customerFavouriteAddresses.count = function() {
              var TargetResource = $injector.get("CustomerFavouriteAddresses");
              var action = TargetResource["::count::CustomerDetails::customerFavouriteAddresses"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.customerFavouriteAddresses#create
             * @methodOf lbServices.CustomerDetails.customerFavouriteAddresses
             *
             * @description
             *
             * Creates a new instance in customerFavouriteAddresses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             R.customerFavouriteAddresses.create = function() {
              var TargetResource = $injector.get("CustomerFavouriteAddresses");
              var action = TargetResource["::create::CustomerDetails::customerFavouriteAddresses"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.customerFavouriteAddresses#createMany
             * @methodOf lbServices.CustomerDetails.customerFavouriteAddresses
             *
             * @description
             *
             * Creates a new instance in customerFavouriteAddresses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             R.customerFavouriteAddresses.createMany = function() {
              var TargetResource = $injector.get("CustomerFavouriteAddresses");
              var action = TargetResource["::createMany::CustomerDetails::customerFavouriteAddresses"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.customerFavouriteAddresses#destroyAll
             * @methodOf lbServices.CustomerDetails.customerFavouriteAddresses
             *
             * @description
             *
             * Deletes all customerFavouriteAddresses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.customerFavouriteAddresses.destroyAll = function() {
              var TargetResource = $injector.get("CustomerFavouriteAddresses");
              var action = TargetResource["::delete::CustomerDetails::customerFavouriteAddresses"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.customerFavouriteAddresses#destroyById
             * @methodOf lbServices.CustomerDetails.customerFavouriteAddresses
             *
             * @description
             *
             * Delete a related item by id for customerFavouriteAddresses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customerFavouriteAddresses
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.customerFavouriteAddresses.destroyById = function() {
              var TargetResource = $injector.get("CustomerFavouriteAddresses");
              var action = TargetResource["::destroyById::CustomerDetails::customerFavouriteAddresses"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.customerFavouriteAddresses#findById
             * @methodOf lbServices.CustomerDetails.customerFavouriteAddresses
             *
             * @description
             *
             * Find a related item by id for customerFavouriteAddresses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customerFavouriteAddresses
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             R.customerFavouriteAddresses.findById = function() {
              var TargetResource = $injector.get("CustomerFavouriteAddresses");
              var action = TargetResource["::findById::CustomerDetails::customerFavouriteAddresses"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.customerFavouriteAddresses#updateById
             * @methodOf lbServices.CustomerDetails.customerFavouriteAddresses
             *
             * @description
             *
             * Update a related item by id for customerFavouriteAddresses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customerFavouriteAddresses
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             R.customerFavouriteAddresses.updateById = function() {
              var TargetResource = $injector.get("CustomerFavouriteAddresses");
              var action = TargetResource["::updateById::CustomerDetails::customerFavouriteAddresses"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#conUsers
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::CustomerDetails::conUsers"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.CustomerDetails.bookings
     * @header lbServices.CustomerDetails.bookings
     * @object
     * @description
     *
     * The object `CustomerDetails.bookings` groups methods
     * manipulating `Bookings` instances related to `CustomerDetails`.
     *
     * Call {@link lbServices.CustomerDetails#bookings CustomerDetails.bookings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#bookings
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Queries bookings of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::CustomerDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.bookings#count
             * @methodOf lbServices.CustomerDetails.bookings
             *
             * @description
             *
             * Counts bookings of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookings.count = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::count::CustomerDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.bookings#create
             * @methodOf lbServices.CustomerDetails.bookings
             *
             * @description
             *
             * Creates a new instance in bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.create = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::create::CustomerDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.bookings#createMany
             * @methodOf lbServices.CustomerDetails.bookings
             *
             * @description
             *
             * Creates a new instance in bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.createMany = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::createMany::CustomerDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.bookings#destroyAll
             * @methodOf lbServices.CustomerDetails.bookings
             *
             * @description
             *
             * Deletes all bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookings.destroyAll = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::delete::CustomerDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.bookings#destroyById
             * @methodOf lbServices.CustomerDetails.bookings
             *
             * @description
             *
             * Delete a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookings.destroyById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::destroyById::CustomerDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.bookings#findById
             * @methodOf lbServices.CustomerDetails.bookings
             *
             * @description
             *
             * Find a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.findById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::findById::CustomerDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.bookings#updateById
             * @methodOf lbServices.CustomerDetails.bookings
             *
             * @description
             *
             * Update a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.updateById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::updateById::CustomerDetails::bookings"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.CustomerDetails.permanentDriverRequest
     * @header lbServices.CustomerDetails.permanentDriverRequest
     * @object
     * @description
     *
     * The object `CustomerDetails.permanentDriverRequest` groups methods
     * manipulating `PermanentDriverRequest` instances related to `CustomerDetails`.
     *
     * Call {@link lbServices.CustomerDetails#permanentDriverRequest CustomerDetails.permanentDriverRequest()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#permanentDriverRequest
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Queries permanentDriverRequest of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::get::CustomerDetails::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.permanentDriverRequest#count
             * @methodOf lbServices.CustomerDetails.permanentDriverRequest
             *
             * @description
             *
             * Counts permanentDriverRequest of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.permanentDriverRequest.count = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::count::CustomerDetails::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.permanentDriverRequest#create
             * @methodOf lbServices.CustomerDetails.permanentDriverRequest
             *
             * @description
             *
             * Creates a new instance in permanentDriverRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest.create = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::create::CustomerDetails::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.permanentDriverRequest#createMany
             * @methodOf lbServices.CustomerDetails.permanentDriverRequest
             *
             * @description
             *
             * Creates a new instance in permanentDriverRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest.createMany = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::createMany::CustomerDetails::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.permanentDriverRequest#destroyAll
             * @methodOf lbServices.CustomerDetails.permanentDriverRequest
             *
             * @description
             *
             * Deletes all permanentDriverRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.permanentDriverRequest.destroyAll = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::delete::CustomerDetails::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.permanentDriverRequest#destroyById
             * @methodOf lbServices.CustomerDetails.permanentDriverRequest
             *
             * @description
             *
             * Delete a related item by id for permanentDriverRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for permanentDriverRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.permanentDriverRequest.destroyById = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::destroyById::CustomerDetails::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.permanentDriverRequest#findById
             * @methodOf lbServices.CustomerDetails.permanentDriverRequest
             *
             * @description
             *
             * Find a related item by id for permanentDriverRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for permanentDriverRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest.findById = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::findById::CustomerDetails::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.permanentDriverRequest#updateById
             * @methodOf lbServices.CustomerDetails.permanentDriverRequest
             *
             * @description
             *
             * Update a related item by id for permanentDriverRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for permanentDriverRequest
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest.updateById = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::updateById::CustomerDetails::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#company2CustomerDetails
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Fetches belongsTo relation company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::get::CustomerDetails::company2CustomerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.CustomerDetails.company2CustomerRate
     * @header lbServices.CustomerDetails.company2CustomerRate
     * @object
     * @description
     *
     * The object `CustomerDetails.company2CustomerRate` groups methods
     * manipulating `Company2CustomerRate` instances related to `CustomerDetails`.
     *
     * Call {@link lbServices.CustomerDetails#company2CustomerRate CustomerDetails.company2CustomerRate()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#company2CustomerRate
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Queries company2CustomerRate of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::get::CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2CustomerRate#count
             * @methodOf lbServices.CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Counts company2CustomerRate of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2CustomerRate.count = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::count::CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2CustomerRate#create
             * @methodOf lbServices.CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Creates a new instance in company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.create = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::create::CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2CustomerRate#createMany
             * @methodOf lbServices.CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Creates a new instance in company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.createMany = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::createMany::CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2CustomerRate#destroyAll
             * @methodOf lbServices.CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Deletes all company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerRate.destroyAll = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::delete::CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2CustomerRate#destroyById
             * @methodOf lbServices.CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Delete a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerRate.destroyById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::destroyById::CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2CustomerRate#findById
             * @methodOf lbServices.CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Find a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.findById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::findById::CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2CustomerRate#updateById
             * @methodOf lbServices.CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Update a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.updateById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::updateById::CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.CustomerDetails.driverJobDetails
     * @header lbServices.CustomerDetails.driverJobDetails
     * @object
     * @description
     *
     * The object `CustomerDetails.driverJobDetails` groups methods
     * manipulating `DriverJobDetails` instances related to `CustomerDetails`.
     *
     * Call {@link lbServices.CustomerDetails#driverJobDetails CustomerDetails.driverJobDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#driverJobDetails
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Queries driverJobDetails of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             R.driverJobDetails = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::get::CustomerDetails::driverJobDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverJobDetails#count
             * @methodOf lbServices.CustomerDetails.driverJobDetails
             *
             * @description
             *
             * Counts driverJobDetails of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverJobDetails.count = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::count::CustomerDetails::driverJobDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverJobDetails#create
             * @methodOf lbServices.CustomerDetails.driverJobDetails
             *
             * @description
             *
             * Creates a new instance in driverJobDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             R.driverJobDetails.create = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::create::CustomerDetails::driverJobDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverJobDetails#createMany
             * @methodOf lbServices.CustomerDetails.driverJobDetails
             *
             * @description
             *
             * Creates a new instance in driverJobDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             R.driverJobDetails.createMany = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::createMany::CustomerDetails::driverJobDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverJobDetails#destroyAll
             * @methodOf lbServices.CustomerDetails.driverJobDetails
             *
             * @description
             *
             * Deletes all driverJobDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverJobDetails.destroyAll = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::delete::CustomerDetails::driverJobDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverJobDetails#destroyById
             * @methodOf lbServices.CustomerDetails.driverJobDetails
             *
             * @description
             *
             * Delete a related item by id for driverJobDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverJobDetails.destroyById = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::destroyById::CustomerDetails::driverJobDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverJobDetails#findById
             * @methodOf lbServices.CustomerDetails.driverJobDetails
             *
             * @description
             *
             * Find a related item by id for driverJobDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             R.driverJobDetails.findById = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::findById::CustomerDetails::driverJobDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverJobDetails#updateById
             * @methodOf lbServices.CustomerDetails.driverJobDetails
             *
             * @description
             *
             * Update a related item by id for driverJobDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             R.driverJobDetails.updateById = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::updateById::CustomerDetails::driverJobDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.CustomerDetails.company2DriverDetails
     * @header lbServices.CustomerDetails.company2DriverDetails
     * @object
     * @description
     *
     * The object `CustomerDetails.company2DriverDetails` groups methods
     * manipulating `Company2DriverDetails` instances related to `CustomerDetails`.
     *
     * Call {@link lbServices.CustomerDetails#company2DriverDetails CustomerDetails.company2DriverDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#company2DriverDetails
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Queries company2DriverDetails of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::get::CustomerDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2DriverDetails#count
             * @methodOf lbServices.CustomerDetails.company2DriverDetails
             *
             * @description
             *
             * Counts company2DriverDetails of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2DriverDetails.count = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::count::CustomerDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2DriverDetails#create
             * @methodOf lbServices.CustomerDetails.company2DriverDetails
             *
             * @description
             *
             * Creates a new instance in company2DriverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails.create = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::create::CustomerDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2DriverDetails#createMany
             * @methodOf lbServices.CustomerDetails.company2DriverDetails
             *
             * @description
             *
             * Creates a new instance in company2DriverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails.createMany = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::createMany::CustomerDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2DriverDetails#destroyAll
             * @methodOf lbServices.CustomerDetails.company2DriverDetails
             *
             * @description
             *
             * Deletes all company2DriverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2DriverDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::delete::CustomerDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2DriverDetails#destroyById
             * @methodOf lbServices.CustomerDetails.company2DriverDetails
             *
             * @description
             *
             * Delete a related item by id for company2DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2DriverDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2DriverDetails.destroyById = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::destroyById::CustomerDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2DriverDetails#findById
             * @methodOf lbServices.CustomerDetails.company2DriverDetails
             *
             * @description
             *
             * Find a related item by id for company2DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2DriverDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails.findById = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::findById::CustomerDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.company2DriverDetails#updateById
             * @methodOf lbServices.CustomerDetails.company2DriverDetails
             *
             * @description
             *
             * Update a related item by id for company2DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2DriverDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails.updateById = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::updateById::CustomerDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.CustomerDetails.driverAttendance
     * @header lbServices.CustomerDetails.driverAttendance
     * @object
     * @description
     *
     * The object `CustomerDetails.driverAttendance` groups methods
     * manipulating `DriverAttendance` instances related to `CustomerDetails`.
     *
     * Call {@link lbServices.CustomerDetails#driverAttendance CustomerDetails.driverAttendance()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#driverAttendance
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Queries driverAttendance of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::get::CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverAttendance#count
             * @methodOf lbServices.CustomerDetails.driverAttendance
             *
             * @description
             *
             * Counts driverAttendance of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverAttendance.count = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::count::CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverAttendance#create
             * @methodOf lbServices.CustomerDetails.driverAttendance
             *
             * @description
             *
             * Creates a new instance in driverAttendance of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance.create = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::create::CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverAttendance#createMany
             * @methodOf lbServices.CustomerDetails.driverAttendance
             *
             * @description
             *
             * Creates a new instance in driverAttendance of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance.createMany = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::createMany::CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverAttendance#destroyAll
             * @methodOf lbServices.CustomerDetails.driverAttendance
             *
             * @description
             *
             * Deletes all driverAttendance of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAttendance.destroyAll = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::delete::CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverAttendance#destroyById
             * @methodOf lbServices.CustomerDetails.driverAttendance
             *
             * @description
             *
             * Delete a related item by id for driverAttendance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAttendance
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAttendance.destroyById = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::destroyById::CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverAttendance#findById
             * @methodOf lbServices.CustomerDetails.driverAttendance
             *
             * @description
             *
             * Find a related item by id for driverAttendance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAttendance
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance.findById = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::findById::CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.driverAttendance#updateById
             * @methodOf lbServices.CustomerDetails.driverAttendance
             *
             * @description
             *
             * Update a related item by id for driverAttendance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAttendance
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance.updateById = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::updateById::CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.CustomerDetails.otherJobsDetails
     * @header lbServices.CustomerDetails.otherJobsDetails
     * @object
     * @description
     *
     * The object `CustomerDetails.otherJobsDetails` groups methods
     * manipulating `OtherJobsDetails` instances related to `CustomerDetails`.
     *
     * Call {@link lbServices.CustomerDetails#otherJobsDetails CustomerDetails.otherJobsDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails#otherJobsDetails
             * @methodOf lbServices.CustomerDetails
             *
             * @description
             *
             * Queries otherJobsDetails of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             R.otherJobsDetails = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::get::CustomerDetails::otherJobsDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.otherJobsDetails#count
             * @methodOf lbServices.CustomerDetails.otherJobsDetails
             *
             * @description
             *
             * Counts otherJobsDetails of CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.otherJobsDetails.count = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::count::CustomerDetails::otherJobsDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.otherJobsDetails#create
             * @methodOf lbServices.CustomerDetails.otherJobsDetails
             *
             * @description
             *
             * Creates a new instance in otherJobsDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             R.otherJobsDetails.create = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::create::CustomerDetails::otherJobsDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.otherJobsDetails#createMany
             * @methodOf lbServices.CustomerDetails.otherJobsDetails
             *
             * @description
             *
             * Creates a new instance in otherJobsDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             R.otherJobsDetails.createMany = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::createMany::CustomerDetails::otherJobsDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.otherJobsDetails#destroyAll
             * @methodOf lbServices.CustomerDetails.otherJobsDetails
             *
             * @description
             *
             * Deletes all otherJobsDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherJobsDetails.destroyAll = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::delete::CustomerDetails::otherJobsDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.otherJobsDetails#destroyById
             * @methodOf lbServices.CustomerDetails.otherJobsDetails
             *
             * @description
             *
             * Delete a related item by id for otherJobsDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherJobsDetails.destroyById = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::destroyById::CustomerDetails::otherJobsDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.otherJobsDetails#findById
             * @methodOf lbServices.CustomerDetails.otherJobsDetails
             *
             * @description
             *
             * Find a related item by id for otherJobsDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             R.otherJobsDetails.findById = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::findById::CustomerDetails::otherJobsDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CustomerDetails.otherJobsDetails#updateById
             * @methodOf lbServices.CustomerDetails.otherJobsDetails
             *
             * @description
             *
             * Update a related item by id for otherJobsDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             R.otherJobsDetails.updateById = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::updateById::CustomerDetails::otherJobsDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.DriverDetails
 * @header lbServices.DriverDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverDetails.collections.findById() instead.
            "prototype$__findById__collections": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/collections/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.collections.destroyById() instead.
            "prototype$__destroyById__collections": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/collections/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.collections.updateById() instead.
            "prototype$__updateById__collections": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/collections/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.findById() instead.
            "prototype$__findById__bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookingInvites/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.destroyById() instead.
            "prototype$__destroyById__bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookingInvites/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.updateById() instead.
            "prototype$__updateById__bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookingInvites/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/DriverDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookings.findById() instead.
            "prototype$__findById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookings.destroyById() instead.
            "prototype$__destroyById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.bookings.updateById() instead.
            "prototype$__updateById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.driverAccount.findById() instead.
            "prototype$__findById__driverAccount": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverAccount/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverAccount.destroyById() instead.
            "prototype$__destroyById__driverAccount": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverAccount/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverAccount.updateById() instead.
            "prototype$__updateById__driverAccount": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverAccount/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.findById() instead.
            "prototype$__findById__driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.destroyById() instead.
            "prototype$__destroyById__driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.updateById() instead.
            "prototype$__updateById__driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.findById() instead.
            "prototype$__findById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.destroyById() instead.
            "prototype$__destroyById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.updateById() instead.
            "prototype$__updateById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.findById() instead.
            "prototype$__findById__driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverJobRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.destroyById() instead.
            "prototype$__destroyById__driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverJobRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.updateById() instead.
            "prototype$__updateById__driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverJobRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.findById() instead.
            "prototype$__findById__company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2DriverDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.destroyById() instead.
            "prototype$__destroyById__company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2DriverDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.updateById() instead.
            "prototype$__updateById__company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2DriverDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.findById() instead.
            "prototype$__findById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/otherJobsRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.destroyById() instead.
            "prototype$__destroyById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/otherJobsRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.updateById() instead.
            "prototype$__updateById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/otherJobsRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.collections() instead.
            "prototype$__get__collections": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/collections",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.collections.create() instead.
            "prototype$__create__collections": {
              url: urlBase + "/DriverDetails/:id/collections",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.collections.destroyAll() instead.
            "prototype$__delete__collections": {
              url: urlBase + "/DriverDetails/:id/collections",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.collections.count() instead.
            "prototype$__count__collections": {
              url: urlBase + "/DriverDetails/:id/collections/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookingInvites() instead.
            "prototype$__get__bookingInvites": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/bookingInvites",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.create() instead.
            "prototype$__create__bookingInvites": {
              url: urlBase + "/DriverDetails/:id/bookingInvites",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.destroyAll() instead.
            "prototype$__delete__bookingInvites": {
              url: urlBase + "/DriverDetails/:id/bookingInvites",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.count() instead.
            "prototype$__count__bookingInvites": {
              url: urlBase + "/DriverDetails/:id/bookingInvites/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookings() instead.
            "prototype$__get__bookings": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookings.create() instead.
            "prototype$__create__bookings": {
              url: urlBase + "/DriverDetails/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.bookings.destroyAll() instead.
            "prototype$__delete__bookings": {
              url: urlBase + "/DriverDetails/:id/bookings",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.bookings.count() instead.
            "prototype$__count__bookings": {
              url: urlBase + "/DriverDetails/:id/bookings/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverAccount() instead.
            "prototype$__get__driverAccount": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverAccount",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverAccount.create() instead.
            "prototype$__create__driverAccount": {
              url: urlBase + "/DriverDetails/:id/driverAccount",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverAccount.destroyAll() instead.
            "prototype$__delete__driverAccount": {
              url: urlBase + "/DriverDetails/:id/driverAccount",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverAccount.count() instead.
            "prototype$__count__driverAccount": {
              url: urlBase + "/DriverDetails/:id/driverAccount/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions() instead.
            "prototype$__get__driverRechargeTransactions": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.create() instead.
            "prototype$__create__driverRechargeTransactions": {
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.destroyAll() instead.
            "prototype$__delete__driverRechargeTransactions": {
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.count() instead.
            "prototype$__count__driverRechargeTransactions": {
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate() instead.
            "prototype$__get__company2CustomerRate": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/company2CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.create() instead.
            "prototype$__create__company2CustomerRate": {
              url: urlBase + "/DriverDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.destroyAll() instead.
            "prototype$__delete__company2CustomerRate": {
              url: urlBase + "/DriverDetails/:id/company2CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.count() instead.
            "prototype$__count__company2CustomerRate": {
              url: urlBase + "/DriverDetails/:id/company2CustomerRate/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest() instead.
            "prototype$__get__driverJobRequest": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverJobRequest",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.create() instead.
            "prototype$__create__driverJobRequest": {
              url: urlBase + "/DriverDetails/:id/driverJobRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.destroyAll() instead.
            "prototype$__delete__driverJobRequest": {
              url: urlBase + "/DriverDetails/:id/driverJobRequest",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.count() instead.
            "prototype$__count__driverJobRequest": {
              url: urlBase + "/DriverDetails/:id/driverJobRequest/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails() instead.
            "prototype$__get__company2DriverDetails": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/company2DriverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.create() instead.
            "prototype$__create__company2DriverDetails": {
              url: urlBase + "/DriverDetails/:id/company2DriverDetails",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.destroyAll() instead.
            "prototype$__delete__company2DriverDetails": {
              url: urlBase + "/DriverDetails/:id/company2DriverDetails",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.count() instead.
            "prototype$__count__company2DriverDetails": {
              url: urlBase + "/DriverDetails/:id/company2DriverDetails/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest() instead.
            "prototype$__get__otherJobsRequest": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/otherJobsRequest",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.create() instead.
            "prototype$__create__otherJobsRequest": {
              url: urlBase + "/DriverDetails/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.destroyAll() instead.
            "prototype$__delete__otherJobsRequest": {
              url: urlBase + "/DriverDetails/:id/otherJobsRequest",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.count() instead.
            "prototype$__count__otherJobsRequest": {
              url: urlBase + "/DriverDetails/:id/otherJobsRequest/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#create
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#createMany
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#upsert
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#exists
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#findById
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#find
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#findOne
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#updateAll
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#deleteById
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#count
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#prototype$updateAttributes
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#createChangeStream
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverDetails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getDrivers
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getDrivers": {
              url: urlBase + "/DriverDetails/getDrivers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getDriverDetail
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `address` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getDriverDetail": {
              url: urlBase + "/DriverDetails/getDriverDetail",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getPvExpiryDrivers
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getPvExpiryDrivers": {
              url: urlBase + "/DriverDetails/getPvExpiryDrivers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getDLExpiryDrivers
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getDLExpiryDrivers": {
              url: urlBase + "/DriverDetails/getDLExpiryDrivers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getOtherCityDrivers
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getOtherCityDrivers": {
              url: urlBase + "/DriverDetails/getOtherCityDrivers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getOtherCityDriversVehicle
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             *  - `vehicle` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getOtherCityDriversVehicle": {
              url: urlBase + "/DriverDetails/getOtherCityDriversVehicle",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getOtherCityDriversLocation
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             *  - `location` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getOtherCityDriversLocation": {
              url: urlBase + "/DriverDetails/getOtherCityDriversLocation",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getOtherCityDriversVehivleLocation
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             *  - `vehicle` – `{string}` -
             *
             *  - `location` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getOtherCityDriversVehivleLocation": {
              url: urlBase + "/DriverDetails/getOtherCityDriversVehivleLocation",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#getDriverCarDetails
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             "getDriverCarDetails": {
              url: urlBase + "/DriverDetails/getDriverCarDetails",
              method: "GET",
            },

            // INTERNAL. Use Collections.driverDetails() instead.
            "::get::Collections::driverDetails": {
              url: urlBase + "/Collections/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use BookingInvites.driverDetails() instead.
            "::get::BookingInvites::driverDetails": {
              url: urlBase + "/BookingInvites/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.driverDetails.findById() instead.
            "::findById::ConUsers::driverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/driverDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.driverDetails.destroyById() instead.
            "::destroyById::ConUsers::driverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/driverDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.driverDetails.updateById() instead.
            "::updateById::ConUsers::driverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/driverDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.driverDetails() instead.
            "::get::ConUsers::driverDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.driverDetails.create() instead.
            "::create::ConUsers::driverDetails": {
              url: urlBase + "/ConUsers/:id/driverDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.driverDetails.createMany() instead.
            "::createMany::ConUsers::driverDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/driverDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.driverDetails.destroyAll() instead.
            "::delete::ConUsers::driverDetails": {
              url: urlBase + "/ConUsers/:id/driverDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.driverDetails.count() instead.
            "::count::ConUsers::driverDetails": {
              url: urlBase + "/ConUsers/:id/driverDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.driverDetails() instead.
            "::get::Bookings::driverDetails": {
              url: urlBase + "/Bookings/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverDetails() instead.
            "::get::DriverAccount::driverDetails": {
              url: urlBase + "/DriverAccounts/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverDetails() instead.
            "::get::DriverRechargeTransactions::driverDetails": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerRate.driverDetails() instead.
            "::get::Company2CustomerRate::driverDetails": {
              url: urlBase + "/Company2CustomerRates/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverJobRequest.driverDetails() instead.
            "::get::DriverJobRequest::driverDetails": {
              url: urlBase + "/DriverJobRequests/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverBlockReport.driverDetails() instead.
            "::get::DriverBlockReport::driverDetails": {
              url: urlBase + "/DriverBlockReports/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2DriverDetails.driverDetails() instead.
            "::get::Company2DriverDetails::driverDetails": {
              url: urlBase + "/Company2DriverDetails/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverAttendance.driverDetails() instead.
            "::get::DriverAttendance::driverDetails": {
              url: urlBase + "/DriverAttendances/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use AppointedDriverHistoricalData.driverDetails() instead.
            "::get::AppointedDriverHistoricalData::driverDetails": {
              url: urlBase + "/AppointedDriverHistoricalData/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsRequest.driverDetails() instead.
            "::get::OtherJobsRequest::driverDetails": {
              url: urlBase + "/OtherJobsRequests/:id/driverDetails",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#updateOrCreate
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#update
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#destroyById
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#removeById
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverDetails#modelName
        * @propertyOf lbServices.DriverDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverDetails`.
        */
        R.modelName = "DriverDetails";

    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.collections
     * @header lbServices.DriverDetails.collections
     * @object
     * @description
     *
     * The object `DriverDetails.collections` groups methods
     * manipulating `Collections` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#collections DriverDetails.collections()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#collections
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries collections of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             R.collections = function() {
              var TargetResource = $injector.get("Collections");
              var action = TargetResource["::get::DriverDetails::collections"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.collections#count
             * @methodOf lbServices.DriverDetails.collections
             *
             * @description
             *
             * Counts collections of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.collections.count = function() {
              var TargetResource = $injector.get("Collections");
              var action = TargetResource["::count::DriverDetails::collections"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.collections#create
             * @methodOf lbServices.DriverDetails.collections
             *
             * @description
             *
             * Creates a new instance in collections of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             R.collections.create = function() {
              var TargetResource = $injector.get("Collections");
              var action = TargetResource["::create::DriverDetails::collections"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.collections#createMany
             * @methodOf lbServices.DriverDetails.collections
             *
             * @description
             *
             * Creates a new instance in collections of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             R.collections.createMany = function() {
              var TargetResource = $injector.get("Collections");
              var action = TargetResource["::createMany::DriverDetails::collections"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.collections#destroyAll
             * @methodOf lbServices.DriverDetails.collections
             *
             * @description
             *
             * Deletes all collections of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.collections.destroyAll = function() {
              var TargetResource = $injector.get("Collections");
              var action = TargetResource["::delete::DriverDetails::collections"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.collections#destroyById
             * @methodOf lbServices.DriverDetails.collections
             *
             * @description
             *
             * Delete a related item by id for collections.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for collections
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.collections.destroyById = function() {
              var TargetResource = $injector.get("Collections");
              var action = TargetResource["::destroyById::DriverDetails::collections"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.collections#findById
             * @methodOf lbServices.DriverDetails.collections
             *
             * @description
             *
             * Find a related item by id for collections.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for collections
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             R.collections.findById = function() {
              var TargetResource = $injector.get("Collections");
              var action = TargetResource["::findById::DriverDetails::collections"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.collections#updateById
             * @methodOf lbServices.DriverDetails.collections
             *
             * @description
             *
             * Update a related item by id for collections.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for collections
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             R.collections.updateById = function() {
              var TargetResource = $injector.get("Collections");
              var action = TargetResource["::updateById::DriverDetails::collections"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.bookingInvites
     * @header lbServices.DriverDetails.bookingInvites
     * @object
     * @description
     *
     * The object `DriverDetails.bookingInvites` groups methods
     * manipulating `BookingInvites` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#bookingInvites DriverDetails.bookingInvites()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#bookingInvites
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries bookingInvites of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::get::DriverDetails::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookingInvites#count
             * @methodOf lbServices.DriverDetails.bookingInvites
             *
             * @description
             *
             * Counts bookingInvites of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookingInvites.count = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::count::DriverDetails::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookingInvites#create
             * @methodOf lbServices.DriverDetails.bookingInvites
             *
             * @description
             *
             * Creates a new instance in bookingInvites of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites.create = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::create::DriverDetails::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookingInvites#createMany
             * @methodOf lbServices.DriverDetails.bookingInvites
             *
             * @description
             *
             * Creates a new instance in bookingInvites of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites.createMany = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::createMany::DriverDetails::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookingInvites#destroyAll
             * @methodOf lbServices.DriverDetails.bookingInvites
             *
             * @description
             *
             * Deletes all bookingInvites of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingInvites.destroyAll = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::delete::DriverDetails::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookingInvites#destroyById
             * @methodOf lbServices.DriverDetails.bookingInvites
             *
             * @description
             *
             * Delete a related item by id for bookingInvites.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingInvites
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingInvites.destroyById = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::destroyById::DriverDetails::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookingInvites#findById
             * @methodOf lbServices.DriverDetails.bookingInvites
             *
             * @description
             *
             * Find a related item by id for bookingInvites.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingInvites
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites.findById = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::findById::DriverDetails::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookingInvites#updateById
             * @methodOf lbServices.DriverDetails.bookingInvites
             *
             * @description
             *
             * Update a related item by id for bookingInvites.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingInvites
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites.updateById = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::updateById::DriverDetails::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#conUsers
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::DriverDetails::conUsers"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.bookings
     * @header lbServices.DriverDetails.bookings
     * @object
     * @description
     *
     * The object `DriverDetails.bookings` groups methods
     * manipulating `Bookings` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#bookings DriverDetails.bookings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#bookings
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries bookings of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::DriverDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookings#count
             * @methodOf lbServices.DriverDetails.bookings
             *
             * @description
             *
             * Counts bookings of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookings.count = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::count::DriverDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookings#create
             * @methodOf lbServices.DriverDetails.bookings
             *
             * @description
             *
             * Creates a new instance in bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.create = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::create::DriverDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookings#createMany
             * @methodOf lbServices.DriverDetails.bookings
             *
             * @description
             *
             * Creates a new instance in bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.createMany = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::createMany::DriverDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookings#destroyAll
             * @methodOf lbServices.DriverDetails.bookings
             *
             * @description
             *
             * Deletes all bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookings.destroyAll = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::delete::DriverDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookings#destroyById
             * @methodOf lbServices.DriverDetails.bookings
             *
             * @description
             *
             * Delete a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookings.destroyById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::destroyById::DriverDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookings#findById
             * @methodOf lbServices.DriverDetails.bookings
             *
             * @description
             *
             * Find a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.findById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::findById::DriverDetails::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.bookings#updateById
             * @methodOf lbServices.DriverDetails.bookings
             *
             * @description
             *
             * Update a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.updateById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::updateById::DriverDetails::bookings"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.driverAccount
     * @header lbServices.DriverDetails.driverAccount
     * @object
     * @description
     *
     * The object `DriverDetails.driverAccount` groups methods
     * manipulating `DriverAccount` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#driverAccount DriverDetails.driverAccount()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#driverAccount
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries driverAccount of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             R.driverAccount = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::get::DriverDetails::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverAccount#count
             * @methodOf lbServices.DriverDetails.driverAccount
             *
             * @description
             *
             * Counts driverAccount of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverAccount.count = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::count::DriverDetails::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverAccount#create
             * @methodOf lbServices.DriverDetails.driverAccount
             *
             * @description
             *
             * Creates a new instance in driverAccount of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             R.driverAccount.create = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::create::DriverDetails::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverAccount#createMany
             * @methodOf lbServices.DriverDetails.driverAccount
             *
             * @description
             *
             * Creates a new instance in driverAccount of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             R.driverAccount.createMany = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::createMany::DriverDetails::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverAccount#destroyAll
             * @methodOf lbServices.DriverDetails.driverAccount
             *
             * @description
             *
             * Deletes all driverAccount of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAccount.destroyAll = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::delete::DriverDetails::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverAccount#destroyById
             * @methodOf lbServices.DriverDetails.driverAccount
             *
             * @description
             *
             * Delete a related item by id for driverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccount
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAccount.destroyById = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::destroyById::DriverDetails::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverAccount#findById
             * @methodOf lbServices.DriverDetails.driverAccount
             *
             * @description
             *
             * Find a related item by id for driverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccount
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             R.driverAccount.findById = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::findById::DriverDetails::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverAccount#updateById
             * @methodOf lbServices.DriverDetails.driverAccount
             *
             * @description
             *
             * Update a related item by id for driverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccount
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             R.driverAccount.updateById = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::updateById::DriverDetails::driverAccount"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.driverRechargeTransactions
     * @header lbServices.DriverDetails.driverRechargeTransactions
     * @object
     * @description
     *
     * The object `DriverDetails.driverRechargeTransactions` groups methods
     * manipulating `DriverRechargeTransactions` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#driverRechargeTransactions DriverDetails.driverRechargeTransactions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#driverRechargeTransactions
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries driverRechargeTransactions of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::get::DriverDetails::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverRechargeTransactions#count
             * @methodOf lbServices.DriverDetails.driverRechargeTransactions
             *
             * @description
             *
             * Counts driverRechargeTransactions of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverRechargeTransactions.count = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::count::DriverDetails::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverRechargeTransactions#create
             * @methodOf lbServices.DriverDetails.driverRechargeTransactions
             *
             * @description
             *
             * Creates a new instance in driverRechargeTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions.create = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::create::DriverDetails::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverRechargeTransactions#createMany
             * @methodOf lbServices.DriverDetails.driverRechargeTransactions
             *
             * @description
             *
             * Creates a new instance in driverRechargeTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions.createMany = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::createMany::DriverDetails::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverRechargeTransactions#destroyAll
             * @methodOf lbServices.DriverDetails.driverRechargeTransactions
             *
             * @description
             *
             * Deletes all driverRechargeTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverRechargeTransactions.destroyAll = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::delete::DriverDetails::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverRechargeTransactions#destroyById
             * @methodOf lbServices.DriverDetails.driverRechargeTransactions
             *
             * @description
             *
             * Delete a related item by id for driverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverRechargeTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverRechargeTransactions.destroyById = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::destroyById::DriverDetails::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverRechargeTransactions#findById
             * @methodOf lbServices.DriverDetails.driverRechargeTransactions
             *
             * @description
             *
             * Find a related item by id for driverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverRechargeTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions.findById = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::findById::DriverDetails::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverRechargeTransactions#updateById
             * @methodOf lbServices.DriverDetails.driverRechargeTransactions
             *
             * @description
             *
             * Update a related item by id for driverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverRechargeTransactions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions.updateById = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::updateById::DriverDetails::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.company2CustomerRate
     * @header lbServices.DriverDetails.company2CustomerRate
     * @object
     * @description
     *
     * The object `DriverDetails.company2CustomerRate` groups methods
     * manipulating `Company2CustomerRate` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#company2CustomerRate DriverDetails.company2CustomerRate()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#company2CustomerRate
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries company2CustomerRate of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::get::DriverDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2CustomerRate#count
             * @methodOf lbServices.DriverDetails.company2CustomerRate
             *
             * @description
             *
             * Counts company2CustomerRate of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2CustomerRate.count = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::count::DriverDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2CustomerRate#create
             * @methodOf lbServices.DriverDetails.company2CustomerRate
             *
             * @description
             *
             * Creates a new instance in company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.create = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::create::DriverDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2CustomerRate#createMany
             * @methodOf lbServices.DriverDetails.company2CustomerRate
             *
             * @description
             *
             * Creates a new instance in company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.createMany = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::createMany::DriverDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2CustomerRate#destroyAll
             * @methodOf lbServices.DriverDetails.company2CustomerRate
             *
             * @description
             *
             * Deletes all company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerRate.destroyAll = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::delete::DriverDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2CustomerRate#destroyById
             * @methodOf lbServices.DriverDetails.company2CustomerRate
             *
             * @description
             *
             * Delete a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerRate.destroyById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::destroyById::DriverDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2CustomerRate#findById
             * @methodOf lbServices.DriverDetails.company2CustomerRate
             *
             * @description
             *
             * Find a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.findById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::findById::DriverDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2CustomerRate#updateById
             * @methodOf lbServices.DriverDetails.company2CustomerRate
             *
             * @description
             *
             * Update a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.updateById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::updateById::DriverDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.driverJobRequest
     * @header lbServices.DriverDetails.driverJobRequest
     * @object
     * @description
     *
     * The object `DriverDetails.driverJobRequest` groups methods
     * manipulating `DriverJobRequest` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#driverJobRequest DriverDetails.driverJobRequest()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#driverJobRequest
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries driverJobRequest of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::get::DriverDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverJobRequest#count
             * @methodOf lbServices.DriverDetails.driverJobRequest
             *
             * @description
             *
             * Counts driverJobRequest of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverJobRequest.count = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::count::DriverDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverJobRequest#create
             * @methodOf lbServices.DriverDetails.driverJobRequest
             *
             * @description
             *
             * Creates a new instance in driverJobRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest.create = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::create::DriverDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverJobRequest#createMany
             * @methodOf lbServices.DriverDetails.driverJobRequest
             *
             * @description
             *
             * Creates a new instance in driverJobRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest.createMany = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::createMany::DriverDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverJobRequest#destroyAll
             * @methodOf lbServices.DriverDetails.driverJobRequest
             *
             * @description
             *
             * Deletes all driverJobRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverJobRequest.destroyAll = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::delete::DriverDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverJobRequest#destroyById
             * @methodOf lbServices.DriverDetails.driverJobRequest
             *
             * @description
             *
             * Delete a related item by id for driverJobRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverJobRequest.destroyById = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::destroyById::DriverDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverJobRequest#findById
             * @methodOf lbServices.DriverDetails.driverJobRequest
             *
             * @description
             *
             * Find a related item by id for driverJobRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest.findById = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::findById::DriverDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.driverJobRequest#updateById
             * @methodOf lbServices.DriverDetails.driverJobRequest
             *
             * @description
             *
             * Update a related item by id for driverJobRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobRequest
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest.updateById = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::updateById::DriverDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.company2DriverDetails
     * @header lbServices.DriverDetails.company2DriverDetails
     * @object
     * @description
     *
     * The object `DriverDetails.company2DriverDetails` groups methods
     * manipulating `Company2DriverDetails` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#company2DriverDetails DriverDetails.company2DriverDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#company2DriverDetails
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries company2DriverDetails of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::get::DriverDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2DriverDetails#count
             * @methodOf lbServices.DriverDetails.company2DriverDetails
             *
             * @description
             *
             * Counts company2DriverDetails of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2DriverDetails.count = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::count::DriverDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2DriverDetails#create
             * @methodOf lbServices.DriverDetails.company2DriverDetails
             *
             * @description
             *
             * Creates a new instance in company2DriverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails.create = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::create::DriverDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2DriverDetails#createMany
             * @methodOf lbServices.DriverDetails.company2DriverDetails
             *
             * @description
             *
             * Creates a new instance in company2DriverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails.createMany = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::createMany::DriverDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2DriverDetails#destroyAll
             * @methodOf lbServices.DriverDetails.company2DriverDetails
             *
             * @description
             *
             * Deletes all company2DriverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2DriverDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::delete::DriverDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2DriverDetails#destroyById
             * @methodOf lbServices.DriverDetails.company2DriverDetails
             *
             * @description
             *
             * Delete a related item by id for company2DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2DriverDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2DriverDetails.destroyById = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::destroyById::DriverDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2DriverDetails#findById
             * @methodOf lbServices.DriverDetails.company2DriverDetails
             *
             * @description
             *
             * Find a related item by id for company2DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2DriverDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails.findById = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::findById::DriverDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.company2DriverDetails#updateById
             * @methodOf lbServices.DriverDetails.company2DriverDetails
             *
             * @description
             *
             * Update a related item by id for company2DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2DriverDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R.company2DriverDetails.updateById = function() {
              var TargetResource = $injector.get("Company2DriverDetails");
              var action = TargetResource["::updateById::DriverDetails::company2DriverDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverDetails.otherJobsRequest
     * @header lbServices.DriverDetails.otherJobsRequest
     * @object
     * @description
     *
     * The object `DriverDetails.otherJobsRequest` groups methods
     * manipulating `OtherJobsRequest` instances related to `DriverDetails`.
     *
     * Call {@link lbServices.DriverDetails#otherJobsRequest DriverDetails.otherJobsRequest()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverDetails#otherJobsRequest
             * @methodOf lbServices.DriverDetails
             *
             * @description
             *
             * Queries otherJobsRequest of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::get::DriverDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.otherJobsRequest#count
             * @methodOf lbServices.DriverDetails.otherJobsRequest
             *
             * @description
             *
             * Counts otherJobsRequest of DriverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.otherJobsRequest.count = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::count::DriverDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.otherJobsRequest#create
             * @methodOf lbServices.DriverDetails.otherJobsRequest
             *
             * @description
             *
             * Creates a new instance in otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.create = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::create::DriverDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.otherJobsRequest#createMany
             * @methodOf lbServices.DriverDetails.otherJobsRequest
             *
             * @description
             *
             * Creates a new instance in otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.createMany = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::createMany::DriverDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.otherJobsRequest#destroyAll
             * @methodOf lbServices.DriverDetails.otherJobsRequest
             *
             * @description
             *
             * Deletes all otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherJobsRequest.destroyAll = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::delete::DriverDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.otherJobsRequest#destroyById
             * @methodOf lbServices.DriverDetails.otherJobsRequest
             *
             * @description
             *
             * Delete a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherJobsRequest.destroyById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::destroyById::DriverDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.otherJobsRequest#findById
             * @methodOf lbServices.DriverDetails.otherJobsRequest
             *
             * @description
             *
             * Find a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.findById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::findById::DriverDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverDetails.otherJobsRequest#updateById
             * @methodOf lbServices.DriverDetails.otherJobsRequest
             *
             * @description
             *
             * Update a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.updateById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::updateById::DriverDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Cities
 * @header lbServices.Cities
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Cities` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Cities",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Cities/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Cities.outstationBookings.findById() instead.
            "prototype$__findById__outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/outstationBookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Cities.outstationBookings.destroyById() instead.
            "prototype$__destroyById__outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/outstationBookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.outstationBookings.updateById() instead.
            "prototype$__updateById__outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/outstationBookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.findById() instead.
            "prototype$__findById__exceptionOutstationCity": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/exceptionOutstationCity/:fk",
              method: "GET",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.destroyById() instead.
            "prototype$__destroyById__exceptionOutstationCity": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/exceptionOutstationCity/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.updateById() instead.
            "prototype$__updateById__exceptionOutstationCity": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/exceptionOutstationCity/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.findById() instead.
            "prototype$__findById__permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/permanentDriverRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.destroyById() instead.
            "prototype$__destroyById__permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/permanentDriverRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.updateById() instead.
            "prototype$__updateById__permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/permanentDriverRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Cities.states() instead.
            "prototype$__get__states": {
              url: urlBase + "/Cities/:id/states",
              method: "GET",
            },

            // INTERNAL. Use Cities.outstationBookings() instead.
            "prototype$__get__outstationBookings": {
              isArray: true,
              url: urlBase + "/Cities/:id/outstationBookings",
              method: "GET",
            },

            // INTERNAL. Use Cities.outstationBookings.create() instead.
            "prototype$__create__outstationBookings": {
              url: urlBase + "/Cities/:id/outstationBookings",
              method: "POST",
            },

            // INTERNAL. Use Cities.outstationBookings.destroyAll() instead.
            "prototype$__delete__outstationBookings": {
              url: urlBase + "/Cities/:id/outstationBookings",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.outstationBookings.count() instead.
            "prototype$__count__outstationBookings": {
              url: urlBase + "/Cities/:id/outstationBookings/count",
              method: "GET",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity() instead.
            "prototype$__get__exceptionOutstationCity": {
              isArray: true,
              url: urlBase + "/Cities/:id/exceptionOutstationCity",
              method: "GET",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.create() instead.
            "prototype$__create__exceptionOutstationCity": {
              url: urlBase + "/Cities/:id/exceptionOutstationCity",
              method: "POST",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.destroyAll() instead.
            "prototype$__delete__exceptionOutstationCity": {
              url: urlBase + "/Cities/:id/exceptionOutstationCity",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.count() instead.
            "prototype$__count__exceptionOutstationCity": {
              url: urlBase + "/Cities/:id/exceptionOutstationCity/count",
              method: "GET",
            },

            // INTERNAL. Use Cities.permanentDriverRequest() instead.
            "prototype$__get__permanentDriverRequest": {
              isArray: true,
              url: urlBase + "/Cities/:id/permanentDriverRequest",
              method: "GET",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.create() instead.
            "prototype$__create__permanentDriverRequest": {
              url: urlBase + "/Cities/:id/permanentDriverRequest",
              method: "POST",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.destroyAll() instead.
            "prototype$__delete__permanentDriverRequest": {
              url: urlBase + "/Cities/:id/permanentDriverRequest",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.count() instead.
            "prototype$__count__permanentDriverRequest": {
              url: urlBase + "/Cities/:id/permanentDriverRequest/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#create
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Cities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#createMany
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Cities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#upsert
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Cities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#exists
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Cities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#findById
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Cities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#find
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Cities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#findOne
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Cities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#updateAll
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Cities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#deleteById
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Cities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#count
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Cities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#prototype$updateAttributes
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Cities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Cities#createChangeStream
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Cities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use OutstationBookings.cities() instead.
            "::get::OutstationBookings::cities": {
              url: urlBase + "/OutstationBookings/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.cities() instead.
            "::get::InvoiceSubHeads::cities": {
              url: urlBase + "/InvoiceSubHeads/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use ExceptionOutstationCity.cities() instead.
            "::get::ExceptionOutstationCity::cities": {
              url: urlBase + "/ExceptionOutstationCities/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use RateCard.cities() instead.
            "::get::RateCard::cities": {
              url: urlBase + "/RateCards/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use PermanentDriverRequest.cities() instead.
            "::get::PermanentDriverRequest::cities": {
              url: urlBase + "/PermanentDriverRequests/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use News.cities() instead.
            "::get::News::cities": {
              url: urlBase + "/News/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use States.cities.findById() instead.
            "::findById::States::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use States.cities.destroyById() instead.
            "::destroyById::States::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use States.cities.updateById() instead.
            "::updateById::States::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use States.cities() instead.
            "::get::States::cities": {
              isArray: true,
              url: urlBase + "/States/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use States.cities.create() instead.
            "::create::States::cities": {
              url: urlBase + "/States/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use States.cities.createMany() instead.
            "::createMany::States::cities": {
              isArray: true,
              url: urlBase + "/States/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use States.cities.destroyAll() instead.
            "::delete::States::cities": {
              url: urlBase + "/States/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use States.cities.count() instead.
            "::count::States::cities": {
              url: urlBase + "/States/:id/cities/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Cities#updateOrCreate
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Cities#update
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Cities#destroyById
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Cities#removeById
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Cities#modelName
        * @propertyOf lbServices.Cities
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Cities`.
        */
        R.modelName = "Cities";

    /**
     * @ngdoc object
     * @name lbServices.Cities.outstationBookings
     * @header lbServices.Cities.outstationBookings
     * @object
     * @description
     *
     * The object `Cities.outstationBookings` groups methods
     * manipulating `OutstationBookings` instances related to `Cities`.
     *
     * Call {@link lbServices.Cities#outstationBookings Cities.outstationBookings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Cities#outstationBookings
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Queries outstationBookings of Cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::get::Cities::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.outstationBookings#count
             * @methodOf lbServices.Cities.outstationBookings
             *
             * @description
             *
             * Counts outstationBookings of Cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.outstationBookings.count = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::count::Cities::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.outstationBookings#create
             * @methodOf lbServices.Cities.outstationBookings
             *
             * @description
             *
             * Creates a new instance in outstationBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings.create = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::create::Cities::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.outstationBookings#createMany
             * @methodOf lbServices.Cities.outstationBookings
             *
             * @description
             *
             * Creates a new instance in outstationBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings.createMany = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::createMany::Cities::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.outstationBookings#destroyAll
             * @methodOf lbServices.Cities.outstationBookings
             *
             * @description
             *
             * Deletes all outstationBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.outstationBookings.destroyAll = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::delete::Cities::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.outstationBookings#destroyById
             * @methodOf lbServices.Cities.outstationBookings
             *
             * @description
             *
             * Delete a related item by id for outstationBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for outstationBookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.outstationBookings.destroyById = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::destroyById::Cities::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.outstationBookings#findById
             * @methodOf lbServices.Cities.outstationBookings
             *
             * @description
             *
             * Find a related item by id for outstationBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for outstationBookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings.findById = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::findById::Cities::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.outstationBookings#updateById
             * @methodOf lbServices.Cities.outstationBookings
             *
             * @description
             *
             * Update a related item by id for outstationBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for outstationBookings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings.updateById = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::updateById::Cities::outstationBookings"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Cities.exceptionOutstationCity
     * @header lbServices.Cities.exceptionOutstationCity
     * @object
     * @description
     *
     * The object `Cities.exceptionOutstationCity` groups methods
     * manipulating `ExceptionOutstationCity` instances related to `Cities`.
     *
     * Call {@link lbServices.Cities#exceptionOutstationCity Cities.exceptionOutstationCity()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Cities#exceptionOutstationCity
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Queries exceptionOutstationCity of Cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             R.exceptionOutstationCity = function() {
              var TargetResource = $injector.get("ExceptionOutstationCity");
              var action = TargetResource["::get::Cities::exceptionOutstationCity"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.exceptionOutstationCity#count
             * @methodOf lbServices.Cities.exceptionOutstationCity
             *
             * @description
             *
             * Counts exceptionOutstationCity of Cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.exceptionOutstationCity.count = function() {
              var TargetResource = $injector.get("ExceptionOutstationCity");
              var action = TargetResource["::count::Cities::exceptionOutstationCity"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.exceptionOutstationCity#create
             * @methodOf lbServices.Cities.exceptionOutstationCity
             *
             * @description
             *
             * Creates a new instance in exceptionOutstationCity of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             R.exceptionOutstationCity.create = function() {
              var TargetResource = $injector.get("ExceptionOutstationCity");
              var action = TargetResource["::create::Cities::exceptionOutstationCity"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.exceptionOutstationCity#createMany
             * @methodOf lbServices.Cities.exceptionOutstationCity
             *
             * @description
             *
             * Creates a new instance in exceptionOutstationCity of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             R.exceptionOutstationCity.createMany = function() {
              var TargetResource = $injector.get("ExceptionOutstationCity");
              var action = TargetResource["::createMany::Cities::exceptionOutstationCity"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.exceptionOutstationCity#destroyAll
             * @methodOf lbServices.Cities.exceptionOutstationCity
             *
             * @description
             *
             * Deletes all exceptionOutstationCity of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.exceptionOutstationCity.destroyAll = function() {
              var TargetResource = $injector.get("ExceptionOutstationCity");
              var action = TargetResource["::delete::Cities::exceptionOutstationCity"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.exceptionOutstationCity#destroyById
             * @methodOf lbServices.Cities.exceptionOutstationCity
             *
             * @description
             *
             * Delete a related item by id for exceptionOutstationCity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exceptionOutstationCity
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.exceptionOutstationCity.destroyById = function() {
              var TargetResource = $injector.get("ExceptionOutstationCity");
              var action = TargetResource["::destroyById::Cities::exceptionOutstationCity"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.exceptionOutstationCity#findById
             * @methodOf lbServices.Cities.exceptionOutstationCity
             *
             * @description
             *
             * Find a related item by id for exceptionOutstationCity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exceptionOutstationCity
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             R.exceptionOutstationCity.findById = function() {
              var TargetResource = $injector.get("ExceptionOutstationCity");
              var action = TargetResource["::findById::Cities::exceptionOutstationCity"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.exceptionOutstationCity#updateById
             * @methodOf lbServices.Cities.exceptionOutstationCity
             *
             * @description
             *
             * Update a related item by id for exceptionOutstationCity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exceptionOutstationCity
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             R.exceptionOutstationCity.updateById = function() {
              var TargetResource = $injector.get("ExceptionOutstationCity");
              var action = TargetResource["::updateById::Cities::exceptionOutstationCity"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Cities.permanentDriverRequest
     * @header lbServices.Cities.permanentDriverRequest
     * @object
     * @description
     *
     * The object `Cities.permanentDriverRequest` groups methods
     * manipulating `PermanentDriverRequest` instances related to `Cities`.
     *
     * Call {@link lbServices.Cities#permanentDriverRequest Cities.permanentDriverRequest()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Cities#permanentDriverRequest
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Queries permanentDriverRequest of Cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::get::Cities::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.permanentDriverRequest#count
             * @methodOf lbServices.Cities.permanentDriverRequest
             *
             * @description
             *
             * Counts permanentDriverRequest of Cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.permanentDriverRequest.count = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::count::Cities::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.permanentDriverRequest#create
             * @methodOf lbServices.Cities.permanentDriverRequest
             *
             * @description
             *
             * Creates a new instance in permanentDriverRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest.create = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::create::Cities::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.permanentDriverRequest#createMany
             * @methodOf lbServices.Cities.permanentDriverRequest
             *
             * @description
             *
             * Creates a new instance in permanentDriverRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest.createMany = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::createMany::Cities::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.permanentDriverRequest#destroyAll
             * @methodOf lbServices.Cities.permanentDriverRequest
             *
             * @description
             *
             * Deletes all permanentDriverRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.permanentDriverRequest.destroyAll = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::delete::Cities::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.permanentDriverRequest#destroyById
             * @methodOf lbServices.Cities.permanentDriverRequest
             *
             * @description
             *
             * Delete a related item by id for permanentDriverRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for permanentDriverRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.permanentDriverRequest.destroyById = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::destroyById::Cities::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.permanentDriverRequest#findById
             * @methodOf lbServices.Cities.permanentDriverRequest
             *
             * @description
             *
             * Find a related item by id for permanentDriverRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for permanentDriverRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest.findById = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::findById::Cities::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities.permanentDriverRequest#updateById
             * @methodOf lbServices.Cities.permanentDriverRequest
             *
             * @description
             *
             * Update a related item by id for permanentDriverRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for permanentDriverRequest
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R.permanentDriverRequest.updateById = function() {
              var TargetResource = $injector.get("PermanentDriverRequest");
              var action = TargetResource["::updateById::Cities::permanentDriverRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Cities#states
             * @methodOf lbServices.Cities
             *
             * @description
             *
             * Fetches belongsTo relation states.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             R.states = function() {
              var TargetResource = $injector.get("States");
              var action = TargetResource["::get::Cities::states"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.CustomerFavouriteAddresses
 * @header lbServices.CustomerFavouriteAddresses
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CustomerFavouriteAddresses` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "CustomerFavouriteAddresses",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/CustomerFavouriteAddresses/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use CustomerFavouriteAddresses.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/CustomerFavouriteAddresses/:id/customerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#create
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/CustomerFavouriteAddresses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#createMany
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/CustomerFavouriteAddresses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#upsert
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/CustomerFavouriteAddresses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#exists
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/CustomerFavouriteAddresses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#findById
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/CustomerFavouriteAddresses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#find
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/CustomerFavouriteAddresses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#findOne
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/CustomerFavouriteAddresses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#updateAll
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/CustomerFavouriteAddresses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#deleteById
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/CustomerFavouriteAddresses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#count
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/CustomerFavouriteAddresses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#prototype$updateAttributes
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/CustomerFavouriteAddresses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#createChangeStream
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/CustomerFavouriteAddresses/change-stream",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.findById() instead.
            "::findById::CustomerDetails::customerFavouriteAddresses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.destroyById() instead.
            "::destroyById::CustomerDetails::customerFavouriteAddresses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.updateById() instead.
            "::updateById::CustomerDetails::customerFavouriteAddresses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses() instead.
            "::get::CustomerDetails::customerFavouriteAddresses": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.create() instead.
            "::create::CustomerDetails::customerFavouriteAddresses": {
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.createMany() instead.
            "::createMany::CustomerDetails::customerFavouriteAddresses": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.destroyAll() instead.
            "::delete::CustomerDetails::customerFavouriteAddresses": {
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.customerFavouriteAddresses.count() instead.
            "::count::CustomerDetails::customerFavouriteAddresses": {
              url: urlBase + "/CustomerDetails/:id/customerFavouriteAddresses/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#updateOrCreate
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerFavouriteAddresses` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#update
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#destroyById
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#removeById
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CustomerFavouriteAddresses#modelName
        * @propertyOf lbServices.CustomerFavouriteAddresses
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CustomerFavouriteAddresses`.
        */
        R.modelName = "CustomerFavouriteAddresses";


            /**
             * @ngdoc method
             * @name lbServices.CustomerFavouriteAddresses#customerDetails
             * @methodOf lbServices.CustomerFavouriteAddresses
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::CustomerFavouriteAddresses::customerDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.PaymentModes
 * @header lbServices.PaymentModes
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PaymentModes` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "PaymentModes",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/PaymentModes/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use PaymentModes.invoices.findById() instead.
            "prototype$__findById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PaymentModes/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use PaymentModes.invoices.destroyById() instead.
            "prototype$__destroyById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PaymentModes/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PaymentModes.invoices.updateById() instead.
            "prototype$__updateById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PaymentModes/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PaymentModes.invoices() instead.
            "prototype$__get__invoices": {
              isArray: true,
              url: urlBase + "/PaymentModes/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use PaymentModes.invoices.create() instead.
            "prototype$__create__invoices": {
              url: urlBase + "/PaymentModes/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use PaymentModes.invoices.destroyAll() instead.
            "prototype$__delete__invoices": {
              url: urlBase + "/PaymentModes/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use PaymentModes.invoices.count() instead.
            "prototype$__count__invoices": {
              url: urlBase + "/PaymentModes/:id/invoices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#create
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PaymentModes` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/PaymentModes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#createMany
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PaymentModes` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/PaymentModes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#upsert
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PaymentModes` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/PaymentModes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#exists
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/PaymentModes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#findById
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PaymentModes` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/PaymentModes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#find
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PaymentModes` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/PaymentModes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#findOne
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PaymentModes` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/PaymentModes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#updateAll
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/PaymentModes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#deleteById
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/PaymentModes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#count
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/PaymentModes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#prototype$updateAttributes
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PaymentModes` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/PaymentModes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#createChangeStream
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/PaymentModes/change-stream",
              method: "POST",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#updateOrCreate
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PaymentModes` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#update
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#destroyById
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#removeById
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.PaymentModes#modelName
        * @propertyOf lbServices.PaymentModes
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PaymentModes`.
        */
        R.modelName = "PaymentModes";

    /**
     * @ngdoc object
     * @name lbServices.PaymentModes.invoices
     * @header lbServices.PaymentModes.invoices
     * @object
     * @description
     *
     * The object `PaymentModes.invoices` groups methods
     * manipulating `Invoices` instances related to `PaymentModes`.
     *
     * Call {@link lbServices.PaymentModes#invoices PaymentModes.invoices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.PaymentModes#invoices
             * @methodOf lbServices.PaymentModes
             *
             * @description
             *
             * Queries invoices of PaymentModes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::get::PaymentModes::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes.invoices#count
             * @methodOf lbServices.PaymentModes.invoices
             *
             * @description
             *
             * Counts invoices of PaymentModes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.invoices.count = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::count::PaymentModes::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes.invoices#create
             * @methodOf lbServices.PaymentModes.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices.create = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::create::PaymentModes::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes.invoices#createMany
             * @methodOf lbServices.PaymentModes.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices.createMany = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::createMany::PaymentModes::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes.invoices#destroyAll
             * @methodOf lbServices.PaymentModes.invoices
             *
             * @description
             *
             * Deletes all invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoices.destroyAll = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::delete::PaymentModes::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes.invoices#destroyById
             * @methodOf lbServices.PaymentModes.invoices
             *
             * @description
             *
             * Delete a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoices.destroyById = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::destroyById::PaymentModes::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes.invoices#findById
             * @methodOf lbServices.PaymentModes.invoices
             *
             * @description
             *
             * Find a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices.findById = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::findById::PaymentModes::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.PaymentModes.invoices#updateById
             * @methodOf lbServices.PaymentModes.invoices
             *
             * @description
             *
             * Update a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices.updateById = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::updateById::PaymentModes::invoices"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.UserDevices
 * @header lbServices.UserDevices
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserDevices` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "UserDevices",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/UserDevices/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use UserDevices.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/UserDevices/:id/conUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#create
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/UserDevices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#createMany
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/UserDevices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#upsert
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/UserDevices",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#exists
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/UserDevices/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#findById
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/UserDevices/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#find
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/UserDevices",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#findOne
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/UserDevices/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#updateAll
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/UserDevices/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#deleteById
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/UserDevices/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#count
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/UserDevices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#prototype$updateAttributes
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/UserDevices/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#createChangeStream
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/UserDevices/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userDevices.findById() instead.
            "::findById::ConUsers::userDevices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userDevices/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userDevices.destroyById() instead.
            "::destroyById::ConUsers::userDevices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userDevices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userDevices.updateById() instead.
            "::updateById::ConUsers::userDevices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userDevices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.userDevices() instead.
            "::get::ConUsers::userDevices": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userDevices",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userDevices.create() instead.
            "::create::ConUsers::userDevices": {
              url: urlBase + "/ConUsers/:id/userDevices",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userDevices.createMany() instead.
            "::createMany::ConUsers::userDevices": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userDevices",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userDevices.destroyAll() instead.
            "::delete::ConUsers::userDevices": {
              url: urlBase + "/ConUsers/:id/userDevices",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userDevices.count() instead.
            "::count::ConUsers::userDevices": {
              url: urlBase + "/ConUsers/:id/userDevices/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.UserDevices#updateOrCreate
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#update
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#destroyById
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserDevices#removeById
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.UserDevices#modelName
        * @propertyOf lbServices.UserDevices
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserDevices`.
        */
        R.modelName = "UserDevices";


            /**
             * @ngdoc method
             * @name lbServices.UserDevices#conUsers
             * @methodOf lbServices.UserDevices
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::UserDevices::conUsers"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.OutstationBookings
 * @header lbServices.OutstationBookings
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `OutstationBookings` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "OutstationBookings",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/OutstationBookings/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use OutstationBookings.cities() instead.
            "prototype$__get__cities": {
              url: urlBase + "/OutstationBookings/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use OutstationBookings.bookings() instead.
            "prototype$__get__bookings": {
              url: urlBase + "/OutstationBookings/:id/bookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#create
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/OutstationBookings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#createMany
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/OutstationBookings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#upsert
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/OutstationBookings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#exists
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/OutstationBookings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#findById
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/OutstationBookings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#find
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/OutstationBookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#findOne
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/OutstationBookings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#updateAll
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/OutstationBookings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#deleteById
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/OutstationBookings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#count
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/OutstationBookings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#prototype$updateAttributes
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/OutstationBookings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#createChangeStream
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/OutstationBookings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Cities.outstationBookings.findById() instead.
            "::findById::Cities::outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/outstationBookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Cities.outstationBookings.destroyById() instead.
            "::destroyById::Cities::outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/outstationBookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.outstationBookings.updateById() instead.
            "::updateById::Cities::outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/outstationBookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Cities.outstationBookings() instead.
            "::get::Cities::outstationBookings": {
              isArray: true,
              url: urlBase + "/Cities/:id/outstationBookings",
              method: "GET",
            },

            // INTERNAL. Use Cities.outstationBookings.create() instead.
            "::create::Cities::outstationBookings": {
              url: urlBase + "/Cities/:id/outstationBookings",
              method: "POST",
            },

            // INTERNAL. Use Cities.outstationBookings.createMany() instead.
            "::createMany::Cities::outstationBookings": {
              isArray: true,
              url: urlBase + "/Cities/:id/outstationBookings",
              method: "POST",
            },

            // INTERNAL. Use Cities.outstationBookings.destroyAll() instead.
            "::delete::Cities::outstationBookings": {
              url: urlBase + "/Cities/:id/outstationBookings",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.outstationBookings.count() instead.
            "::count::Cities::outstationBookings": {
              url: urlBase + "/Cities/:id/outstationBookings/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.outstationBookings.findById() instead.
            "::findById::Bookings::outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/outstationBookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.outstationBookings.destroyById() instead.
            "::destroyById::Bookings::outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/outstationBookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.outstationBookings.updateById() instead.
            "::updateById::Bookings::outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/outstationBookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.outstationBookings() instead.
            "::get::Bookings::outstationBookings": {
              isArray: true,
              url: urlBase + "/Bookings/:id/outstationBookings",
              method: "GET",
            },

            // INTERNAL. Use Bookings.outstationBookings.create() instead.
            "::create::Bookings::outstationBookings": {
              url: urlBase + "/Bookings/:id/outstationBookings",
              method: "POST",
            },

            // INTERNAL. Use Bookings.outstationBookings.createMany() instead.
            "::createMany::Bookings::outstationBookings": {
              isArray: true,
              url: urlBase + "/Bookings/:id/outstationBookings",
              method: "POST",
            },

            // INTERNAL. Use Bookings.outstationBookings.destroyAll() instead.
            "::delete::Bookings::outstationBookings": {
              url: urlBase + "/Bookings/:id/outstationBookings",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.outstationBookings.count() instead.
            "::count::Bookings::outstationBookings": {
              url: urlBase + "/Bookings/:id/outstationBookings/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#updateOrCreate
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#update
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#destroyById
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#removeById
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.OutstationBookings#modelName
        * @propertyOf lbServices.OutstationBookings
        * @description
        * The name of the model represented by this $resource,
        * i.e. `OutstationBookings`.
        */
        R.modelName = "OutstationBookings";


            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#cities
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Fetches belongsTo relation cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::get::OutstationBookings::cities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OutstationBookings#bookings
             * @methodOf lbServices.OutstationBookings
             *
             * @description
             *
             * Fetches belongsTo relation bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::OutstationBookings::bookings"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.LocalBookings
 * @header lbServices.LocalBookings
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LocalBookings` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "LocalBookings",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/LocalBookings/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use LocalBookings.bookings() instead.
            "prototype$__get__bookings": {
              url: urlBase + "/LocalBookings/:id/bookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#create
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/LocalBookings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#createMany
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/LocalBookings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#upsert
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/LocalBookings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#exists
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/LocalBookings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#findById
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/LocalBookings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#find
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/LocalBookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#findOne
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/LocalBookings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#updateAll
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/LocalBookings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#deleteById
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/LocalBookings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#count
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/LocalBookings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#prototype$updateAttributes
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/LocalBookings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#createChangeStream
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/LocalBookings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Bookings.localBookings.findById() instead.
            "::findById::Bookings::localBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/localBookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.localBookings.destroyById() instead.
            "::destroyById::Bookings::localBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/localBookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.localBookings.updateById() instead.
            "::updateById::Bookings::localBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/localBookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.localBookings() instead.
            "::get::Bookings::localBookings": {
              isArray: true,
              url: urlBase + "/Bookings/:id/localBookings",
              method: "GET",
            },

            // INTERNAL. Use Bookings.localBookings.create() instead.
            "::create::Bookings::localBookings": {
              url: urlBase + "/Bookings/:id/localBookings",
              method: "POST",
            },

            // INTERNAL. Use Bookings.localBookings.createMany() instead.
            "::createMany::Bookings::localBookings": {
              isArray: true,
              url: urlBase + "/Bookings/:id/localBookings",
              method: "POST",
            },

            // INTERNAL. Use Bookings.localBookings.destroyAll() instead.
            "::delete::Bookings::localBookings": {
              url: urlBase + "/Bookings/:id/localBookings",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.localBookings.count() instead.
            "::count::Bookings::localBookings": {
              url: urlBase + "/Bookings/:id/localBookings/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#updateOrCreate
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#update
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#destroyById
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#removeById
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LocalBookings#modelName
        * @propertyOf lbServices.LocalBookings
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LocalBookings`.
        */
        R.modelName = "LocalBookings";


            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#bookings
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Fetches belongsTo relation bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::LocalBookings::bookings"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Collections
 * @header lbServices.Collections
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Collections` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Collections",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Collections/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Collections.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/Collections/:id/driverDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#create
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Collections",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#createMany
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Collections",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#upsert
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Collections",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#exists
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Collections/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#findById
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Collections/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#find
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Collections",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#findOne
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Collections/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#updateAll
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Collections/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#deleteById
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Collections/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#count
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Collections/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#prototype$updateAttributes
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Collections/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Collections#createChangeStream
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Collections/change-stream",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.collections.findById() instead.
            "::findById::DriverDetails::collections": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/collections/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.collections.destroyById() instead.
            "::destroyById::DriverDetails::collections": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/collections/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.collections.updateById() instead.
            "::updateById::DriverDetails::collections": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/collections/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.collections() instead.
            "::get::DriverDetails::collections": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/collections",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.collections.create() instead.
            "::create::DriverDetails::collections": {
              url: urlBase + "/DriverDetails/:id/collections",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.collections.createMany() instead.
            "::createMany::DriverDetails::collections": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/collections",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.collections.destroyAll() instead.
            "::delete::DriverDetails::collections": {
              url: urlBase + "/DriverDetails/:id/collections",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.collections.count() instead.
            "::count::DriverDetails::collections": {
              url: urlBase + "/DriverDetails/:id/collections/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Collections#updateOrCreate
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Collections` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Collections#update
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Collections#destroyById
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Collections#removeById
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Collections#modelName
        * @propertyOf lbServices.Collections
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Collections`.
        */
        R.modelName = "Collections";


            /**
             * @ngdoc method
             * @name lbServices.Collections#driverDetails
             * @methodOf lbServices.Collections
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::Collections::driverDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.UserIdentities
 * @header lbServices.UserIdentities
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserIdentities` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "UserIdentities",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/UserIdentities/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use UserIdentities.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/UserIdentities/:id/conUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#create
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/UserIdentities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#createMany
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/UserIdentities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#upsert
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/UserIdentities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#exists
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/UserIdentities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#findById
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/UserIdentities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#find
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/UserIdentities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#findOne
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/UserIdentities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#updateAll
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/UserIdentities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#deleteById
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/UserIdentities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#count
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/UserIdentities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#prototype$updateAttributes
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/UserIdentities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#createChangeStream
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/UserIdentities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userIdentities.findById() instead.
            "::findById::ConUsers::userIdentities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userIdentities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userIdentities.destroyById() instead.
            "::destroyById::ConUsers::userIdentities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userIdentities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userIdentities.updateById() instead.
            "::updateById::ConUsers::userIdentities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userIdentities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.userIdentities() instead.
            "::get::ConUsers::userIdentities": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userIdentities",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userIdentities.create() instead.
            "::create::ConUsers::userIdentities": {
              url: urlBase + "/ConUsers/:id/userIdentities",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userIdentities.createMany() instead.
            "::createMany::ConUsers::userIdentities": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userIdentities",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userIdentities.destroyAll() instead.
            "::delete::ConUsers::userIdentities": {
              url: urlBase + "/ConUsers/:id/userIdentities",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userIdentities.count() instead.
            "::count::ConUsers::userIdentities": {
              url: urlBase + "/ConUsers/:id/userIdentities/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#updateOrCreate
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#update
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#destroyById
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#removeById
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.UserIdentities#modelName
        * @propertyOf lbServices.UserIdentities
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserIdentities`.
        */
        R.modelName = "UserIdentities";


            /**
             * @ngdoc method
             * @name lbServices.UserIdentities#conUsers
             * @methodOf lbServices.UserIdentities
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::UserIdentities::conUsers"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Roles
 * @header lbServices.Roles
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Roles` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Roles",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Roles/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Roles.userRoles.findById() instead.
            "prototype$__findById__userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/userRoles/:fk",
              method: "GET",
            },

            // INTERNAL. Use Roles.userRoles.destroyById() instead.
            "prototype$__destroyById__userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/userRoles/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Roles.userRoles.updateById() instead.
            "prototype$__updateById__userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/userRoles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Roles.userRoles() instead.
            "prototype$__get__userRoles": {
              isArray: true,
              url: urlBase + "/Roles/:id/userRoles",
              method: "GET",
            },

            // INTERNAL. Use Roles.userRoles.create() instead.
            "prototype$__create__userRoles": {
              url: urlBase + "/Roles/:id/userRoles",
              method: "POST",
            },

            // INTERNAL. Use Roles.userRoles.destroyAll() instead.
            "prototype$__delete__userRoles": {
              url: urlBase + "/Roles/:id/userRoles",
              method: "DELETE",
            },

            // INTERNAL. Use Roles.userRoles.count() instead.
            "prototype$__count__userRoles": {
              url: urlBase + "/Roles/:id/userRoles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#create
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#createMany
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#upsert
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Roles",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#exists
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Roles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#findById
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Roles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#find
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#findOne
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Roles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#updateAll
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Roles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#deleteById
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Roles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#count
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#prototype$updateAttributes
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Roles/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Roles#createChangeStream
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Roles/change-stream",
              method: "POST",
            },

            // INTERNAL. Use UserRoles.roles() instead.
            "::get::UserRoles::roles": {
              url: urlBase + "/UserRoles/:id/roles",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Roles#updateOrCreate
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Roles#update
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Roles#destroyById
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Roles#removeById
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Roles#modelName
        * @propertyOf lbServices.Roles
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Roles`.
        */
        R.modelName = "Roles";

    /**
     * @ngdoc object
     * @name lbServices.Roles.userRoles
     * @header lbServices.Roles.userRoles
     * @object
     * @description
     *
     * The object `Roles.userRoles` groups methods
     * manipulating `UserRoles` instances related to `Roles`.
     *
     * Call {@link lbServices.Roles#userRoles Roles.userRoles()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Roles#userRoles
             * @methodOf lbServices.Roles
             *
             * @description
             *
             * Queries userRoles of Roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::get::Roles::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Roles.userRoles#count
             * @methodOf lbServices.Roles.userRoles
             *
             * @description
             *
             * Counts userRoles of Roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.userRoles.count = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::count::Roles::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Roles.userRoles#create
             * @methodOf lbServices.Roles.userRoles
             *
             * @description
             *
             * Creates a new instance in userRoles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles.create = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::create::Roles::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Roles.userRoles#createMany
             * @methodOf lbServices.Roles.userRoles
             *
             * @description
             *
             * Creates a new instance in userRoles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles.createMany = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::createMany::Roles::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Roles.userRoles#destroyAll
             * @methodOf lbServices.Roles.userRoles
             *
             * @description
             *
             * Deletes all userRoles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.userRoles.destroyAll = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::delete::Roles::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Roles.userRoles#destroyById
             * @methodOf lbServices.Roles.userRoles
             *
             * @description
             *
             * Delete a related item by id for userRoles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for userRoles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.userRoles.destroyById = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::destroyById::Roles::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Roles.userRoles#findById
             * @methodOf lbServices.Roles.userRoles
             *
             * @description
             *
             * Find a related item by id for userRoles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for userRoles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles.findById = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::findById::Roles::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Roles.userRoles#updateById
             * @methodOf lbServices.Roles.userRoles
             *
             * @description
             *
             * Update a related item by id for userRoles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for userRoles
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles.updateById = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::updateById::Roles::userRoles"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.AgentDetails
 * @header lbServices.AgentDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AgentDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "AgentDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/AgentDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use AgentDetails.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/AgentDetails/:id/conUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#create
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/AgentDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#createMany
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/AgentDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#upsert
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/AgentDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#exists
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/AgentDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#findById
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/AgentDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#find
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/AgentDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#findOne
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/AgentDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#updateAll
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/AgentDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#deleteById
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/AgentDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#count
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/AgentDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#prototype$updateAttributes
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/AgentDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#createChangeStream
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/AgentDetails/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.agentDetails.findById() instead.
            "::findById::ConUsers::agentDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/agentDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.agentDetails.destroyById() instead.
            "::destroyById::ConUsers::agentDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/agentDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.agentDetails.updateById() instead.
            "::updateById::ConUsers::agentDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/agentDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.agentDetails() instead.
            "::get::ConUsers::agentDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/agentDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.agentDetails.create() instead.
            "::create::ConUsers::agentDetails": {
              url: urlBase + "/ConUsers/:id/agentDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.agentDetails.createMany() instead.
            "::createMany::ConUsers::agentDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/agentDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.agentDetails.destroyAll() instead.
            "::delete::ConUsers::agentDetails": {
              url: urlBase + "/ConUsers/:id/agentDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.agentDetails.count() instead.
            "::count::ConUsers::agentDetails": {
              url: urlBase + "/ConUsers/:id/agentDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#updateOrCreate
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#update
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#destroyById
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#removeById
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AgentDetails#modelName
        * @propertyOf lbServices.AgentDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AgentDetails`.
        */
        R.modelName = "AgentDetails";


            /**
             * @ngdoc method
             * @name lbServices.AgentDetails#conUsers
             * @methodOf lbServices.AgentDetails
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::AgentDetails::conUsers"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.BookingInvites
 * @header lbServices.BookingInvites
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BookingInvites` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "BookingInvites",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/BookingInvites/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use BookingInvites.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/BookingInvites/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use BookingInvites.bookings() instead.
            "prototype$__get__bookings": {
              url: urlBase + "/BookingInvites/:id/bookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#create
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/BookingInvites",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#createMany
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/BookingInvites",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#upsert
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/BookingInvites",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#exists
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/BookingInvites/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#findById
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/BookingInvites/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#find
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/BookingInvites",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#findOne
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/BookingInvites/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#updateAll
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/BookingInvites/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#deleteById
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/BookingInvites/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#count
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/BookingInvites/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#prototype$updateAttributes
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/BookingInvites/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#createChangeStream
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/BookingInvites/change-stream",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.findById() instead.
            "::findById::DriverDetails::bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookingInvites/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.destroyById() instead.
            "::destroyById::DriverDetails::bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookingInvites/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.updateById() instead.
            "::updateById::DriverDetails::bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookingInvites/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.bookingInvites() instead.
            "::get::DriverDetails::bookingInvites": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/bookingInvites",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.create() instead.
            "::create::DriverDetails::bookingInvites": {
              url: urlBase + "/DriverDetails/:id/bookingInvites",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.createMany() instead.
            "::createMany::DriverDetails::bookingInvites": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/bookingInvites",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.destroyAll() instead.
            "::delete::DriverDetails::bookingInvites": {
              url: urlBase + "/DriverDetails/:id/bookingInvites",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.bookingInvites.count() instead.
            "::count::DriverDetails::bookingInvites": {
              url: urlBase + "/DriverDetails/:id/bookingInvites/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingInvites.findById() instead.
            "::findById::Bookings::bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingInvites/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingInvites.destroyById() instead.
            "::destroyById::Bookings::bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingInvites/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingInvites.updateById() instead.
            "::updateById::Bookings::bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingInvites/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.bookingInvites() instead.
            "::get::Bookings::bookingInvites": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingInvites",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingInvites.create() instead.
            "::create::Bookings::bookingInvites": {
              url: urlBase + "/Bookings/:id/bookingInvites",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingInvites.createMany() instead.
            "::createMany::Bookings::bookingInvites": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingInvites",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingInvites.destroyAll() instead.
            "::delete::Bookings::bookingInvites": {
              url: urlBase + "/Bookings/:id/bookingInvites",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingInvites.count() instead.
            "::count::Bookings::bookingInvites": {
              url: urlBase + "/Bookings/:id/bookingInvites/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#updateOrCreate
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#update
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#destroyById
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#removeById
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BookingInvites#modelName
        * @propertyOf lbServices.BookingInvites
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BookingInvites`.
        */
        R.modelName = "BookingInvites";


            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#driverDetails
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::BookingInvites::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingInvites#bookings
             * @methodOf lbServices.BookingInvites
             *
             * @description
             *
             * Fetches belongsTo relation bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::BookingInvites::bookings"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.ConUsers
 * @header lbServices.ConUsers
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ConUsers` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "ConUsers",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/ConUsers/:id",
      { 'id': '@id' },
      {

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#prototype$__findById__accessTokens
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#prototype$__destroyById__accessTokens
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#prototype$__updateById__accessTokens
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.customerDetails.findById() instead.
            "prototype$__findById__customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/customerDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.customerDetails.destroyById() instead.
            "prototype$__destroyById__customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/customerDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.customerDetails.updateById() instead.
            "prototype$__updateById__customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/customerDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.userDevices.findById() instead.
            "prototype$__findById__userDevices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userDevices/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userDevices.destroyById() instead.
            "prototype$__destroyById__userDevices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userDevices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userDevices.updateById() instead.
            "prototype$__updateById__userDevices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userDevices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.userIdentities.findById() instead.
            "prototype$__findById__userIdentities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userIdentities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userIdentities.destroyById() instead.
            "prototype$__destroyById__userIdentities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userIdentities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userIdentities.updateById() instead.
            "prototype$__updateById__userIdentities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userIdentities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.driverDetails.findById() instead.
            "prototype$__findById__driverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/driverDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.driverDetails.destroyById() instead.
            "prototype$__destroyById__driverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/driverDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.driverDetails.updateById() instead.
            "prototype$__updateById__driverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/driverDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.agentDetails.findById() instead.
            "prototype$__findById__agentDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/agentDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.agentDetails.destroyById() instead.
            "prototype$__destroyById__agentDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/agentDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.agentDetails.updateById() instead.
            "prototype$__updateById__agentDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/agentDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.userRoles.findById() instead.
            "prototype$__findById__userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userRoles/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userRoles.destroyById() instead.
            "prototype$__destroyById__userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userRoles/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userRoles.updateById() instead.
            "prototype$__updateById__userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userRoles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.findById() instead.
            "prototype$__findById__company1CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company1CustomerDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.destroyById() instead.
            "prototype$__destroyById__company1CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company1CustomerDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.updateById() instead.
            "prototype$__updateById__company1CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company1CustomerDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.findById() instead.
            "prototype$__findById__company2CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company2CustomerDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.destroyById() instead.
            "prototype$__destroyById__company2CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company2CustomerDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.updateById() instead.
            "prototype$__updateById__company2CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company2CustomerDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.otherUser.findById() instead.
            "prototype$__findById__otherUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/otherUser/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.otherUser.destroyById() instead.
            "prototype$__destroyById__otherUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/otherUser/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.otherUser.updateById() instead.
            "prototype$__updateById__otherUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/otherUser/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#prototype$__get__accessTokens
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries accessTokens of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#prototype$__create__accessTokens
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "prototype$__create__accessTokens": {
              url: urlBase + "/ConUsers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#prototype$__delete__accessTokens
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "prototype$__delete__accessTokens": {
              url: urlBase + "/ConUsers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#prototype$__count__accessTokens
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Counts accessTokens of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "prototype$__count__accessTokens": {
              url: urlBase + "/ConUsers/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.customerDetails() instead.
            "prototype$__get__customerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.customerDetails.create() instead.
            "prototype$__create__customerDetails": {
              url: urlBase + "/ConUsers/:id/customerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.customerDetails.destroyAll() instead.
            "prototype$__delete__customerDetails": {
              url: urlBase + "/ConUsers/:id/customerDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.customerDetails.count() instead.
            "prototype$__count__customerDetails": {
              url: urlBase + "/ConUsers/:id/customerDetails/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userDevices() instead.
            "prototype$__get__userDevices": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userDevices",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userDevices.create() instead.
            "prototype$__create__userDevices": {
              url: urlBase + "/ConUsers/:id/userDevices",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userDevices.destroyAll() instead.
            "prototype$__delete__userDevices": {
              url: urlBase + "/ConUsers/:id/userDevices",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userDevices.count() instead.
            "prototype$__count__userDevices": {
              url: urlBase + "/ConUsers/:id/userDevices/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userIdentities() instead.
            "prototype$__get__userIdentities": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userIdentities",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userIdentities.create() instead.
            "prototype$__create__userIdentities": {
              url: urlBase + "/ConUsers/:id/userIdentities",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userIdentities.destroyAll() instead.
            "prototype$__delete__userIdentities": {
              url: urlBase + "/ConUsers/:id/userIdentities",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userIdentities.count() instead.
            "prototype$__count__userIdentities": {
              url: urlBase + "/ConUsers/:id/userIdentities/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.driverDetails() instead.
            "prototype$__get__driverDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.driverDetails.create() instead.
            "prototype$__create__driverDetails": {
              url: urlBase + "/ConUsers/:id/driverDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.driverDetails.destroyAll() instead.
            "prototype$__delete__driverDetails": {
              url: urlBase + "/ConUsers/:id/driverDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.driverDetails.count() instead.
            "prototype$__count__driverDetails": {
              url: urlBase + "/ConUsers/:id/driverDetails/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.agentDetails() instead.
            "prototype$__get__agentDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/agentDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.agentDetails.create() instead.
            "prototype$__create__agentDetails": {
              url: urlBase + "/ConUsers/:id/agentDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.agentDetails.destroyAll() instead.
            "prototype$__delete__agentDetails": {
              url: urlBase + "/ConUsers/:id/agentDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.agentDetails.count() instead.
            "prototype$__count__agentDetails": {
              url: urlBase + "/ConUsers/:id/agentDetails/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userRoles() instead.
            "prototype$__get__userRoles": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userRoles",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userRoles.create() instead.
            "prototype$__create__userRoles": {
              url: urlBase + "/ConUsers/:id/userRoles",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userRoles.destroyAll() instead.
            "prototype$__delete__userRoles": {
              url: urlBase + "/ConUsers/:id/userRoles",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userRoles.count() instead.
            "prototype$__count__userRoles": {
              url: urlBase + "/ConUsers/:id/userRoles/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails() instead.
            "prototype$__get__company1CustomerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/company1CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.create() instead.
            "prototype$__create__company1CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company1CustomerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.destroyAll() instead.
            "prototype$__delete__company1CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company1CustomerDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.count() instead.
            "prototype$__count__company1CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company1CustomerDetails/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails() instead.
            "prototype$__get__company2CustomerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.create() instead.
            "prototype$__create__company2CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company2CustomerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.destroyAll() instead.
            "prototype$__delete__company2CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company2CustomerDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.count() instead.
            "prototype$__count__company2CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company2CustomerDetails/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.otherUser() instead.
            "prototype$__get__otherUser": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/otherUser",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.otherUser.create() instead.
            "prototype$__create__otherUser": {
              url: urlBase + "/ConUsers/:id/otherUser",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.otherUser.destroyAll() instead.
            "prototype$__delete__otherUser": {
              url: urlBase + "/ConUsers/:id/otherUser",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.otherUser.count() instead.
            "prototype$__count__otherUser": {
              url: urlBase + "/ConUsers/:id/otherUser/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#create
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/ConUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createMany
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/ConUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#upsert
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/ConUsers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#exists
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/ConUsers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#findById
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/ConUsers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#find
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/ConUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#findOne
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/ConUsers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#updateAll
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/ConUsers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#deleteById
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/ConUsers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#count
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/ConUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#prototype$updateAttributes
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/ConUsers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createChangeStream
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/ConUsers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#login
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
             "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                  response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/ConUsers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#logout
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/ConUsers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#confirm
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "confirm": {
              url: urlBase + "/ConUsers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#resetPassword
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "resetPassword": {
              url: urlBase + "/ConUsers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#accountProvider
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `emailId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "accountProvider": {
              url: urlBase + "/ConUsers/accountProvider",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createCustomer
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `firstName` – `{string}` -
             *
             *  - `middleName` – `{string=}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `password` – `{string}` -
             *
             *  - `address` – `{string}` -
             *
             *  - `addressLine2` – `{string=}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `customerType` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createCustomer": {
              url: urlBase + "/ConUsers/createCustomer",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createCustomerEnquiry
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `firstName` – `{string}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `password` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createCustomerEnquiry": {
              url: urlBase + "/ConUsers/createCustomerEnquiry",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createDriver
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `firstName` – `{string}` -
             *
             *  - `middleName` – `{string=}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `address` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `isLuxury` – `{string}` -
             *
             *  - `permanentAddress` – `{string}` -
             *
             *  - `bankName` – `{string=}` -
             *
             *  - `accountNumber` – `{string=}` -
             *
             *  - `ifscCode` – `{string=}` -
             *
             *  - `emergencyNumber` – `{string=}` -
             *
             *  - `pv` – `{boolean=}` -
             *
             *  - `cpv` – `{boolean=}` -
             *
             *  - `trDate` – `{string=}` -
             *
             *  - `ntDate` – `{string=}` -
             *
             *  - `driverBatch` – `{string=}` -
             *
             *  - `freeAddress` – `{string=}` -
             *
             *  - `driverCode` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             *  - `BDate` – `{string}` -
             *
             *  - `Experience` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createDriver": {
              url: urlBase + "/ConUsers/createDriver",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createDriverEnquiry
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `firstName` – `{string}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `password` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createDriverEnquiry": {
              url: urlBase + "/ConUsers/createDriverEnquiry",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createAgentUser
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `firstName` – `{string}` -
             *
             *  - `middleName` – `{string=}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `roleId` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createAgentUser": {
              url: urlBase + "/ConUsers/createAgentUser",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#loginWithFacebook
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `credentials` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "loginWithFacebook": {
              url: urlBase + "/ConUsers/loginWithFacebook",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#loginWithGoogle
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `credentials` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "loginWithGoogle": {
              url: urlBase + "/ConUsers/loginWithGoogle",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#mobileNoDetails
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `mobileNumber` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "mobileNoDetails": {
              url: urlBase + "/ConUsers/mobileNoDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#sendSMS
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `msg` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "sendSMS": {
              url: urlBase + "/ConUsers/sendSMS",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#getRoleAndMobile
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `mobileNumber` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "getRoleAndMobile": {
              url: urlBase + "/ConUsers/getRoleAndMobile",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#inactivateDriver
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `updatedBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "inactivateDriver": {
              url: urlBase + "/ConUsers/inactivateDriver",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#blockDriver
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `updatedBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "blockDriver": {
              url: urlBase + "/ConUsers/blockDriver",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createCustomerForCustomerApp
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `firstName` – `{string}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `username` – `{string}` -
             *
             *  - `password` – `{string}` -
             *
             *  - `otp` – `{string}` -
             *
             *  - `landmark` – `{string}` -
             *
             *  - `addressLat` – `{string}` -
             *
             *  - `addressLong` – `{string}` -
             *
             *  - `address` – `{string}` -
             *
             *  - `userDevice` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createCustomerForCustomerApp": {
              url: urlBase + "/ConUsers/createCustomerForCustomerApp",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createDriverForDriverApp
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `firstName` – `{string}` -
             *
             *  - `middleName` – `{string=}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `username` – `{string}` -
             *
             *  - `password` – `{string}` -
             *
             *  - `isLuxury` – `{string}` -
             *
             *  - `freeAddress` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createDriverForDriverApp": {
              url: urlBase + "/ConUsers/createDriverForDriverApp",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#createDriverForDriverAppNew
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `firstName` – `{string}` -
             *
             *  - `middleName` – `{string=}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `username` – `{string}` -
             *
             *  - `password` – `{string}` -
             *
             *  - `isLuxury` – `{string}` -
             *
             *  - `freeAddress` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             *  - `addressLat` – `{string}` -
             *
             *  - `addressLong` – `{string}` -
             *
             *  - `googleAddress` – `{string}` -
             *
             *  - `otp` – `{string}` -
             *
             *  - `BDate` – `{string}` -
             *
             *  - `licenseIssueDate` – `{string}` -
             *
             *  - `vehicle` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "createDriverForDriverAppNew": {
              url: urlBase + "/ConUsers/createDriverForDriverAppNew",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#validateCustomerMobile
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `mobileNumber` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "validateCustomerMobile": {
              url: urlBase + "/ConUsers/validateCustomerMobile",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#validateDriverMobile
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `mobileNumber` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "validateDriverMobile": {
              url: urlBase + "/ConUsers/validateDriverMobile",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#deleteDriver
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "deleteDriver": {
              url: urlBase + "/ConUsers/deleteDriver",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#deleteCustomer
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "deleteCustomer": {
              url: urlBase + "/ConUsers/deleteCustomer",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#activateDriverFunction
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "activateDriverFunction": {
              url: urlBase + "/ConUsers/activateDriverFunction",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#getDriverDetails
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `address` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "getDriverDetails": {
              url: urlBase + "/ConUsers/getDriverDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#getEnquiryDetail
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `toDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             *  - `type` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             "getEnquiryDetail": {
              url: urlBase + "/ConUsers/getEnquiryDetail",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#block
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `email` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "block": {
              url: urlBase + "/ConUsers/block",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.conUsers() instead.
            "::get::CustomerDetails::conUsers": {
              url: urlBase + "/CustomerDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.conUsers() instead.
            "::get::DriverDetails::conUsers": {
              url: urlBase + "/DriverDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use UserDevices.conUsers() instead.
            "::get::UserDevices::conUsers": {
              url: urlBase + "/UserDevices/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use UserIdentities.conUsers() instead.
            "::get::UserIdentities::conUsers": {
              url: urlBase + "/UserIdentities/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use AgentDetails.conUsers() instead.
            "::get::AgentDetails::conUsers": {
              url: urlBase + "/AgentDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use UserRoles.conUsers() instead.
            "::get::UserRoles::conUsers": {
              url: urlBase + "/UserRoles/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.conUsers() instead.
            "::get::Company1CustomerDetails::conUsers": {
              url: urlBase + "/Company1CustomerDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.conUsers() instead.
            "::get::Company2CustomerDetails::conUsers": {
              url: urlBase + "/Company2CustomerDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use CarOwner.conUsers() instead.
            "::get::CarOwner::conUsers": {
              url: urlBase + "/CarOwners/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use OtherUser.conUsers() instead.
            "::get::OtherUser::conUsers": {
              url: urlBase + "/OtherUsers/:id/conUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#getCurrent
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
             'getCurrent': {
              url: urlBase + "/ConUsers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.ConUsers#updateOrCreate
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#update
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#destroyById
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ConUsers#removeById
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.ConUsers#getCachedCurrent
         * @methodOf lbServices.ConUsers
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.ConUsers#login} or
         * {@link lbServices.ConUsers#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A ConUsers instance.
         */
         R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.ConUsers#isAuthenticated
         * @methodOf lbServices.ConUsers
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
         R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.ConUsers#getCurrentId
         * @methodOf lbServices.ConUsers
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
         R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.ConUsers#modelName
        * @propertyOf lbServices.ConUsers
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ConUsers`.
        */
        R.modelName = "ConUsers";

    /**
     * @ngdoc object
     * @name lbServices.ConUsers.customerDetails
     * @header lbServices.ConUsers.customerDetails
     * @object
     * @description
     *
     * The object `ConUsers.customerDetails` groups methods
     * manipulating `CustomerDetails` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#customerDetails ConUsers.customerDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#customerDetails
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries customerDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::ConUsers::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.customerDetails#count
             * @methodOf lbServices.ConUsers.customerDetails
             *
             * @description
             *
             * Counts customerDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.customerDetails.count = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::count::ConUsers::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.customerDetails#create
             * @methodOf lbServices.ConUsers.customerDetails
             *
             * @description
             *
             * Creates a new instance in customerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails.create = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::create::ConUsers::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.customerDetails#createMany
             * @methodOf lbServices.ConUsers.customerDetails
             *
             * @description
             *
             * Creates a new instance in customerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails.createMany = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::createMany::ConUsers::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.customerDetails#destroyAll
             * @methodOf lbServices.ConUsers.customerDetails
             *
             * @description
             *
             * Deletes all customerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.customerDetails.destroyAll = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::delete::ConUsers::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.customerDetails#destroyById
             * @methodOf lbServices.ConUsers.customerDetails
             *
             * @description
             *
             * Delete a related item by id for customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for customerDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.customerDetails.destroyById = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::destroyById::ConUsers::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.customerDetails#findById
             * @methodOf lbServices.ConUsers.customerDetails
             *
             * @description
             *
             * Find a related item by id for customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for customerDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails.findById = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::findById::ConUsers::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.customerDetails#updateById
             * @methodOf lbServices.ConUsers.customerDetails
             *
             * @description
             *
             * Update a related item by id for customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for customerDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails.updateById = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::updateById::ConUsers::customerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.ConUsers.userDevices
     * @header lbServices.ConUsers.userDevices
     * @object
     * @description
     *
     * The object `ConUsers.userDevices` groups methods
     * manipulating `UserDevices` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#userDevices ConUsers.userDevices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#userDevices
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries userDevices of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             R.userDevices = function() {
              var TargetResource = $injector.get("UserDevices");
              var action = TargetResource["::get::ConUsers::userDevices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userDevices#count
             * @methodOf lbServices.ConUsers.userDevices
             *
             * @description
             *
             * Counts userDevices of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.userDevices.count = function() {
              var TargetResource = $injector.get("UserDevices");
              var action = TargetResource["::count::ConUsers::userDevices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userDevices#create
             * @methodOf lbServices.ConUsers.userDevices
             *
             * @description
             *
             * Creates a new instance in userDevices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             R.userDevices.create = function() {
              var TargetResource = $injector.get("UserDevices");
              var action = TargetResource["::create::ConUsers::userDevices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userDevices#createMany
             * @methodOf lbServices.ConUsers.userDevices
             *
             * @description
             *
             * Creates a new instance in userDevices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             R.userDevices.createMany = function() {
              var TargetResource = $injector.get("UserDevices");
              var action = TargetResource["::createMany::ConUsers::userDevices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userDevices#destroyAll
             * @methodOf lbServices.ConUsers.userDevices
             *
             * @description
             *
             * Deletes all userDevices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.userDevices.destroyAll = function() {
              var TargetResource = $injector.get("UserDevices");
              var action = TargetResource["::delete::ConUsers::userDevices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userDevices#destroyById
             * @methodOf lbServices.ConUsers.userDevices
             *
             * @description
             *
             * Delete a related item by id for userDevices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userDevices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.userDevices.destroyById = function() {
              var TargetResource = $injector.get("UserDevices");
              var action = TargetResource["::destroyById::ConUsers::userDevices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userDevices#findById
             * @methodOf lbServices.ConUsers.userDevices
             *
             * @description
             *
             * Find a related item by id for userDevices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userDevices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             R.userDevices.findById = function() {
              var TargetResource = $injector.get("UserDevices");
              var action = TargetResource["::findById::ConUsers::userDevices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userDevices#updateById
             * @methodOf lbServices.ConUsers.userDevices
             *
             * @description
             *
             * Update a related item by id for userDevices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userDevices
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserDevices` object.)
             * </em>
             */
             R.userDevices.updateById = function() {
              var TargetResource = $injector.get("UserDevices");
              var action = TargetResource["::updateById::ConUsers::userDevices"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.ConUsers.userIdentities
     * @header lbServices.ConUsers.userIdentities
     * @object
     * @description
     *
     * The object `ConUsers.userIdentities` groups methods
     * manipulating `UserIdentities` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#userIdentities ConUsers.userIdentities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#userIdentities
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries userIdentities of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             R.userIdentities = function() {
              var TargetResource = $injector.get("UserIdentities");
              var action = TargetResource["::get::ConUsers::userIdentities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userIdentities#count
             * @methodOf lbServices.ConUsers.userIdentities
             *
             * @description
             *
             * Counts userIdentities of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.userIdentities.count = function() {
              var TargetResource = $injector.get("UserIdentities");
              var action = TargetResource["::count::ConUsers::userIdentities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userIdentities#create
             * @methodOf lbServices.ConUsers.userIdentities
             *
             * @description
             *
             * Creates a new instance in userIdentities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             R.userIdentities.create = function() {
              var TargetResource = $injector.get("UserIdentities");
              var action = TargetResource["::create::ConUsers::userIdentities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userIdentities#createMany
             * @methodOf lbServices.ConUsers.userIdentities
             *
             * @description
             *
             * Creates a new instance in userIdentities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             R.userIdentities.createMany = function() {
              var TargetResource = $injector.get("UserIdentities");
              var action = TargetResource["::createMany::ConUsers::userIdentities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userIdentities#destroyAll
             * @methodOf lbServices.ConUsers.userIdentities
             *
             * @description
             *
             * Deletes all userIdentities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.userIdentities.destroyAll = function() {
              var TargetResource = $injector.get("UserIdentities");
              var action = TargetResource["::delete::ConUsers::userIdentities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userIdentities#destroyById
             * @methodOf lbServices.ConUsers.userIdentities
             *
             * @description
             *
             * Delete a related item by id for userIdentities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userIdentities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.userIdentities.destroyById = function() {
              var TargetResource = $injector.get("UserIdentities");
              var action = TargetResource["::destroyById::ConUsers::userIdentities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userIdentities#findById
             * @methodOf lbServices.ConUsers.userIdentities
             *
             * @description
             *
             * Find a related item by id for userIdentities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userIdentities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             R.userIdentities.findById = function() {
              var TargetResource = $injector.get("UserIdentities");
              var action = TargetResource["::findById::ConUsers::userIdentities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userIdentities#updateById
             * @methodOf lbServices.ConUsers.userIdentities
             *
             * @description
             *
             * Update a related item by id for userIdentities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userIdentities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentities` object.)
             * </em>
             */
             R.userIdentities.updateById = function() {
              var TargetResource = $injector.get("UserIdentities");
              var action = TargetResource["::updateById::ConUsers::userIdentities"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.ConUsers.driverDetails
     * @header lbServices.ConUsers.driverDetails
     * @object
     * @description
     *
     * The object `ConUsers.driverDetails` groups methods
     * manipulating `DriverDetails` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#driverDetails ConUsers.driverDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#driverDetails
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries driverDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::ConUsers::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.driverDetails#count
             * @methodOf lbServices.ConUsers.driverDetails
             *
             * @description
             *
             * Counts driverDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverDetails.count = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::count::ConUsers::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.driverDetails#create
             * @methodOf lbServices.ConUsers.driverDetails
             *
             * @description
             *
             * Creates a new instance in driverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails.create = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::create::ConUsers::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.driverDetails#createMany
             * @methodOf lbServices.ConUsers.driverDetails
             *
             * @description
             *
             * Creates a new instance in driverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails.createMany = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::createMany::ConUsers::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.driverDetails#destroyAll
             * @methodOf lbServices.ConUsers.driverDetails
             *
             * @description
             *
             * Deletes all driverDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverDetails.destroyAll = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::delete::ConUsers::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.driverDetails#destroyById
             * @methodOf lbServices.ConUsers.driverDetails
             *
             * @description
             *
             * Delete a related item by id for driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for driverDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverDetails.destroyById = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::destroyById::ConUsers::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.driverDetails#findById
             * @methodOf lbServices.ConUsers.driverDetails
             *
             * @description
             *
             * Find a related item by id for driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for driverDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails.findById = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::findById::ConUsers::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.driverDetails#updateById
             * @methodOf lbServices.ConUsers.driverDetails
             *
             * @description
             *
             * Update a related item by id for driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for driverDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails.updateById = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::updateById::ConUsers::driverDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.ConUsers.agentDetails
     * @header lbServices.ConUsers.agentDetails
     * @object
     * @description
     *
     * The object `ConUsers.agentDetails` groups methods
     * manipulating `AgentDetails` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#agentDetails ConUsers.agentDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#agentDetails
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries agentDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             R.agentDetails = function() {
              var TargetResource = $injector.get("AgentDetails");
              var action = TargetResource["::get::ConUsers::agentDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.agentDetails#count
             * @methodOf lbServices.ConUsers.agentDetails
             *
             * @description
             *
             * Counts agentDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.agentDetails.count = function() {
              var TargetResource = $injector.get("AgentDetails");
              var action = TargetResource["::count::ConUsers::agentDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.agentDetails#create
             * @methodOf lbServices.ConUsers.agentDetails
             *
             * @description
             *
             * Creates a new instance in agentDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             R.agentDetails.create = function() {
              var TargetResource = $injector.get("AgentDetails");
              var action = TargetResource["::create::ConUsers::agentDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.agentDetails#createMany
             * @methodOf lbServices.ConUsers.agentDetails
             *
             * @description
             *
             * Creates a new instance in agentDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             R.agentDetails.createMany = function() {
              var TargetResource = $injector.get("AgentDetails");
              var action = TargetResource["::createMany::ConUsers::agentDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.agentDetails#destroyAll
             * @methodOf lbServices.ConUsers.agentDetails
             *
             * @description
             *
             * Deletes all agentDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.agentDetails.destroyAll = function() {
              var TargetResource = $injector.get("AgentDetails");
              var action = TargetResource["::delete::ConUsers::agentDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.agentDetails#destroyById
             * @methodOf lbServices.ConUsers.agentDetails
             *
             * @description
             *
             * Delete a related item by id for agentDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for agentDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.agentDetails.destroyById = function() {
              var TargetResource = $injector.get("AgentDetails");
              var action = TargetResource["::destroyById::ConUsers::agentDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.agentDetails#findById
             * @methodOf lbServices.ConUsers.agentDetails
             *
             * @description
             *
             * Find a related item by id for agentDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for agentDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             R.agentDetails.findById = function() {
              var TargetResource = $injector.get("AgentDetails");
              var action = TargetResource["::findById::ConUsers::agentDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.agentDetails#updateById
             * @methodOf lbServices.ConUsers.agentDetails
             *
             * @description
             *
             * Update a related item by id for agentDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for agentDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AgentDetails` object.)
             * </em>
             */
             R.agentDetails.updateById = function() {
              var TargetResource = $injector.get("AgentDetails");
              var action = TargetResource["::updateById::ConUsers::agentDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.ConUsers.userRoles
     * @header lbServices.ConUsers.userRoles
     * @object
     * @description
     *
     * The object `ConUsers.userRoles` groups methods
     * manipulating `UserRoles` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#userRoles ConUsers.userRoles()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#userRoles
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries userRoles of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::get::ConUsers::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userRoles#count
             * @methodOf lbServices.ConUsers.userRoles
             *
             * @description
             *
             * Counts userRoles of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.userRoles.count = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::count::ConUsers::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userRoles#create
             * @methodOf lbServices.ConUsers.userRoles
             *
             * @description
             *
             * Creates a new instance in userRoles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles.create = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::create::ConUsers::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userRoles#createMany
             * @methodOf lbServices.ConUsers.userRoles
             *
             * @description
             *
             * Creates a new instance in userRoles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles.createMany = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::createMany::ConUsers::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userRoles#destroyAll
             * @methodOf lbServices.ConUsers.userRoles
             *
             * @description
             *
             * Deletes all userRoles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.userRoles.destroyAll = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::delete::ConUsers::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userRoles#destroyById
             * @methodOf lbServices.ConUsers.userRoles
             *
             * @description
             *
             * Delete a related item by id for userRoles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userRoles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.userRoles.destroyById = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::destroyById::ConUsers::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userRoles#findById
             * @methodOf lbServices.ConUsers.userRoles
             *
             * @description
             *
             * Find a related item by id for userRoles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userRoles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles.findById = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::findById::ConUsers::userRoles"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.userRoles#updateById
             * @methodOf lbServices.ConUsers.userRoles
             *
             * @description
             *
             * Update a related item by id for userRoles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for userRoles
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R.userRoles.updateById = function() {
              var TargetResource = $injector.get("UserRoles");
              var action = TargetResource["::updateById::ConUsers::userRoles"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.ConUsers.company1CustomerDetails
     * @header lbServices.ConUsers.company1CustomerDetails
     * @object
     * @description
     *
     * The object `ConUsers.company1CustomerDetails` groups methods
     * manipulating `Company1CustomerDetails` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#company1CustomerDetails ConUsers.company1CustomerDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#company1CustomerDetails
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries company1CustomerDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             R.company1CustomerDetails = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::get::ConUsers::company1CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company1CustomerDetails#count
             * @methodOf lbServices.ConUsers.company1CustomerDetails
             *
             * @description
             *
             * Counts company1CustomerDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company1CustomerDetails.count = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::count::ConUsers::company1CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company1CustomerDetails#create
             * @methodOf lbServices.ConUsers.company1CustomerDetails
             *
             * @description
             *
             * Creates a new instance in company1CustomerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             R.company1CustomerDetails.create = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::create::ConUsers::company1CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company1CustomerDetails#createMany
             * @methodOf lbServices.ConUsers.company1CustomerDetails
             *
             * @description
             *
             * Creates a new instance in company1CustomerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             R.company1CustomerDetails.createMany = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::createMany::ConUsers::company1CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company1CustomerDetails#destroyAll
             * @methodOf lbServices.ConUsers.company1CustomerDetails
             *
             * @description
             *
             * Deletes all company1CustomerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1CustomerDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::delete::ConUsers::company1CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company1CustomerDetails#destroyById
             * @methodOf lbServices.ConUsers.company1CustomerDetails
             *
             * @description
             *
             * Delete a related item by id for company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1CustomerDetails.destroyById = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::destroyById::ConUsers::company1CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company1CustomerDetails#findById
             * @methodOf lbServices.ConUsers.company1CustomerDetails
             *
             * @description
             *
             * Find a related item by id for company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             R.company1CustomerDetails.findById = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::findById::ConUsers::company1CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company1CustomerDetails#updateById
             * @methodOf lbServices.ConUsers.company1CustomerDetails
             *
             * @description
             *
             * Update a related item by id for company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             R.company1CustomerDetails.updateById = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::updateById::ConUsers::company1CustomerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.ConUsers.company2CustomerDetails
     * @header lbServices.ConUsers.company2CustomerDetails
     * @object
     * @description
     *
     * The object `ConUsers.company2CustomerDetails` groups methods
     * manipulating `Company2CustomerDetails` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#company2CustomerDetails ConUsers.company2CustomerDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#company2CustomerDetails
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries company2CustomerDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::get::ConUsers::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company2CustomerDetails#count
             * @methodOf lbServices.ConUsers.company2CustomerDetails
             *
             * @description
             *
             * Counts company2CustomerDetails of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2CustomerDetails.count = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::count::ConUsers::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company2CustomerDetails#create
             * @methodOf lbServices.ConUsers.company2CustomerDetails
             *
             * @description
             *
             * Creates a new instance in company2CustomerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails.create = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::create::ConUsers::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company2CustomerDetails#createMany
             * @methodOf lbServices.ConUsers.company2CustomerDetails
             *
             * @description
             *
             * Creates a new instance in company2CustomerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails.createMany = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::createMany::ConUsers::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company2CustomerDetails#destroyAll
             * @methodOf lbServices.ConUsers.company2CustomerDetails
             *
             * @description
             *
             * Deletes all company2CustomerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::delete::ConUsers::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company2CustomerDetails#destroyById
             * @methodOf lbServices.ConUsers.company2CustomerDetails
             *
             * @description
             *
             * Delete a related item by id for company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerDetails.destroyById = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::destroyById::ConUsers::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company2CustomerDetails#findById
             * @methodOf lbServices.ConUsers.company2CustomerDetails
             *
             * @description
             *
             * Find a related item by id for company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails.findById = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::findById::ConUsers::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.company2CustomerDetails#updateById
             * @methodOf lbServices.ConUsers.company2CustomerDetails
             *
             * @description
             *
             * Update a related item by id for company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails.updateById = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::updateById::ConUsers::company2CustomerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.ConUsers.otherUser
     * @header lbServices.ConUsers.otherUser
     * @object
     * @description
     *
     * The object `ConUsers.otherUser` groups methods
     * manipulating `OtherUser` instances related to `ConUsers`.
     *
     * Call {@link lbServices.ConUsers#otherUser ConUsers.otherUser()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ConUsers#otherUser
             * @methodOf lbServices.ConUsers
             *
             * @description
             *
             * Queries otherUser of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             R.otherUser = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::get::ConUsers::otherUser"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.otherUser#count
             * @methodOf lbServices.ConUsers.otherUser
             *
             * @description
             *
             * Counts otherUser of ConUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.otherUser.count = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::count::ConUsers::otherUser"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.otherUser#create
             * @methodOf lbServices.ConUsers.otherUser
             *
             * @description
             *
             * Creates a new instance in otherUser of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             R.otherUser.create = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::create::ConUsers::otherUser"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.otherUser#createMany
             * @methodOf lbServices.ConUsers.otherUser
             *
             * @description
             *
             * Creates a new instance in otherUser of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             R.otherUser.createMany = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::createMany::ConUsers::otherUser"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.otherUser#destroyAll
             * @methodOf lbServices.ConUsers.otherUser
             *
             * @description
             *
             * Deletes all otherUser of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherUser.destroyAll = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::delete::ConUsers::otherUser"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.otherUser#destroyById
             * @methodOf lbServices.ConUsers.otherUser
             *
             * @description
             *
             * Delete a related item by id for otherUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for otherUser
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherUser.destroyById = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::destroyById::ConUsers::otherUser"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.otherUser#findById
             * @methodOf lbServices.ConUsers.otherUser
             *
             * @description
             *
             * Find a related item by id for otherUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for otherUser
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             R.otherUser.findById = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::findById::ConUsers::otherUser"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.ConUsers.otherUser#updateById
             * @methodOf lbServices.ConUsers.otherUser
             *
             * @description
             *
             * Update a related item by id for otherUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for otherUser
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             R.otherUser.updateById = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::updateById::ConUsers::otherUser"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.UserRoles
 * @header lbServices.UserRoles
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserRoles` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "UserRoles",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/UserRoles/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use UserRoles.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/UserRoles/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use UserRoles.roles() instead.
            "prototype$__get__roles": {
              url: urlBase + "/UserRoles/:id/roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#create
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/UserRoles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#createMany
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/UserRoles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#upsert
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/UserRoles",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#exists
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/UserRoles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#findById
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/UserRoles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#find
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/UserRoles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#findOne
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/UserRoles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#updateAll
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/UserRoles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#deleteById
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/UserRoles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#count
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/UserRoles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#prototype$updateAttributes
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/UserRoles/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#createChangeStream
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/UserRoles/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#fetchTiles
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `conUserId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             "fetchTiles": {
              url: urlBase + "/UserRoles/fetchTiles",
              method: "GET",
            },

            // INTERNAL. Use Roles.userRoles.findById() instead.
            "::findById::Roles::userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/userRoles/:fk",
              method: "GET",
            },

            // INTERNAL. Use Roles.userRoles.destroyById() instead.
            "::destroyById::Roles::userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/userRoles/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Roles.userRoles.updateById() instead.
            "::updateById::Roles::userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/userRoles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Roles.userRoles() instead.
            "::get::Roles::userRoles": {
              isArray: true,
              url: urlBase + "/Roles/:id/userRoles",
              method: "GET",
            },

            // INTERNAL. Use Roles.userRoles.create() instead.
            "::create::Roles::userRoles": {
              url: urlBase + "/Roles/:id/userRoles",
              method: "POST",
            },

            // INTERNAL. Use Roles.userRoles.createMany() instead.
            "::createMany::Roles::userRoles": {
              isArray: true,
              url: urlBase + "/Roles/:id/userRoles",
              method: "POST",
            },

            // INTERNAL. Use Roles.userRoles.destroyAll() instead.
            "::delete::Roles::userRoles": {
              url: urlBase + "/Roles/:id/userRoles",
              method: "DELETE",
            },

            // INTERNAL. Use Roles.userRoles.count() instead.
            "::count::Roles::userRoles": {
              url: urlBase + "/Roles/:id/userRoles/count",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userRoles.findById() instead.
            "::findById::ConUsers::userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userRoles/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userRoles.destroyById() instead.
            "::destroyById::ConUsers::userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userRoles/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userRoles.updateById() instead.
            "::updateById::ConUsers::userRoles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/userRoles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.userRoles() instead.
            "::get::ConUsers::userRoles": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userRoles",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.userRoles.create() instead.
            "::create::ConUsers::userRoles": {
              url: urlBase + "/ConUsers/:id/userRoles",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userRoles.createMany() instead.
            "::createMany::ConUsers::userRoles": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/userRoles",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.userRoles.destroyAll() instead.
            "::delete::ConUsers::userRoles": {
              url: urlBase + "/ConUsers/:id/userRoles",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.userRoles.count() instead.
            "::count::ConUsers::userRoles": {
              url: urlBase + "/ConUsers/:id/userRoles/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.UserRoles#updateOrCreate
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRoles` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#update
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#destroyById
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#removeById
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.UserRoles#modelName
        * @propertyOf lbServices.UserRoles
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserRoles`.
        */
        R.modelName = "UserRoles";


            /**
             * @ngdoc method
             * @name lbServices.UserRoles#conUsers
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::UserRoles::conUsers"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.UserRoles#roles
             * @methodOf lbServices.UserRoles
             *
             * @description
             *
             * Fetches belongsTo relation roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Roles` object.)
             * </em>
             */
             R.roles = function() {
              var TargetResource = $injector.get("Roles");
              var action = TargetResource["::get::UserRoles::roles"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Bookings
 * @header lbServices.Bookings
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Bookings` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Bookings",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Bookings/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Bookings.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/Bookings/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use Bookings.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/Bookings/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingInvites.findById() instead.
            "prototype$__findById__bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingInvites/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingInvites.destroyById() instead.
            "prototype$__destroyById__bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingInvites/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingInvites.updateById() instead.
            "prototype$__updateById__bookingInvites": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingInvites/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.cancellationReasons() instead.
            "prototype$__get__cancellationReasons": {
              url: urlBase + "/Bookings/:id/cancellationReasons",
              method: "GET",
            },

            // INTERNAL. Use Bookings.localBookings.findById() instead.
            "prototype$__findById__localBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/localBookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.localBookings.destroyById() instead.
            "prototype$__destroyById__localBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/localBookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.localBookings.updateById() instead.
            "prototype$__updateById__localBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/localBookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.outstationBookings.findById() instead.
            "prototype$__findById__outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/outstationBookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.outstationBookings.destroyById() instead.
            "prototype$__destroyById__outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/outstationBookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.outstationBookings.updateById() instead.
            "prototype$__updateById__outstationBookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/outstationBookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.invoices.findById() instead.
            "prototype$__findById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.invoices.destroyById() instead.
            "prototype$__destroyById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.invoices.updateById() instead.
            "prototype$__updateById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.driverAccountTransactions() instead.
            "prototype$__get__driverAccountTransactions": {
              url: urlBase + "/Bookings/:id/driverAccountTransactions",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingRating.findById() instead.
            "prototype$__findById__bookingRating": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingRating/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingRating.destroyById() instead.
            "prototype$__destroyById__bookingRating": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingRating/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingRating.updateById() instead.
            "prototype$__updateById__bookingRating": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingRating/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.findById() instead.
            "prototype$__findById__driverAllocationReport": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/driverAllocationReport/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.destroyById() instead.
            "prototype$__destroyById__driverAllocationReport": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/driverAllocationReport/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.updateById() instead.
            "prototype$__updateById__driverAllocationReport": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/driverAllocationReport/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.bookingDetails.findById() instead.
            "prototype$__findById__bookingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingDetails.destroyById() instead.
            "prototype$__destroyById__bookingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingDetails.updateById() instead.
            "prototype$__updateById__bookingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.bookingInvites() instead.
            "prototype$__get__bookingInvites": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingInvites",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingInvites.create() instead.
            "prototype$__create__bookingInvites": {
              url: urlBase + "/Bookings/:id/bookingInvites",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingInvites.destroyAll() instead.
            "prototype$__delete__bookingInvites": {
              url: urlBase + "/Bookings/:id/bookingInvites",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingInvites.count() instead.
            "prototype$__count__bookingInvites": {
              url: urlBase + "/Bookings/:id/bookingInvites/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.localBookings() instead.
            "prototype$__get__localBookings": {
              isArray: true,
              url: urlBase + "/Bookings/:id/localBookings",
              method: "GET",
            },

            // INTERNAL. Use Bookings.localBookings.create() instead.
            "prototype$__create__localBookings": {
              url: urlBase + "/Bookings/:id/localBookings",
              method: "POST",
            },

            // INTERNAL. Use Bookings.localBookings.destroyAll() instead.
            "prototype$__delete__localBookings": {
              url: urlBase + "/Bookings/:id/localBookings",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.localBookings.count() instead.
            "prototype$__count__localBookings": {
              url: urlBase + "/Bookings/:id/localBookings/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.outstationBookings() instead.
            "prototype$__get__outstationBookings": {
              isArray: true,
              url: urlBase + "/Bookings/:id/outstationBookings",
              method: "GET",
            },

            // INTERNAL. Use Bookings.outstationBookings.create() instead.
            "prototype$__create__outstationBookings": {
              url: urlBase + "/Bookings/:id/outstationBookings",
              method: "POST",
            },

            // INTERNAL. Use Bookings.outstationBookings.destroyAll() instead.
            "prototype$__delete__outstationBookings": {
              url: urlBase + "/Bookings/:id/outstationBookings",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.outstationBookings.count() instead.
            "prototype$__count__outstationBookings": {
              url: urlBase + "/Bookings/:id/outstationBookings/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.invoices() instead.
            "prototype$__get__invoices": {
              isArray: true,
              url: urlBase + "/Bookings/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use Bookings.invoices.create() instead.
            "prototype$__create__invoices": {
              url: urlBase + "/Bookings/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Bookings.invoices.destroyAll() instead.
            "prototype$__delete__invoices": {
              url: urlBase + "/Bookings/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.invoices.count() instead.
            "prototype$__count__invoices": {
              url: urlBase + "/Bookings/:id/invoices/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingRating() instead.
            "prototype$__get__bookingRating": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingRating",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingRating.create() instead.
            "prototype$__create__bookingRating": {
              url: urlBase + "/Bookings/:id/bookingRating",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingRating.destroyAll() instead.
            "prototype$__delete__bookingRating": {
              url: urlBase + "/Bookings/:id/bookingRating",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingRating.count() instead.
            "prototype$__count__bookingRating": {
              url: urlBase + "/Bookings/:id/bookingRating/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.driverAllocationReport() instead.
            "prototype$__get__driverAllocationReport": {
              isArray: true,
              url: urlBase + "/Bookings/:id/driverAllocationReport",
              method: "GET",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.create() instead.
            "prototype$__create__driverAllocationReport": {
              url: urlBase + "/Bookings/:id/driverAllocationReport",
              method: "POST",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.destroyAll() instead.
            "prototype$__delete__driverAllocationReport": {
              url: urlBase + "/Bookings/:id/driverAllocationReport",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.count() instead.
            "prototype$__count__driverAllocationReport": {
              url: urlBase + "/Bookings/:id/driverAllocationReport/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingDetails() instead.
            "prototype$__get__bookingDetails": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingDetails",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingDetails.create() instead.
            "prototype$__create__bookingDetails": {
              url: urlBase + "/Bookings/:id/bookingDetails",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingDetails.destroyAll() instead.
            "prototype$__delete__bookingDetails": {
              url: urlBase + "/Bookings/:id/bookingDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingDetails.count() instead.
            "prototype$__count__bookingDetails": {
              url: urlBase + "/Bookings/:id/bookingDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#create
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Bookings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#createMany
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Bookings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#upsert
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Bookings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#exists
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Bookings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#findById
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Bookings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#find
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Bookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#findOne
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Bookings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#updateAll
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Bookings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#deleteById
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Bookings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#count
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Bookings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#prototype$updateAttributes
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Bookings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#createChangeStream
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Bookings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getAllDrivers
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `bookingDate` – `{string}` -
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `limit` – `{string}` -
             *
             *  - `start` – `{string}` -
             *
             *  - `radius` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getAllDrivers": {
              url: urlBase + "/Bookings/getAllDrivers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getAllBookings
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getAllBookings": {
              url: urlBase + "/Bookings/getAllBookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getBookings
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getBookings": {
              url: urlBase + "/Bookings/getBookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getInvitedBooking
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getInvitedBooking": {
              url: urlBase + "/Bookings/getInvitedBooking",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#createNewBooking
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `carType` – `{string}` -
             *
             *  - `isRoundTrip` – `{string}` -
             *
             *  - `isOutstation` – `{string}` -
             *
             *  - `reportingDate` – `{string}` -
             *
             *  - `reportingTime` – `{string}` -
             *
             *  - `releivingDate` – `{string}` -
             *
             *  - `releivingTime` – `{string}` -
             *
             *  - `releavingDuration` – `{string}` -
             *
             *  - `landmark` – `{string=}` -
             *
             *  - `pickupAddress` – `{string}` -
             *
             *  - `pickupLat` – `{string}` -
             *
             *  - `pickupLng` – `{string}` -
             *
             *  - `dropAddress` – `{string}` -
             *
             *  - `dropLat` – `{string}` -
             *
             *  - `dropLng` – `{string}` -
             *
             *  - `cityName` – `{string}` -
             *
             *  - `cityLat` – `{string}` -
             *
             *  - `cityLng` – `{string}` -
             *
             *  - `totalAmount` – `{string}` -
             *
             *  - `customerId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `paymentMethod` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             *  - `dutyBasis` – `{string=}` -
             *
             *  - `extraCharges` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "createNewBooking": {
              url: urlBase + "/Bookings/createNewBooking",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#createNewBookingPromocode
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `carType` – `{string}` -
             *
             *  - `isRoundTrip` – `{string}` -
             *
             *  - `isOutstation` – `{string}` -
             *
             *  - `reportingDate` – `{string}` -
             *
             *  - `reportingTime` – `{string}` -
             *
             *  - `releivingDate` – `{string}` -
             *
             *  - `releivingTime` – `{string}` -
             *
             *  - `releavingDuration` – `{string}` -
             *
             *  - `landmark` – `{string=}` -
             *
             *  - `pickupAddress` – `{string}` -
             *
             *  - `pickupLat` – `{string}` -
             *
             *  - `pickupLng` – `{string}` -
             *
             *  - `dropAddress` – `{string}` -
             *
             *  - `dropLat` – `{string}` -
             *
             *  - `dropLng` – `{string}` -
             *
             *  - `cityName` – `{string}` -
             *
             *  - `cityLat` – `{string}` -
             *
             *  - `cityLng` – `{string}` -
             *
             *  - `totalAmount` – `{string}` -
             *
             *  - `customerId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `paymentMethod` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             *  - `promoCode` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "createNewBookingPromocode": {
              url: urlBase + "/Bookings/createNewBookingPromocode",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#newCustomerCreateBooking
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `email` – `{string}` -
             *
             *  - `firstName` – `{string}` -
             *
             *  - `middleName` – `{string=}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `addressLandmark` – `{string=}` -
             *
             *  - `address` – `{string}` -
             *
             *  - `addressLat` – `{string}` -
             *
             *  - `addressLong` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `carType` – `{string}` -
             *
             *  - `isRoundTrip` – `{string}` -
             *
             *  - `isOutstation` – `{string}` -
             *
             *  - `reportingDate` – `{string}` -
             *
             *  - `reportingTime` – `{string}` -
             *
             *  - `releivingDate` – `{string}` -
             *
             *  - `releivingTime` – `{string}` -
             *
             *  - `releavingDuration` – `{string}` -
             *
             *  - `pickupLandmark` – `{string=}` -
             *
             *  - `pickupAddress` – `{string}` -
             *
             *  - `pickupLat` – `{string}` -
             *
             *  - `pickupLng` – `{string}` -
             *
             *  - `dropAddress` – `{string}` -
             *
             *  - `dropLat` – `{string}` -
             *
             *  - `dropLng` – `{string}` -
             *
             *  - `cityName` – `{string}` -
             *
             *  - `cityLat` – `{string}` -
             *
             *  - `cityLng` – `{string}` -
             *
             *  - `totalAmount` – `{string}` -
             *
             *  - `userId1` – `{string}` -
             *
             *  - `paymentMethod` – `{string=}` -
             *
             *  - `remark` – `{string=}` -
             *
             *  - `tripType` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             *  - `dutyBasis` – `{string=}` -
             *
             *  - `extraCharges` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "newCustomerCreateBooking": {
              url: urlBase + "/Bookings/newCustomerCreateBooking",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#createBookingForAdmin
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `carType` – `{string}` -
             *
             *  - `isRoundTrip` – `{string}` -
             *
             *  - `isOutstation` – `{string}` -
             *
             *  - `reportingDate` – `{string}` -
             *
             *  - `reportingTime` – `{string}` -
             *
             *  - `releivingDate` – `{string}` -
             *
             *  - `releivingTime` – `{string}` -
             *
             *  - `releavingDuration` – `{string}` -
             *
             *  - `landmark` – `{string=}` -
             *
             *  - `pickupAddress` – `{string}` -
             *
             *  - `pickupLat` – `{string}` -
             *
             *  - `pickupLng` – `{string}` -
             *
             *  - `dropAddress` – `{string}` -
             *
             *  - `dropLat` – `{string}` -
             *
             *  - `dropLng` – `{string}` -
             *
             *  - `cityName` – `{string}` -
             *
             *  - `cityLat` – `{string}` -
             *
             *  - `cityLng` – `{string}` -
             *
             *  - `totalAmount` – `{string}` -
             *
             *  - `customerId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `paymentMethod` – `{string=}` -
             *
             *  - `remark` – `{string=}` -
             *
             *  - `tripType` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             *  - `dutyBasis` – `{string=}` -
             *
             *  - `extraCharges` – `{string=}` -
             *
             *  - `distance` – `{string=}` -
             * 
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "createBookingForAdmin": {
              url: urlBase + "/Bookings/createBookingForAdmin",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#websiteCustomerCreateBooking
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `email` – `{string}` -
             *
             *  - `firstName` – `{string}` -
             *
             *  - `middleName` – `{string=}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `addressLandmark` – `{string=}` -
             *
             *  - `address` – `{string}` -
             *
             *  - `addressLat` – `{string}` -
             *
             *  - `addressLong` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `carType` – `{string}` -
             *
             *  - `isRoundTrip` – `{string}` -
             *
             *  - `isOutstation` – `{string}` -
             *
             *  - `reportingDate` – `{string}` -
             *
             *  - `reportingTime` – `{string}` -
             *
             *  - `releivingDate` – `{string}` -
             *
             *  - `releivingTime` – `{string}` -
             *
             *  - `releavingDuration` – `{string}` -
             *
             *  - `pickupLandmark` – `{string=}` -
             *
             *  - `pickupAddress` – `{string}` -
             *
             *  - `pickupLat` – `{string}` -
             *
             *  - `pickupLng` – `{string}` -
             *
             *  - `dropAddress` – `{string}` -
             *
             *  - `dropLat` – `{string}` -
             *
             *  - `dropLng` – `{string}` -
             *
             *  - `cityName` – `{string}` -
             *
             *  - `cityLat` – `{string}` -
             *
             *  - `cityLng` – `{string}` -
             *
             *  - `totalAmount` – `{string}` -
             *
             *  - `userId1` – `{string}` -
             *
             *  - `paymentMethod` – `{string=}` -
             *
             *  - `remark` – `{string=}` -
             *
             *  - `tripType` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             *  - `dutyBasis` – `{string=}` -
             *
             *  - `extraCharges` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "websiteCustomerCreateBooking": {
              url: urlBase + "/Bookings/websiteCustomerCreateBooking",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getFavAddress
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `customerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getFavAddress": {
              url: urlBase + "/Bookings/getFavAddress",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverInvites
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverInvites": {
              url: urlBase + "/Bookings/getDriverInvites",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverInvitesTomorrow
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverInvitesTomorrow": {
              url: urlBase + "/Bookings/getDriverInvitesTomorrow",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverDuties
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverDuties": {
              url: urlBase + "/Bookings/getDriverDuties",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#acceptDuty
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `oldDriverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "acceptDuty": {
              url: urlBase + "/Bookings/acceptDuty",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#cancelBooking
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `cancellationId` – `{string}` -
             *
             *  - `cancellationReason` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "cancelBooking": {
              url: urlBase + "/Bookings/cancelBooking",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#cancelBookingForAdmin
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `cancellationId` – `{string}` -
             *
             *  - `cancellationReason` – `{string}` -
             *
             *  - `userId` – `{string}` -
             * 
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "cancelBookingForAdmin": {
              url: urlBase + "/Bookings/cancelBookingForAdmin",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#driverCancelDuty
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `bookingId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "driverCancelDuty": {
              url: urlBase + "/Bookings/driverCancelDuty",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#driverCancelDutyNew
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `bookingId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "driverCancelDutyNew": {
              url: urlBase + "/Bookings/driverCancelDutyNew",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#driverCancelDutyNew1
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "driverCancelDutyNew1": {
              url: urlBase + "/Bookings/driverCancelDutyNew1",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#offDutyForAdmin
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `totalTravelTime` – `{string}` -
             *
             *  - `releivingDate` – `{string}` -
             *
             *  - `releivingTime` – `{string}` -
             *
             *  - `dropLocation` – `{string}` -
             *
             *  - `dropLat` – `{string}` -
             *
             *  - `dropLong` – `{string}` -
             *
             *  - `updatedBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "offDutyForAdmin": {
              url: urlBase + "/Bookings/offDutyForAdmin",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverList
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverList": {
              url: urlBase + "/Bookings/getDriverList",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverList1
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `bookingId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverList1": {
              url: urlBase + "/Bookings/getDriverList1",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverSummary
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverSummary": {
              url: urlBase + "/Bookings/getDriverSummary",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverLocalSummary
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverLocalSummary": {
              url: urlBase + "/Bookings/getDriverLocalSummary",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverOutstationSummary
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverOutstationSummary": {
              url: urlBase + "/Bookings/getDriverOutstationSummary",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#calculateDistance
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `lat1` – `{string}` -
             *
             *  - `long1` – `{string}` -
             *
             *  - `lat2` – `{string}` -
             *
             *  - `long2` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "calculateDistance": {
              url: urlBase + "/Bookings/calculateDistance",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverCurrentDuty
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverCurrentDuty": {
              url: urlBase + "/Bookings/getDriverCurrentDuty",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#startDuty
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `conuserId` – `{string}` -
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `customerId` – `{string}` -
             *
             *  - `pickupAddress` – `{string}` -
             *
             *  - `pickupLat` – `{string}` -
             *
             *  - `pickupLong` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "startDuty": {
              url: urlBase + "/Bookings/startDuty",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#startDutyForAdmin
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `reportingDate` – `{string}` -
             *
             *  - `reportingTime` – `{string}` -
             *
             *  - `updatedBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "startDutyForAdmin": {
              url: urlBase + "/Bookings/startDutyForAdmin",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#offDutyForDriver
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `dropLocation` – `{string}` -
             *
             *  - `dropLat` – `{string}` -
             *
             *  - `dropLong` – `{string}` -
             *
             *  - `updatedBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "offDutyForDriver": {
              url: urlBase + "/Bookings/offDutyForDriver",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getAnalysisData
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `toDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getAnalysisData": {
              url: urlBase + "/Bookings/getAnalysisData",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#calculateDistanceByLatLong
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `lat1` – `{string}` -
             *
             *  - `long1` – `{string}` -
             *
             *  - `lat2` – `{string}` -
             *
             *  - `long2` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "calculateDistanceByLatLong": {
              url: urlBase + "/Bookings/calculateDistanceByLatLong",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverSalaryList
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `bookingId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverSalaryList": {
              url: urlBase + "/Bookings/getDriverSalaryList",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#paidDutyFunction
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `paymentMethod` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "paidDutyFunction": {
              url: urlBase + "/Bookings/paidDutyFunction",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#sendInvoiceEmail
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "sendInvoiceEmail": {
              url: urlBase + "/Bookings/sendInvoiceEmail",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getDriverStatus
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getDriverStatus": {
              url: urlBase + "/Bookings/getDriverStatus",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bookings#getAnalysisDataByUser
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `userId` – `{string}` -
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `toDate` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             "getAnalysisDataByUser": {
              url: urlBase + "/Bookings/getAnalysisDataByUser",
              method: "GET",
            },

            // INTERNAL. Use CancellationReasons.bookings.findById() instead.
            "::findById::CancellationReasons::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CancellationReasons/:id/bookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use CancellationReasons.bookings.destroyById() instead.
            "::destroyById::CancellationReasons::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CancellationReasons/:id/bookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CancellationReasons.bookings.updateById() instead.
            "::updateById::CancellationReasons::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CancellationReasons/:id/bookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CancellationReasons.bookings() instead.
            "::get::CancellationReasons::bookings": {
              isArray: true,
              url: urlBase + "/CancellationReasons/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use CancellationReasons.bookings.create() instead.
            "::create::CancellationReasons::bookings": {
              url: urlBase + "/CancellationReasons/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use CancellationReasons.bookings.createMany() instead.
            "::createMany::CancellationReasons::bookings": {
              isArray: true,
              url: urlBase + "/CancellationReasons/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use CancellationReasons.bookings.destroyAll() instead.
            "::delete::CancellationReasons::bookings": {
              url: urlBase + "/CancellationReasons/:id/bookings",
              method: "DELETE",
            },

            // INTERNAL. Use CancellationReasons.bookings.count() instead.
            "::count::CancellationReasons::bookings": {
              url: urlBase + "/CancellationReasons/:id/bookings/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.bookings.findById() instead.
            "::findById::CustomerDetails::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/bookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.bookings.destroyById() instead.
            "::destroyById::CustomerDetails::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/bookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.bookings.updateById() instead.
            "::updateById::CustomerDetails::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/bookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.bookings() instead.
            "::get::CustomerDetails::bookings": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.bookings.create() instead.
            "::create::CustomerDetails::bookings": {
              url: urlBase + "/CustomerDetails/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.bookings.createMany() instead.
            "::createMany::CustomerDetails::bookings": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.bookings.destroyAll() instead.
            "::delete::CustomerDetails::bookings": {
              url: urlBase + "/CustomerDetails/:id/bookings",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.bookings.count() instead.
            "::count::CustomerDetails::bookings": {
              url: urlBase + "/CustomerDetails/:id/bookings/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookings.findById() instead.
            "::findById::DriverDetails::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookings.destroyById() instead.
            "::destroyById::DriverDetails::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.bookings.updateById() instead.
            "::updateById::DriverDetails::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/bookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.bookings() instead.
            "::get::DriverDetails::bookings": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.bookings.create() instead.
            "::create::DriverDetails::bookings": {
              url: urlBase + "/DriverDetails/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.bookings.createMany() instead.
            "::createMany::DriverDetails::bookings": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.bookings.destroyAll() instead.
            "::delete::DriverDetails::bookings": {
              url: urlBase + "/DriverDetails/:id/bookings",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.bookings.count() instead.
            "::count::DriverDetails::bookings": {
              url: urlBase + "/DriverDetails/:id/bookings/count",
              method: "GET",
            },

            // INTERNAL. Use OutstationBookings.bookings() instead.
            "::get::OutstationBookings::bookings": {
              url: urlBase + "/OutstationBookings/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use LocalBookings.bookings() instead.
            "::get::LocalBookings::bookings": {
              url: urlBase + "/LocalBookings/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use BookingInvites.bookings() instead.
            "::get::BookingInvites::bookings": {
              url: urlBase + "/BookingInvites/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use Invoices.bookings() instead.
            "::get::Invoices::bookings": {
              url: urlBase + "/Invoices/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.findById() instead.
            "::findById::DriverAccountTransactions::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccountTransactions/:id/bookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.destroyById() instead.
            "::destroyById::DriverAccountTransactions::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccountTransactions/:id/bookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.updateById() instead.
            "::updateById::DriverAccountTransactions::bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccountTransactions/:id/bookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings() instead.
            "::get::DriverAccountTransactions::bookings": {
              isArray: true,
              url: urlBase + "/DriverAccountTransactions/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.create() instead.
            "::create::DriverAccountTransactions::bookings": {
              url: urlBase + "/DriverAccountTransactions/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.createMany() instead.
            "::createMany::DriverAccountTransactions::bookings": {
              isArray: true,
              url: urlBase + "/DriverAccountTransactions/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.destroyAll() instead.
            "::delete::DriverAccountTransactions::bookings": {
              url: urlBase + "/DriverAccountTransactions/:id/bookings",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.count() instead.
            "::count::DriverAccountTransactions::bookings": {
              url: urlBase + "/DriverAccountTransactions/:id/bookings/count",
              method: "GET",
            },

            // INTERNAL. Use BookingRating.bookings() instead.
            "::get::BookingRating::bookings": {
              url: urlBase + "/BookingRatings/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use DriverAllocationReport.bookings() instead.
            "::get::DriverAllocationReport::bookings": {
              url: urlBase + "/DriverAllocationReports/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use BookingDetails.bookings() instead.
            "::get::BookingDetails::bookings": {
              url: urlBase + "/BookingDetails/:id/bookings",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Bookings#updateOrCreate
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Bookings#update
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Bookings#destroyById
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Bookings#removeById
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Bookings#modelName
        * @propertyOf lbServices.Bookings
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Bookings`.
        */
        R.modelName = "Bookings";


            /**
             * @ngdoc method
             * @name lbServices.Bookings#customerDetails
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::Bookings::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings#driverDetails
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::Bookings::driverDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Bookings.bookingInvites
     * @header lbServices.Bookings.bookingInvites
     * @object
     * @description
     *
     * The object `Bookings.bookingInvites` groups methods
     * manipulating `BookingInvites` instances related to `Bookings`.
     *
     * Call {@link lbServices.Bookings#bookingInvites Bookings.bookingInvites()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bookings#bookingInvites
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Queries bookingInvites of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::get::Bookings::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingInvites#count
             * @methodOf lbServices.Bookings.bookingInvites
             *
             * @description
             *
             * Counts bookingInvites of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookingInvites.count = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::count::Bookings::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingInvites#create
             * @methodOf lbServices.Bookings.bookingInvites
             *
             * @description
             *
             * Creates a new instance in bookingInvites of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites.create = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::create::Bookings::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingInvites#createMany
             * @methodOf lbServices.Bookings.bookingInvites
             *
             * @description
             *
             * Creates a new instance in bookingInvites of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites.createMany = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::createMany::Bookings::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingInvites#destroyAll
             * @methodOf lbServices.Bookings.bookingInvites
             *
             * @description
             *
             * Deletes all bookingInvites of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingInvites.destroyAll = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::delete::Bookings::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingInvites#destroyById
             * @methodOf lbServices.Bookings.bookingInvites
             *
             * @description
             *
             * Delete a related item by id for bookingInvites.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingInvites
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingInvites.destroyById = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::destroyById::Bookings::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingInvites#findById
             * @methodOf lbServices.Bookings.bookingInvites
             *
             * @description
             *
             * Find a related item by id for bookingInvites.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingInvites
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites.findById = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::findById::Bookings::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingInvites#updateById
             * @methodOf lbServices.Bookings.bookingInvites
             *
             * @description
             *
             * Update a related item by id for bookingInvites.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingInvites
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingInvites` object.)
             * </em>
             */
             R.bookingInvites.updateById = function() {
              var TargetResource = $injector.get("BookingInvites");
              var action = TargetResource["::updateById::Bookings::bookingInvites"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings#cancellationReasons
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Fetches belongsTo relation cancellationReasons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CancellationReasons` object.)
             * </em>
             */
             R.cancellationReasons = function() {
              var TargetResource = $injector.get("CancellationReasons");
              var action = TargetResource["::get::Bookings::cancellationReasons"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Bookings.localBookings
     * @header lbServices.Bookings.localBookings
     * @object
     * @description
     *
     * The object `Bookings.localBookings` groups methods
     * manipulating `LocalBookings` instances related to `Bookings`.
     *
     * Call {@link lbServices.Bookings#localBookings Bookings.localBookings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bookings#localBookings
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Queries localBookings of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             R.localBookings = function() {
              var TargetResource = $injector.get("LocalBookings");
              var action = TargetResource["::get::Bookings::localBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.localBookings#count
             * @methodOf lbServices.Bookings.localBookings
             *
             * @description
             *
             * Counts localBookings of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.localBookings.count = function() {
              var TargetResource = $injector.get("LocalBookings");
              var action = TargetResource["::count::Bookings::localBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.localBookings#create
             * @methodOf lbServices.Bookings.localBookings
             *
             * @description
             *
             * Creates a new instance in localBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             R.localBookings.create = function() {
              var TargetResource = $injector.get("LocalBookings");
              var action = TargetResource["::create::Bookings::localBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.localBookings#createMany
             * @methodOf lbServices.Bookings.localBookings
             *
             * @description
             *
             * Creates a new instance in localBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             R.localBookings.createMany = function() {
              var TargetResource = $injector.get("LocalBookings");
              var action = TargetResource["::createMany::Bookings::localBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.localBookings#destroyAll
             * @methodOf lbServices.Bookings.localBookings
             *
             * @description
             *
             * Deletes all localBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.localBookings.destroyAll = function() {
              var TargetResource = $injector.get("LocalBookings");
              var action = TargetResource["::delete::Bookings::localBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.localBookings#destroyById
             * @methodOf lbServices.Bookings.localBookings
             *
             * @description
             *
             * Delete a related item by id for localBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for localBookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.localBookings.destroyById = function() {
              var TargetResource = $injector.get("LocalBookings");
              var action = TargetResource["::destroyById::Bookings::localBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.localBookings#findById
             * @methodOf lbServices.Bookings.localBookings
             *
             * @description
             *
             * Find a related item by id for localBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for localBookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             R.localBookings.findById = function() {
              var TargetResource = $injector.get("LocalBookings");
              var action = TargetResource["::findById::Bookings::localBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.localBookings#updateById
             * @methodOf lbServices.Bookings.localBookings
             *
             * @description
             *
             * Update a related item by id for localBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for localBookings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBookings` object.)
             * </em>
             */
             R.localBookings.updateById = function() {
              var TargetResource = $injector.get("LocalBookings");
              var action = TargetResource["::updateById::Bookings::localBookings"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Bookings.outstationBookings
     * @header lbServices.Bookings.outstationBookings
     * @object
     * @description
     *
     * The object `Bookings.outstationBookings` groups methods
     * manipulating `OutstationBookings` instances related to `Bookings`.
     *
     * Call {@link lbServices.Bookings#outstationBookings Bookings.outstationBookings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bookings#outstationBookings
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Queries outstationBookings of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::get::Bookings::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.outstationBookings#count
             * @methodOf lbServices.Bookings.outstationBookings
             *
             * @description
             *
             * Counts outstationBookings of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.outstationBookings.count = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::count::Bookings::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.outstationBookings#create
             * @methodOf lbServices.Bookings.outstationBookings
             *
             * @description
             *
             * Creates a new instance in outstationBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings.create = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::create::Bookings::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.outstationBookings#createMany
             * @methodOf lbServices.Bookings.outstationBookings
             *
             * @description
             *
             * Creates a new instance in outstationBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings.createMany = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::createMany::Bookings::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.outstationBookings#destroyAll
             * @methodOf lbServices.Bookings.outstationBookings
             *
             * @description
             *
             * Deletes all outstationBookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.outstationBookings.destroyAll = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::delete::Bookings::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.outstationBookings#destroyById
             * @methodOf lbServices.Bookings.outstationBookings
             *
             * @description
             *
             * Delete a related item by id for outstationBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for outstationBookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.outstationBookings.destroyById = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::destroyById::Bookings::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.outstationBookings#findById
             * @methodOf lbServices.Bookings.outstationBookings
             *
             * @description
             *
             * Find a related item by id for outstationBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for outstationBookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings.findById = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::findById::Bookings::outstationBookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.outstationBookings#updateById
             * @methodOf lbServices.Bookings.outstationBookings
             *
             * @description
             *
             * Update a related item by id for outstationBookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for outstationBookings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OutstationBookings` object.)
             * </em>
             */
             R.outstationBookings.updateById = function() {
              var TargetResource = $injector.get("OutstationBookings");
              var action = TargetResource["::updateById::Bookings::outstationBookings"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Bookings.invoices
     * @header lbServices.Bookings.invoices
     * @object
     * @description
     *
     * The object `Bookings.invoices` groups methods
     * manipulating `Invoices` instances related to `Bookings`.
     *
     * Call {@link lbServices.Bookings#invoices Bookings.invoices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bookings#invoices
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Queries invoices of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::get::Bookings::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.invoices#count
             * @methodOf lbServices.Bookings.invoices
             *
             * @description
             *
             * Counts invoices of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.invoices.count = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::count::Bookings::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.invoices#create
             * @methodOf lbServices.Bookings.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices.create = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::create::Bookings::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.invoices#createMany
             * @methodOf lbServices.Bookings.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices.createMany = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::createMany::Bookings::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.invoices#destroyAll
             * @methodOf lbServices.Bookings.invoices
             *
             * @description
             *
             * Deletes all invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoices.destroyAll = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::delete::Bookings::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.invoices#destroyById
             * @methodOf lbServices.Bookings.invoices
             *
             * @description
             *
             * Delete a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoices.destroyById = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::destroyById::Bookings::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.invoices#findById
             * @methodOf lbServices.Bookings.invoices
             *
             * @description
             *
             * Find a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices.findById = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::findById::Bookings::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.invoices#updateById
             * @methodOf lbServices.Bookings.invoices
             *
             * @description
             *
             * Update a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices.updateById = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::updateById::Bookings::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings#driverAccountTransactions
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Fetches belongsTo relation driverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::get::Bookings::driverAccountTransactions"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Bookings.bookingRating
     * @header lbServices.Bookings.bookingRating
     * @object
     * @description
     *
     * The object `Bookings.bookingRating` groups methods
     * manipulating `BookingRating` instances related to `Bookings`.
     *
     * Call {@link lbServices.Bookings#bookingRating Bookings.bookingRating()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bookings#bookingRating
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Queries bookingRating of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             R.bookingRating = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::get::Bookings::bookingRating"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingRating#count
             * @methodOf lbServices.Bookings.bookingRating
             *
             * @description
             *
             * Counts bookingRating of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookingRating.count = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::count::Bookings::bookingRating"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingRating#create
             * @methodOf lbServices.Bookings.bookingRating
             *
             * @description
             *
             * Creates a new instance in bookingRating of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             R.bookingRating.create = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::create::Bookings::bookingRating"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingRating#createMany
             * @methodOf lbServices.Bookings.bookingRating
             *
             * @description
             *
             * Creates a new instance in bookingRating of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             R.bookingRating.createMany = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::createMany::Bookings::bookingRating"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingRating#destroyAll
             * @methodOf lbServices.Bookings.bookingRating
             *
             * @description
             *
             * Deletes all bookingRating of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingRating.destroyAll = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::delete::Bookings::bookingRating"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingRating#destroyById
             * @methodOf lbServices.Bookings.bookingRating
             *
             * @description
             *
             * Delete a related item by id for bookingRating.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRating
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingRating.destroyById = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::destroyById::Bookings::bookingRating"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingRating#findById
             * @methodOf lbServices.Bookings.bookingRating
             *
             * @description
             *
             * Find a related item by id for bookingRating.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRating
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             R.bookingRating.findById = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::findById::Bookings::bookingRating"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingRating#updateById
             * @methodOf lbServices.Bookings.bookingRating
             *
             * @description
             *
             * Update a related item by id for bookingRating.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRating
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             R.bookingRating.updateById = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::updateById::Bookings::bookingRating"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Bookings.driverAllocationReport
     * @header lbServices.Bookings.driverAllocationReport
     * @object
     * @description
     *
     * The object `Bookings.driverAllocationReport` groups methods
     * manipulating `DriverAllocationReport` instances related to `Bookings`.
     *
     * Call {@link lbServices.Bookings#driverAllocationReport Bookings.driverAllocationReport()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bookings#driverAllocationReport
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Queries driverAllocationReport of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             R.driverAllocationReport = function() {
              var TargetResource = $injector.get("DriverAllocationReport");
              var action = TargetResource["::get::Bookings::driverAllocationReport"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.driverAllocationReport#count
             * @methodOf lbServices.Bookings.driverAllocationReport
             *
             * @description
             *
             * Counts driverAllocationReport of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverAllocationReport.count = function() {
              var TargetResource = $injector.get("DriverAllocationReport");
              var action = TargetResource["::count::Bookings::driverAllocationReport"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.driverAllocationReport#create
             * @methodOf lbServices.Bookings.driverAllocationReport
             *
             * @description
             *
             * Creates a new instance in driverAllocationReport of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             R.driverAllocationReport.create = function() {
              var TargetResource = $injector.get("DriverAllocationReport");
              var action = TargetResource["::create::Bookings::driverAllocationReport"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.driverAllocationReport#createMany
             * @methodOf lbServices.Bookings.driverAllocationReport
             *
             * @description
             *
             * Creates a new instance in driverAllocationReport of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             R.driverAllocationReport.createMany = function() {
              var TargetResource = $injector.get("DriverAllocationReport");
              var action = TargetResource["::createMany::Bookings::driverAllocationReport"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.driverAllocationReport#destroyAll
             * @methodOf lbServices.Bookings.driverAllocationReport
             *
             * @description
             *
             * Deletes all driverAllocationReport of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAllocationReport.destroyAll = function() {
              var TargetResource = $injector.get("DriverAllocationReport");
              var action = TargetResource["::delete::Bookings::driverAllocationReport"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.driverAllocationReport#destroyById
             * @methodOf lbServices.Bookings.driverAllocationReport
             *
             * @description
             *
             * Delete a related item by id for driverAllocationReport.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAllocationReport
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAllocationReport.destroyById = function() {
              var TargetResource = $injector.get("DriverAllocationReport");
              var action = TargetResource["::destroyById::Bookings::driverAllocationReport"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.driverAllocationReport#findById
             * @methodOf lbServices.Bookings.driverAllocationReport
             *
             * @description
             *
             * Find a related item by id for driverAllocationReport.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAllocationReport
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             R.driverAllocationReport.findById = function() {
              var TargetResource = $injector.get("DriverAllocationReport");
              var action = TargetResource["::findById::Bookings::driverAllocationReport"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.driverAllocationReport#updateById
             * @methodOf lbServices.Bookings.driverAllocationReport
             *
             * @description
             *
             * Update a related item by id for driverAllocationReport.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAllocationReport
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             R.driverAllocationReport.updateById = function() {
              var TargetResource = $injector.get("DriverAllocationReport");
              var action = TargetResource["::updateById::Bookings::driverAllocationReport"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Bookings.bookingDetails
     * @header lbServices.Bookings.bookingDetails
     * @object
     * @description
     *
     * The object `Bookings.bookingDetails` groups methods
     * manipulating `BookingDetails` instances related to `Bookings`.
     *
     * Call {@link lbServices.Bookings#bookingDetails Bookings.bookingDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bookings#bookingDetails
             * @methodOf lbServices.Bookings
             *
             * @description
             *
             * Queries bookingDetails of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             R.bookingDetails = function() {
              var TargetResource = $injector.get("BookingDetails");
              var action = TargetResource["::get::Bookings::bookingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingDetails#count
             * @methodOf lbServices.Bookings.bookingDetails
             *
             * @description
             *
             * Counts bookingDetails of Bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookingDetails.count = function() {
              var TargetResource = $injector.get("BookingDetails");
              var action = TargetResource["::count::Bookings::bookingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingDetails#create
             * @methodOf lbServices.Bookings.bookingDetails
             *
             * @description
             *
             * Creates a new instance in bookingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             R.bookingDetails.create = function() {
              var TargetResource = $injector.get("BookingDetails");
              var action = TargetResource["::create::Bookings::bookingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingDetails#createMany
             * @methodOf lbServices.Bookings.bookingDetails
             *
             * @description
             *
             * Creates a new instance in bookingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             R.bookingDetails.createMany = function() {
              var TargetResource = $injector.get("BookingDetails");
              var action = TargetResource["::createMany::Bookings::bookingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingDetails#destroyAll
             * @methodOf lbServices.Bookings.bookingDetails
             *
             * @description
             *
             * Deletes all bookingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingDetails.destroyAll = function() {
              var TargetResource = $injector.get("BookingDetails");
              var action = TargetResource["::delete::Bookings::bookingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingDetails#destroyById
             * @methodOf lbServices.Bookings.bookingDetails
             *
             * @description
             *
             * Delete a related item by id for bookingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingDetails.destroyById = function() {
              var TargetResource = $injector.get("BookingDetails");
              var action = TargetResource["::destroyById::Bookings::bookingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingDetails#findById
             * @methodOf lbServices.Bookings.bookingDetails
             *
             * @description
             *
             * Find a related item by id for bookingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             R.bookingDetails.findById = function() {
              var TargetResource = $injector.get("BookingDetails");
              var action = TargetResource["::findById::Bookings::bookingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Bookings.bookingDetails#updateById
             * @methodOf lbServices.Bookings.bookingDetails
             *
             * @description
             *
             * Update a related item by id for bookingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             R.bookingDetails.updateById = function() {
              var TargetResource = $injector.get("BookingDetails");
              var action = TargetResource["::updateById::Bookings::bookingDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Email
 * @header lbServices.Email
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Email` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Email",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Emails/:id",
      { 'id': '@id' },
      {
      }
      );




        /**
        * @ngdoc property
        * @name lbServices.Email#modelName
        * @propertyOf lbServices.Email
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Email`.
        */
        R.modelName = "Email";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Invoices
 * @header lbServices.Invoices
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Invoices` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Invoices",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Invoices/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Invoices.bookings() instead.
            "prototype$__get__bookings": {
              url: urlBase + "/Invoices/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use Invoices.invoiceDetails.findById() instead.
            "prototype$__findById__invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Invoices/:id/invoiceDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Invoices.invoiceDetails.destroyById() instead.
            "prototype$__destroyById__invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Invoices/:id/invoiceDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Invoices.invoiceDetails.updateById() instead.
            "prototype$__updateById__invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Invoices/:id/invoiceDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Invoices.invoiceDetails() instead.
            "prototype$__get__invoiceDetails": {
              isArray: true,
              url: urlBase + "/Invoices/:id/invoiceDetails",
              method: "GET",
            },

            // INTERNAL. Use Invoices.invoiceDetails.create() instead.
            "prototype$__create__invoiceDetails": {
              url: urlBase + "/Invoices/:id/invoiceDetails",
              method: "POST",
            },

            // INTERNAL. Use Invoices.invoiceDetails.destroyAll() instead.
            "prototype$__delete__invoiceDetails": {
              url: urlBase + "/Invoices/:id/invoiceDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Invoices.invoiceDetails.count() instead.
            "prototype$__count__invoiceDetails": {
              url: urlBase + "/Invoices/:id/invoiceDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#create
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Invoices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#createMany
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Invoices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#upsert
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Invoices",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#exists
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Invoices/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#findById
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Invoices/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#find
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Invoices",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#findOne
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Invoices/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#updateAll
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Invoices/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#deleteById
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Invoices/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#count
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Invoices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#prototype$updateAttributes
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Invoices/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#createChangeStream
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Invoices/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoices#postOnlinePayment
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             "postOnlinePayment": {
              url: urlBase + "/Invoices/postOnlinePayment",
              method: "POST",
            },

            // INTERNAL. Use PaymentModes.invoices.findById() instead.
            "::findById::PaymentModes::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PaymentModes/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use PaymentModes.invoices.destroyById() instead.
            "::destroyById::PaymentModes::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PaymentModes/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PaymentModes.invoices.updateById() instead.
            "::updateById::PaymentModes::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PaymentModes/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PaymentModes.invoices() instead.
            "::get::PaymentModes::invoices": {
              isArray: true,
              url: urlBase + "/PaymentModes/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use PaymentModes.invoices.create() instead.
            "::create::PaymentModes::invoices": {
              url: urlBase + "/PaymentModes/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use PaymentModes.invoices.createMany() instead.
            "::createMany::PaymentModes::invoices": {
              isArray: true,
              url: urlBase + "/PaymentModes/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use PaymentModes.invoices.destroyAll() instead.
            "::delete::PaymentModes::invoices": {
              url: urlBase + "/PaymentModes/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use PaymentModes.invoices.count() instead.
            "::count::PaymentModes::invoices": {
              url: urlBase + "/PaymentModes/:id/invoices/count",
              method: "GET",
            },

            // INTERNAL. Use Bookings.invoices.findById() instead.
            "::findById::Bookings::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.invoices.destroyById() instead.
            "::destroyById::Bookings::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.invoices.updateById() instead.
            "::updateById::Bookings::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.invoices() instead.
            "::get::Bookings::invoices": {
              isArray: true,
              url: urlBase + "/Bookings/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use Bookings.invoices.create() instead.
            "::create::Bookings::invoices": {
              url: urlBase + "/Bookings/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Bookings.invoices.createMany() instead.
            "::createMany::Bookings::invoices": {
              isArray: true,
              url: urlBase + "/Bookings/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Bookings.invoices.destroyAll() instead.
            "::delete::Bookings::invoices": {
              url: urlBase + "/Bookings/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.invoices.count() instead.
            "::count::Bookings::invoices": {
              url: urlBase + "/Bookings/:id/invoices/count",
              method: "GET",
            },

            // INTERNAL. Use InvoiceDetails.invoices() instead.
            "::get::InvoiceDetails::invoices": {
              url: urlBase + "/InvoiceDetails/:id/invoices",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Invoices#updateOrCreate
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Invoices#update
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Invoices#destroyById
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Invoices#removeById
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Invoices#modelName
        * @propertyOf lbServices.Invoices
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Invoices`.
        */
        R.modelName = "Invoices";


            /**
             * @ngdoc method
             * @name lbServices.Invoices#bookings
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Fetches belongsTo relation bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::Invoices::bookings"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Invoices.invoiceDetails
     * @header lbServices.Invoices.invoiceDetails
     * @object
     * @description
     *
     * The object `Invoices.invoiceDetails` groups methods
     * manipulating `InvoiceDetails` instances related to `Invoices`.
     *
     * Call {@link lbServices.Invoices#invoiceDetails Invoices.invoiceDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Invoices#invoiceDetails
             * @methodOf lbServices.Invoices
             *
             * @description
             *
             * Queries invoiceDetails of Invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::get::Invoices::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Invoices.invoiceDetails#count
             * @methodOf lbServices.Invoices.invoiceDetails
             *
             * @description
             *
             * Counts invoiceDetails of Invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.invoiceDetails.count = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::count::Invoices::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Invoices.invoiceDetails#create
             * @methodOf lbServices.Invoices.invoiceDetails
             *
             * @description
             *
             * Creates a new instance in invoiceDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails.create = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::create::Invoices::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Invoices.invoiceDetails#createMany
             * @methodOf lbServices.Invoices.invoiceDetails
             *
             * @description
             *
             * Creates a new instance in invoiceDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails.createMany = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::createMany::Invoices::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Invoices.invoiceDetails#destroyAll
             * @methodOf lbServices.Invoices.invoiceDetails
             *
             * @description
             *
             * Deletes all invoiceDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoiceDetails.destroyAll = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::delete::Invoices::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Invoices.invoiceDetails#destroyById
             * @methodOf lbServices.Invoices.invoiceDetails
             *
             * @description
             *
             * Delete a related item by id for invoiceDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoiceDetails.destroyById = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::destroyById::Invoices::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Invoices.invoiceDetails#findById
             * @methodOf lbServices.Invoices.invoiceDetails
             *
             * @description
             *
             * Find a related item by id for invoiceDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails.findById = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::findById::Invoices::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Invoices.invoiceDetails#updateById
             * @methodOf lbServices.Invoices.invoiceDetails
             *
             * @description
             *
             * Update a related item by id for invoiceDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails.updateById = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::updateById::Invoices::invoiceDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.InvoiceHeads
 * @header lbServices.InvoiceHeads
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InvoiceHeads` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "InvoiceHeads",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/InvoiceHeads/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.findById() instead.
            "prototype$__findById__invoiceSubHeads": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads/:fk",
              method: "GET",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.destroyById() instead.
            "prototype$__destroyById__invoiceSubHeads": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.updateById() instead.
            "prototype$__updateById__invoiceSubHeads": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads/:fk",
              method: "PUT",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads() instead.
            "prototype$__get__invoiceSubHeads": {
              isArray: true,
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads",
              method: "GET",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.create() instead.
            "prototype$__create__invoiceSubHeads": {
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads",
              method: "POST",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.destroyAll() instead.
            "prototype$__delete__invoiceSubHeads": {
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.count() instead.
            "prototype$__count__invoiceSubHeads": {
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#create
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/InvoiceHeads",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#createMany
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/InvoiceHeads",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#upsert
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/InvoiceHeads",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#exists
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/InvoiceHeads/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#findById
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/InvoiceHeads/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#find
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/InvoiceHeads",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#findOne
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/InvoiceHeads/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#updateAll
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/InvoiceHeads/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#deleteById
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/InvoiceHeads/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#count
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/InvoiceHeads/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#prototype$updateAttributes
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/InvoiceHeads/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#createChangeStream
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/InvoiceHeads/change-stream",
              method: "POST",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceHeads() instead.
            "::get::InvoiceSubHeads::invoiceHeads": {
              url: urlBase + "/InvoiceSubHeads/:id/invoiceHeads",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#updateOrCreate
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#update
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#destroyById
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#removeById
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.InvoiceHeads#modelName
        * @propertyOf lbServices.InvoiceHeads
        * @description
        * The name of the model represented by this $resource,
        * i.e. `InvoiceHeads`.
        */
        R.modelName = "InvoiceHeads";

    /**
     * @ngdoc object
     * @name lbServices.InvoiceHeads.invoiceSubHeads
     * @header lbServices.InvoiceHeads.invoiceSubHeads
     * @object
     * @description
     *
     * The object `InvoiceHeads.invoiceSubHeads` groups methods
     * manipulating `InvoiceSubHeads` instances related to `InvoiceHeads`.
     *
     * Call {@link lbServices.InvoiceHeads#invoiceSubHeads InvoiceHeads.invoiceSubHeads()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads#invoiceSubHeads
             * @methodOf lbServices.InvoiceHeads
             *
             * @description
             *
             * Queries invoiceSubHeads of InvoiceHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             R.invoiceSubHeads = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::get::InvoiceHeads::invoiceSubHeads"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads.invoiceSubHeads#count
             * @methodOf lbServices.InvoiceHeads.invoiceSubHeads
             *
             * @description
             *
             * Counts invoiceSubHeads of InvoiceHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.invoiceSubHeads.count = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::count::InvoiceHeads::invoiceSubHeads"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads.invoiceSubHeads#create
             * @methodOf lbServices.InvoiceHeads.invoiceSubHeads
             *
             * @description
             *
             * Creates a new instance in invoiceSubHeads of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             R.invoiceSubHeads.create = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::create::InvoiceHeads::invoiceSubHeads"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads.invoiceSubHeads#createMany
             * @methodOf lbServices.InvoiceHeads.invoiceSubHeads
             *
             * @description
             *
             * Creates a new instance in invoiceSubHeads of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             R.invoiceSubHeads.createMany = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::createMany::InvoiceHeads::invoiceSubHeads"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads.invoiceSubHeads#destroyAll
             * @methodOf lbServices.InvoiceHeads.invoiceSubHeads
             *
             * @description
             *
             * Deletes all invoiceSubHeads of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoiceSubHeads.destroyAll = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::delete::InvoiceHeads::invoiceSubHeads"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads.invoiceSubHeads#destroyById
             * @methodOf lbServices.InvoiceHeads.invoiceSubHeads
             *
             * @description
             *
             * Delete a related item by id for invoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceSubHeads
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoiceSubHeads.destroyById = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::destroyById::InvoiceHeads::invoiceSubHeads"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads.invoiceSubHeads#findById
             * @methodOf lbServices.InvoiceHeads.invoiceSubHeads
             *
             * @description
             *
             * Find a related item by id for invoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceSubHeads
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             R.invoiceSubHeads.findById = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::findById::InvoiceHeads::invoiceSubHeads"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceHeads.invoiceSubHeads#updateById
             * @methodOf lbServices.InvoiceHeads.invoiceSubHeads
             *
             * @description
             *
             * Update a related item by id for invoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceSubHeads
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             R.invoiceSubHeads.updateById = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::updateById::InvoiceHeads::invoiceSubHeads"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.InvoiceDetails
 * @header lbServices.InvoiceDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InvoiceDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "InvoiceDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/InvoiceDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use InvoiceDetails.invoices() instead.
            "prototype$__get__invoices": {
              url: urlBase + "/InvoiceDetails/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use InvoiceDetails.invoiceSubHeads() instead.
            "prototype$__get__invoiceSubHeads": {
              url: urlBase + "/InvoiceDetails/:id/invoiceSubHeads",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#create
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/InvoiceDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#createMany
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/InvoiceDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#upsert
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/InvoiceDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#exists
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/InvoiceDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#findById
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/InvoiceDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#find
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/InvoiceDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#findOne
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/InvoiceDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#updateAll
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/InvoiceDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#deleteById
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/InvoiceDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#count
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/InvoiceDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#prototype$updateAttributes
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/InvoiceDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#createChangeStream
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/InvoiceDetails/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Invoices.invoiceDetails.findById() instead.
            "::findById::Invoices::invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Invoices/:id/invoiceDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Invoices.invoiceDetails.destroyById() instead.
            "::destroyById::Invoices::invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Invoices/:id/invoiceDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Invoices.invoiceDetails.updateById() instead.
            "::updateById::Invoices::invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Invoices/:id/invoiceDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Invoices.invoiceDetails() instead.
            "::get::Invoices::invoiceDetails": {
              isArray: true,
              url: urlBase + "/Invoices/:id/invoiceDetails",
              method: "GET",
            },

            // INTERNAL. Use Invoices.invoiceDetails.create() instead.
            "::create::Invoices::invoiceDetails": {
              url: urlBase + "/Invoices/:id/invoiceDetails",
              method: "POST",
            },

            // INTERNAL. Use Invoices.invoiceDetails.createMany() instead.
            "::createMany::Invoices::invoiceDetails": {
              isArray: true,
              url: urlBase + "/Invoices/:id/invoiceDetails",
              method: "POST",
            },

            // INTERNAL. Use Invoices.invoiceDetails.destroyAll() instead.
            "::delete::Invoices::invoiceDetails": {
              url: urlBase + "/Invoices/:id/invoiceDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Invoices.invoiceDetails.count() instead.
            "::count::Invoices::invoiceDetails": {
              url: urlBase + "/Invoices/:id/invoiceDetails/count",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.findById() instead.
            "::findById::InvoiceSubHeads::invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.destroyById() instead.
            "::destroyById::InvoiceSubHeads::invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.updateById() instead.
            "::updateById::InvoiceSubHeads::invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails() instead.
            "::get::InvoiceSubHeads::invoiceDetails": {
              isArray: true,
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.create() instead.
            "::create::InvoiceSubHeads::invoiceDetails": {
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails",
              method: "POST",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.createMany() instead.
            "::createMany::InvoiceSubHeads::invoiceDetails": {
              isArray: true,
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails",
              method: "POST",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.destroyAll() instead.
            "::delete::InvoiceSubHeads::invoiceDetails": {
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.count() instead.
            "::count::InvoiceSubHeads::invoiceDetails": {
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#updateOrCreate
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#update
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#destroyById
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#removeById
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.InvoiceDetails#modelName
        * @propertyOf lbServices.InvoiceDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `InvoiceDetails`.
        */
        R.modelName = "InvoiceDetails";


            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#invoices
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Fetches belongsTo relation invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoices` object.)
             * </em>
             */
             R.invoices = function() {
              var TargetResource = $injector.get("Invoices");
              var action = TargetResource["::get::InvoiceDetails::invoices"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceDetails#invoiceSubHeads
             * @methodOf lbServices.InvoiceDetails
             *
             * @description
             *
             * Fetches belongsTo relation invoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             R.invoiceSubHeads = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::get::InvoiceDetails::invoiceSubHeads"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.FareMatrix
 * @header lbServices.FareMatrix
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FareMatrix` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "FareMatrix",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/FareMatrices/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use FareMatrix.invoiceSubHeads() instead.
            "prototype$__get__invoiceSubHeads": {
              url: urlBase + "/FareMatrices/:id/invoiceSubHeads",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#create
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/FareMatrices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#createMany
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/FareMatrices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#upsert
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/FareMatrices",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#exists
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/FareMatrices/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#findById
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/FareMatrices/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#find
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/FareMatrices",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#findOne
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/FareMatrices/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#updateAll
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/FareMatrices/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#deleteById
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/FareMatrices/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#count
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/FareMatrices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#prototype$updateAttributes
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/FareMatrices/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#createChangeStream
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/FareMatrices/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#calculateFare
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `carType` – `{string}` -
             *
             *  - `isRoundTrip` – `{string}` -
             *
             *  - `isOutstation` – `{string}` -
             *
             *  - `actualReportingDate` – `{string}` -
             *
             *  - `actualReportingTime` – `{string}` -
             *
             *  - `actualReleivingDate` – `{string}` -
             *
             *  - `actualReleivingTime` – `{string}` -
             *
             *  - `pickupLat` – `{string}` -
             *
             *  - `pickupLng` – `{string}` -
             *
             *  - `dropLat` – `{string}` -
             *
             *  - `dropLng` – `{string}` -
             *
             *  - `operationCityId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             "calculateFare": {
              url: urlBase + "/FareMatrices/calculateFare",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.findById() instead.
            "::findById::InvoiceSubHeads::fareMatrix": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix/:fk",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.destroyById() instead.
            "::destroyById::InvoiceSubHeads::fareMatrix": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.updateById() instead.
            "::updateById::InvoiceSubHeads::fareMatrix": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix/:fk",
              method: "PUT",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix() instead.
            "::get::InvoiceSubHeads::fareMatrix": {
              isArray: true,
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.create() instead.
            "::create::InvoiceSubHeads::fareMatrix": {
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix",
              method: "POST",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.createMany() instead.
            "::createMany::InvoiceSubHeads::fareMatrix": {
              isArray: true,
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix",
              method: "POST",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.destroyAll() instead.
            "::delete::InvoiceSubHeads::fareMatrix": {
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.count() instead.
            "::count::InvoiceSubHeads::fareMatrix": {
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#updateOrCreate
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#update
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#destroyById
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#removeById
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.FareMatrix#modelName
        * @propertyOf lbServices.FareMatrix
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FareMatrix`.
        */
        R.modelName = "FareMatrix";


            /**
             * @ngdoc method
             * @name lbServices.FareMatrix#invoiceSubHeads
             * @methodOf lbServices.FareMatrix
             *
             * @description
             *
             * Fetches belongsTo relation invoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             R.invoiceSubHeads = function() {
              var TargetResource = $injector.get("InvoiceSubHeads");
              var action = TargetResource["::get::FareMatrix::invoiceSubHeads"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.InvoiceSubHeads
 * @header lbServices.InvoiceSubHeads
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InvoiceSubHeads` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "InvoiceSubHeads",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/InvoiceSubHeads/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.findById() instead.
            "prototype$__findById__invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.destroyById() instead.
            "prototype$__destroyById__invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.updateById() instead.
            "prototype$__updateById__invoiceDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceHeads() instead.
            "prototype$__get__invoiceHeads": {
              url: urlBase + "/InvoiceSubHeads/:id/invoiceHeads",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.findById() instead.
            "prototype$__findById__fareMatrix": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix/:fk",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.destroyById() instead.
            "prototype$__destroyById__fareMatrix": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.updateById() instead.
            "prototype$__updateById__fareMatrix": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix/:fk",
              method: "PUT",
            },

            // INTERNAL. Use InvoiceSubHeads.cities() instead.
            "prototype$__get__cities": {
              url: urlBase + "/InvoiceSubHeads/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails() instead.
            "prototype$__get__invoiceDetails": {
              isArray: true,
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.create() instead.
            "prototype$__create__invoiceDetails": {
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails",
              method: "POST",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.destroyAll() instead.
            "prototype$__delete__invoiceDetails": {
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceSubHeads.invoiceDetails.count() instead.
            "prototype$__count__invoiceDetails": {
              url: urlBase + "/InvoiceSubHeads/:id/invoiceDetails/count",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix() instead.
            "prototype$__get__fareMatrix": {
              isArray: true,
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix",
              method: "GET",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.create() instead.
            "prototype$__create__fareMatrix": {
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix",
              method: "POST",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.destroyAll() instead.
            "prototype$__delete__fareMatrix": {
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceSubHeads.fareMatrix.count() instead.
            "prototype$__count__fareMatrix": {
              url: urlBase + "/InvoiceSubHeads/:id/fareMatrix/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#create
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/InvoiceSubHeads",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#createMany
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/InvoiceSubHeads",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#upsert
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/InvoiceSubHeads",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#exists
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/InvoiceSubHeads/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#findById
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/InvoiceSubHeads/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#find
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/InvoiceSubHeads",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#findOne
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/InvoiceSubHeads/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#updateAll
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/InvoiceSubHeads/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#deleteById
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/InvoiceSubHeads/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#count
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/InvoiceSubHeads/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#prototype$updateAttributes
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/InvoiceSubHeads/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#createChangeStream
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/InvoiceSubHeads/change-stream",
              method: "POST",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.findById() instead.
            "::findById::InvoiceHeads::invoiceSubHeads": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads/:fk",
              method: "GET",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.destroyById() instead.
            "::destroyById::InvoiceHeads::invoiceSubHeads": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.updateById() instead.
            "::updateById::InvoiceHeads::invoiceSubHeads": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads/:fk",
              method: "PUT",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads() instead.
            "::get::InvoiceHeads::invoiceSubHeads": {
              isArray: true,
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads",
              method: "GET",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.create() instead.
            "::create::InvoiceHeads::invoiceSubHeads": {
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads",
              method: "POST",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.createMany() instead.
            "::createMany::InvoiceHeads::invoiceSubHeads": {
              isArray: true,
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads",
              method: "POST",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.destroyAll() instead.
            "::delete::InvoiceHeads::invoiceSubHeads": {
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads",
              method: "DELETE",
            },

            // INTERNAL. Use InvoiceHeads.invoiceSubHeads.count() instead.
            "::count::InvoiceHeads::invoiceSubHeads": {
              url: urlBase + "/InvoiceHeads/:id/invoiceSubHeads/count",
              method: "GET",
            },

            // INTERNAL. Use InvoiceDetails.invoiceSubHeads() instead.
            "::get::InvoiceDetails::invoiceSubHeads": {
              url: urlBase + "/InvoiceDetails/:id/invoiceSubHeads",
              method: "GET",
            },

            // INTERNAL. Use FareMatrix.invoiceSubHeads() instead.
            "::get::FareMatrix::invoiceSubHeads": {
              url: urlBase + "/FareMatrices/:id/invoiceSubHeads",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#updateOrCreate
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceSubHeads` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#update
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#destroyById
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#removeById
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.InvoiceSubHeads#modelName
        * @propertyOf lbServices.InvoiceSubHeads
        * @description
        * The name of the model represented by this $resource,
        * i.e. `InvoiceSubHeads`.
        */
        R.modelName = "InvoiceSubHeads";

    /**
     * @ngdoc object
     * @name lbServices.InvoiceSubHeads.invoiceDetails
     * @header lbServices.InvoiceSubHeads.invoiceDetails
     * @object
     * @description
     *
     * The object `InvoiceSubHeads.invoiceDetails` groups methods
     * manipulating `InvoiceDetails` instances related to `InvoiceSubHeads`.
     *
     * Call {@link lbServices.InvoiceSubHeads#invoiceDetails InvoiceSubHeads.invoiceDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#invoiceDetails
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Queries invoiceDetails of InvoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::get::InvoiceSubHeads::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.invoiceDetails#count
             * @methodOf lbServices.InvoiceSubHeads.invoiceDetails
             *
             * @description
             *
             * Counts invoiceDetails of InvoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.invoiceDetails.count = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::count::InvoiceSubHeads::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.invoiceDetails#create
             * @methodOf lbServices.InvoiceSubHeads.invoiceDetails
             *
             * @description
             *
             * Creates a new instance in invoiceDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails.create = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::create::InvoiceSubHeads::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.invoiceDetails#createMany
             * @methodOf lbServices.InvoiceSubHeads.invoiceDetails
             *
             * @description
             *
             * Creates a new instance in invoiceDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails.createMany = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::createMany::InvoiceSubHeads::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.invoiceDetails#destroyAll
             * @methodOf lbServices.InvoiceSubHeads.invoiceDetails
             *
             * @description
             *
             * Deletes all invoiceDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoiceDetails.destroyAll = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::delete::InvoiceSubHeads::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.invoiceDetails#destroyById
             * @methodOf lbServices.InvoiceSubHeads.invoiceDetails
             *
             * @description
             *
             * Delete a related item by id for invoiceDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.invoiceDetails.destroyById = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::destroyById::InvoiceSubHeads::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.invoiceDetails#findById
             * @methodOf lbServices.InvoiceSubHeads.invoiceDetails
             *
             * @description
             *
             * Find a related item by id for invoiceDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails.findById = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::findById::InvoiceSubHeads::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.invoiceDetails#updateById
             * @methodOf lbServices.InvoiceSubHeads.invoiceDetails
             *
             * @description
             *
             * Update a related item by id for invoiceDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for invoiceDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceDetails` object.)
             * </em>
             */
             R.invoiceDetails.updateById = function() {
              var TargetResource = $injector.get("InvoiceDetails");
              var action = TargetResource["::updateById::InvoiceSubHeads::invoiceDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#invoiceHeads
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Fetches belongsTo relation invoiceHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvoiceHeads` object.)
             * </em>
             */
             R.invoiceHeads = function() {
              var TargetResource = $injector.get("InvoiceHeads");
              var action = TargetResource["::get::InvoiceSubHeads::invoiceHeads"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.InvoiceSubHeads.fareMatrix
     * @header lbServices.InvoiceSubHeads.fareMatrix
     * @object
     * @description
     *
     * The object `InvoiceSubHeads.fareMatrix` groups methods
     * manipulating `FareMatrix` instances related to `InvoiceSubHeads`.
     *
     * Call {@link lbServices.InvoiceSubHeads#fareMatrix InvoiceSubHeads.fareMatrix()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#fareMatrix
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Queries fareMatrix of InvoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             R.fareMatrix = function() {
              var TargetResource = $injector.get("FareMatrix");
              var action = TargetResource["::get::InvoiceSubHeads::fareMatrix"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.fareMatrix#count
             * @methodOf lbServices.InvoiceSubHeads.fareMatrix
             *
             * @description
             *
             * Counts fareMatrix of InvoiceSubHeads.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.fareMatrix.count = function() {
              var TargetResource = $injector.get("FareMatrix");
              var action = TargetResource["::count::InvoiceSubHeads::fareMatrix"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.fareMatrix#create
             * @methodOf lbServices.InvoiceSubHeads.fareMatrix
             *
             * @description
             *
             * Creates a new instance in fareMatrix of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             R.fareMatrix.create = function() {
              var TargetResource = $injector.get("FareMatrix");
              var action = TargetResource["::create::InvoiceSubHeads::fareMatrix"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.fareMatrix#createMany
             * @methodOf lbServices.InvoiceSubHeads.fareMatrix
             *
             * @description
             *
             * Creates a new instance in fareMatrix of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             R.fareMatrix.createMany = function() {
              var TargetResource = $injector.get("FareMatrix");
              var action = TargetResource["::createMany::InvoiceSubHeads::fareMatrix"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.fareMatrix#destroyAll
             * @methodOf lbServices.InvoiceSubHeads.fareMatrix
             *
             * @description
             *
             * Deletes all fareMatrix of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.fareMatrix.destroyAll = function() {
              var TargetResource = $injector.get("FareMatrix");
              var action = TargetResource["::delete::InvoiceSubHeads::fareMatrix"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.fareMatrix#destroyById
             * @methodOf lbServices.InvoiceSubHeads.fareMatrix
             *
             * @description
             *
             * Delete a related item by id for fareMatrix.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fareMatrix
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.fareMatrix.destroyById = function() {
              var TargetResource = $injector.get("FareMatrix");
              var action = TargetResource["::destroyById::InvoiceSubHeads::fareMatrix"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.fareMatrix#findById
             * @methodOf lbServices.InvoiceSubHeads.fareMatrix
             *
             * @description
             *
             * Find a related item by id for fareMatrix.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fareMatrix
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             R.fareMatrix.findById = function() {
              var TargetResource = $injector.get("FareMatrix");
              var action = TargetResource["::findById::InvoiceSubHeads::fareMatrix"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads.fareMatrix#updateById
             * @methodOf lbServices.InvoiceSubHeads.fareMatrix
             *
             * @description
             *
             * Update a related item by id for fareMatrix.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fareMatrix
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FareMatrix` object.)
             * </em>
             */
             R.fareMatrix.updateById = function() {
              var TargetResource = $injector.get("FareMatrix");
              var action = TargetResource["::updateById::InvoiceSubHeads::fareMatrix"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.InvoiceSubHeads#cities
             * @methodOf lbServices.InvoiceSubHeads
             *
             * @description
             *
             * Fetches belongsTo relation cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::get::InvoiceSubHeads::cities"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.DriverPaymentCycles
 * @header lbServices.DriverPaymentCycles
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverPaymentCycles` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverPaymentCycles",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverPaymentCycles/:id",
      { 'id': '@id' },
      {

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#create
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverPaymentCycles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#createMany
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverPaymentCycles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#upsert
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverPaymentCycles",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#exists
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverPaymentCycles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#findById
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverPaymentCycles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#find
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverPaymentCycles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#findOne
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverPaymentCycles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#updateAll
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverPaymentCycles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#deleteById
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverPaymentCycles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#count
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverPaymentCycles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#prototype$updateAttributes
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverPaymentCycles/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#createChangeStream
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverPaymentCycles/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#generatePaymentCycle
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `paymentCycleId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `driverShare` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `createdDate` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "generatePaymentCycle": {
              url: urlBase + "/DriverPaymentCycles/generatePaymentCycle",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#paymentConfirmation
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `paymentCycleId` – `{string}` -
             *
             *  - `driverId` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             "paymentConfirmation": {
              url: urlBase + "/DriverPaymentCycles/paymentConfirmation",
              method: "POST",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#updateOrCreate
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycles` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#update
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#destroyById
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycles#removeById
             * @methodOf lbServices.DriverPaymentCycles
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverPaymentCycles#modelName
        * @propertyOf lbServices.DriverPaymentCycles
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverPaymentCycles`.
        */
        R.modelName = "DriverPaymentCycles";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.DriverPaymentCycleDetails
 * @header lbServices.DriverPaymentCycleDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverPaymentCycleDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverPaymentCycleDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverPaymentCycleDetails/:id",
      { 'id': '@id' },
      {

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#create
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycleDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverPaymentCycleDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#createMany
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycleDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverPaymentCycleDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#upsert
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycleDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverPaymentCycleDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#exists
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverPaymentCycleDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#findById
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycleDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverPaymentCycleDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#find
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycleDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverPaymentCycleDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#findOne
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycleDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverPaymentCycleDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#updateAll
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverPaymentCycleDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#deleteById
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverPaymentCycleDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#count
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverPaymentCycleDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#prototype$updateAttributes
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycleDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverPaymentCycleDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#createChangeStream
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverPaymentCycleDetails/change-stream",
              method: "POST",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#updateOrCreate
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverPaymentCycleDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#update
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#destroyById
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverPaymentCycleDetails#removeById
             * @methodOf lbServices.DriverPaymentCycleDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverPaymentCycleDetails#modelName
        * @propertyOf lbServices.DriverPaymentCycleDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverPaymentCycleDetails`.
        */
        R.modelName = "DriverPaymentCycleDetails";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BookingPaymentTransaction
 * @header lbServices.BookingPaymentTransaction
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BookingPaymentTransaction` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "BookingPaymentTransaction",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/BookingPaymentTransactions/:id",
      { 'id': '@id' },
      {

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#create
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingPaymentTransaction` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/BookingPaymentTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#createMany
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingPaymentTransaction` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/BookingPaymentTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#upsert
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingPaymentTransaction` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/BookingPaymentTransactions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#exists
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/BookingPaymentTransactions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#findById
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingPaymentTransaction` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/BookingPaymentTransactions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#find
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingPaymentTransaction` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/BookingPaymentTransactions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#findOne
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingPaymentTransaction` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/BookingPaymentTransactions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#updateAll
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/BookingPaymentTransactions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#deleteById
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/BookingPaymentTransactions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#count
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/BookingPaymentTransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#prototype$updateAttributes
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingPaymentTransaction` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/BookingPaymentTransactions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#createChangeStream
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/BookingPaymentTransactions/change-stream",
              method: "POST",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#updateOrCreate
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingPaymentTransaction` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#update
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#destroyById
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BookingPaymentTransaction#removeById
             * @methodOf lbServices.BookingPaymentTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BookingPaymentTransaction#modelName
        * @propertyOf lbServices.BookingPaymentTransaction
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BookingPaymentTransaction`.
        */
        R.modelName = "BookingPaymentTransaction";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ExceptionOutstationCity
 * @header lbServices.ExceptionOutstationCity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ExceptionOutstationCity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "ExceptionOutstationCity",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/ExceptionOutstationCities/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use ExceptionOutstationCity.cities() instead.
            "prototype$__get__cities": {
              url: urlBase + "/ExceptionOutstationCities/:id/cities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#create
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/ExceptionOutstationCities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#createMany
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/ExceptionOutstationCities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#upsert
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/ExceptionOutstationCities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#exists
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/ExceptionOutstationCities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#findById
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/ExceptionOutstationCities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#find
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/ExceptionOutstationCities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#findOne
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/ExceptionOutstationCities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#updateAll
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/ExceptionOutstationCities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#deleteById
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/ExceptionOutstationCities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#count
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/ExceptionOutstationCities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#prototype$updateAttributes
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/ExceptionOutstationCities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#createChangeStream
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/ExceptionOutstationCities/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#fetchExceptionCity
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `city` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             "fetchExceptionCity": {
              url: urlBase + "/ExceptionOutstationCities/fetchExceptionCity",
              method: "GET",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.findById() instead.
            "::findById::Cities::exceptionOutstationCity": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/exceptionOutstationCity/:fk",
              method: "GET",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.destroyById() instead.
            "::destroyById::Cities::exceptionOutstationCity": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/exceptionOutstationCity/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.updateById() instead.
            "::updateById::Cities::exceptionOutstationCity": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/exceptionOutstationCity/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity() instead.
            "::get::Cities::exceptionOutstationCity": {
              isArray: true,
              url: urlBase + "/Cities/:id/exceptionOutstationCity",
              method: "GET",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.create() instead.
            "::create::Cities::exceptionOutstationCity": {
              url: urlBase + "/Cities/:id/exceptionOutstationCity",
              method: "POST",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.createMany() instead.
            "::createMany::Cities::exceptionOutstationCity": {
              isArray: true,
              url: urlBase + "/Cities/:id/exceptionOutstationCity",
              method: "POST",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.destroyAll() instead.
            "::delete::Cities::exceptionOutstationCity": {
              url: urlBase + "/Cities/:id/exceptionOutstationCity",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.exceptionOutstationCity.count() instead.
            "::count::Cities::exceptionOutstationCity": {
              url: urlBase + "/Cities/:id/exceptionOutstationCity/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#updateOrCreate
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExceptionOutstationCity` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#update
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#destroyById
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#removeById
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ExceptionOutstationCity#modelName
        * @propertyOf lbServices.ExceptionOutstationCity
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ExceptionOutstationCity`.
        */
        R.modelName = "ExceptionOutstationCity";


            /**
             * @ngdoc method
             * @name lbServices.ExceptionOutstationCity#cities
             * @methodOf lbServices.ExceptionOutstationCity
             *
             * @description
             *
             * Fetches belongsTo relation cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::get::ExceptionOutstationCity::cities"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.RateCard
 * @header lbServices.RateCard
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RateCard` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "RateCard",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/RateCards/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use RateCard.cities() instead.
            "prototype$__get__cities": {
              url: urlBase + "/RateCards/:id/cities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#create
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RateCard` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/RateCards",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#createMany
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RateCard` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/RateCards",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#upsert
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RateCard` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/RateCards",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#exists
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/RateCards/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#findById
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RateCard` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/RateCards/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#find
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RateCard` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/RateCards",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#findOne
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RateCard` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/RateCards/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#updateAll
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/RateCards/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#deleteById
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/RateCards/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#count
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/RateCards/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#prototype$updateAttributes
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RateCard` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/RateCards/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RateCard#createChangeStream
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/RateCards/change-stream",
              method: "POST",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.RateCard#updateOrCreate
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RateCard` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RateCard#update
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RateCard#destroyById
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RateCard#removeById
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RateCard#modelName
        * @propertyOf lbServices.RateCard
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RateCard`.
        */
        R.modelName = "RateCard";


            /**
             * @ngdoc method
             * @name lbServices.RateCard#cities
             * @methodOf lbServices.RateCard
             *
             * @description
             *
             * Fetches belongsTo relation cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::get::RateCard::cities"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.PermanentDriverRequest
 * @header lbServices.PermanentDriverRequest
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PermanentDriverRequest` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "PermanentDriverRequest",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/PermanentDriverRequests/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use PermanentDriverRequest.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/PermanentDriverRequests/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use PermanentDriverRequest.cities() instead.
            "prototype$__get__cities": {
              url: urlBase + "/PermanentDriverRequests/:id/cities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#create
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/PermanentDriverRequests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#createMany
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/PermanentDriverRequests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#upsert
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/PermanentDriverRequests",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#exists
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/PermanentDriverRequests/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#findById
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/PermanentDriverRequests/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#find
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/PermanentDriverRequests",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#findOne
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/PermanentDriverRequests/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#updateAll
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/PermanentDriverRequests/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#deleteById
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/PermanentDriverRequests/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#count
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/PermanentDriverRequests/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#prototype$updateAttributes
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/PermanentDriverRequests/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#createChangeStream
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/PermanentDriverRequests/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#createPermanentDriverRequest
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "createPermanentDriverRequest": {
              url: urlBase + "/PermanentDriverRequests/createPermanentDriverRequest",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#createPermanentDriverRequestNew
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "createPermanentDriverRequestNew": {
              url: urlBase + "/PermanentDriverRequests/createPermanentDriverRequestNew",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#createPermanentDriverRequestNewBoth
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             *  - `carType` – `{string=}` -
             *
             *  - `dutyHours` – `{string=}` -
             *
             *  - `salaryBudget` – `{string=}` -
             *
             *  - `naturOfDuty` – `{string=}` -
             *
             *  - `weeklyOff` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "createPermanentDriverRequestNewBoth": {
              url: urlBase + "/PermanentDriverRequests/createPermanentDriverRequestNewBoth",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#createPermanentDriver
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             *  - `carType` – `{string=}` -
             *
             *  - `dutyHours` – `{string=}` -
             *
             *  - `salaryBudget` – `{string=}` -
             *
             *  - `naturOfDuty` – `{string=}` -
             *
             *  - `weeklyOff` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "createPermanentDriver": {
              url: urlBase + "/PermanentDriverRequests/createPermanentDriver",
              method: "POST",
            },
              /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#createPermanentDriverForAdmin
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             *  - `carType` – `{string=}` -
             *
             *  - `dutyHours` – `{string=}` -
             *
             *  - `salaryBudget` – `{string=}` -
             *
             *  - `naturOfDuty` – `{string=}` -
             *
             *  - `weeklyOff` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             *  - `nextFollowUpDate` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "createPermanentDriverForAdmin": {
              url: urlBase + "/PermanentDriverRequests/createPermanentDriverForAdmin",
              method: "POST",
            },


            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#searchMonthlyDrivers
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `from_date` – `{string=}` -
             *
             *  - `to_date` – `{string=}` -
             *
             *  - `status` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "searchMonthlyDrivers": {
              url: urlBase + "/PermanentDriverRequests/searchMonthlyDrivers",
              method: "GET",
            },
            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#searchMonthlyDriversNFD
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `from_date` – `{string=}` -
             *
             *  - `to_date` – `{string=}` -
             *
             *  - `operationCity` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "searchMonthlyDriversNFD": {
              url: urlBase + "/PermanentDriverRequests/searchMonthlyDriversNFD",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#getPermanentDriverRequest
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             "getPermanentDriverRequest": {
              url: urlBase + "/PermanentDriverRequests/getPermanentDriverRequest",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.findById() instead.
            "::findById::CustomerDetails::permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.destroyById() instead.
            "::destroyById::CustomerDetails::permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.updateById() instead.
            "::updateById::CustomerDetails::permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest() instead.
            "::get::CustomerDetails::permanentDriverRequest": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.create() instead.
            "::create::CustomerDetails::permanentDriverRequest": {
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.createMany() instead.
            "::createMany::CustomerDetails::permanentDriverRequest": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.destroyAll() instead.
            "::delete::CustomerDetails::permanentDriverRequest": {
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.permanentDriverRequest.count() instead.
            "::count::CustomerDetails::permanentDriverRequest": {
              url: urlBase + "/CustomerDetails/:id/permanentDriverRequest/count",
              method: "GET",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.findById() instead.
            "::findById::Cities::permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/permanentDriverRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.destroyById() instead.
            "::destroyById::Cities::permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/permanentDriverRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.updateById() instead.
            "::updateById::Cities::permanentDriverRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/permanentDriverRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Cities.permanentDriverRequest() instead.
            "::get::Cities::permanentDriverRequest": {
              isArray: true,
              url: urlBase + "/Cities/:id/permanentDriverRequest",
              method: "GET",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.create() instead.
            "::create::Cities::permanentDriverRequest": {
              url: urlBase + "/Cities/:id/permanentDriverRequest",
              method: "POST",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.createMany() instead.
            "::createMany::Cities::permanentDriverRequest": {
              isArray: true,
              url: urlBase + "/Cities/:id/permanentDriverRequest",
              method: "POST",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.destroyAll() instead.
            "::delete::Cities::permanentDriverRequest": {
              url: urlBase + "/Cities/:id/permanentDriverRequest",
              method: "DELETE",
            },

            // INTERNAL. Use Cities.permanentDriverRequest.count() instead.
            "::count::Cities::permanentDriverRequest": {
              url: urlBase + "/Cities/:id/permanentDriverRequest/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#updateOrCreate
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PermanentDriverRequest` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#update
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#destroyById
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#removeById
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.PermanentDriverRequest#modelName
        * @propertyOf lbServices.PermanentDriverRequest
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PermanentDriverRequest`.
        */
        R.modelName = "PermanentDriverRequest";


            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#customerDetails
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::PermanentDriverRequest::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.PermanentDriverRequest#cities
             * @methodOf lbServices.PermanentDriverRequest
             *
             * @description
             *
             * Fetches belongsTo relation cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::get::PermanentDriverRequest::cities"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.DriverAccountTransactions
 * @header lbServices.DriverAccountTransactions
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverAccountTransactions` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverAccountTransactions",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverAccountTransactions/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverAccountTransactions.bookings.findById() instead.
            "prototype$__findById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccountTransactions/:id/bookings/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.destroyById() instead.
            "prototype$__destroyById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccountTransactions/:id/bookings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.updateById() instead.
            "prototype$__updateById__bookings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccountTransactions/:id/bookings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverAccountTransactions.driverAccount() instead.
            "prototype$__get__driverAccount": {
              url: urlBase + "/DriverAccountTransactions/:id/driverAccount",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.driverRechargeTransactions() instead.
            "prototype$__get__driverRechargeTransactions": {
              url: urlBase + "/DriverAccountTransactions/:id/driverRechargeTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings() instead.
            "prototype$__get__bookings": {
              isArray: true,
              url: urlBase + "/DriverAccountTransactions/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.create() instead.
            "prototype$__create__bookings": {
              url: urlBase + "/DriverAccountTransactions/:id/bookings",
              method: "POST",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.destroyAll() instead.
            "prototype$__delete__bookings": {
              url: urlBase + "/DriverAccountTransactions/:id/bookings",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccountTransactions.bookings.count() instead.
            "prototype$__count__bookings": {
              url: urlBase + "/DriverAccountTransactions/:id/bookings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#create
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverAccountTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#createMany
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverAccountTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#upsert
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverAccountTransactions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#exists
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverAccountTransactions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#findById
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverAccountTransactions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#find
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverAccountTransactions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#findOne
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverAccountTransactions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#updateAll
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverAccountTransactions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#deleteById
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverAccountTransactions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#count
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverAccountTransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#prototype$updateAttributes
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverAccountTransactions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#createChangeStream
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverAccountTransactions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#getDriverTransaction
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "getDriverTransaction": {
              url: urlBase + "/DriverAccountTransactions/getDriverTransaction",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#getDriverTransactionHistory
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             "getDriverTransactionHistory": {
              url: urlBase + "/DriverAccountTransactions/getDriverTransactionHistory",
              method: "GET",
            },

            // INTERNAL. Use Bookings.driverAccountTransactions() instead.
            "::get::Bookings::driverAccountTransactions": {
              url: urlBase + "/Bookings/:id/driverAccountTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.findById() instead.
            "::findById::DriverAccount::driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.destroyById() instead.
            "::destroyById::DriverAccount::driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.updateById() instead.
            "::updateById::DriverAccount::driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions() instead.
            "::get::DriverAccount::driverAccountTransactions": {
              isArray: true,
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.create() instead.
            "::create::DriverAccount::driverAccountTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.createMany() instead.
            "::createMany::DriverAccount::driverAccountTransactions": {
              isArray: true,
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.destroyAll() instead.
            "::delete::DriverAccount::driverAccountTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.count() instead.
            "::count::DriverAccount::driverAccountTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions/count",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.findById() instead.
            "::findById::DriverRechargeTransactions::driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.destroyById() instead.
            "::destroyById::DriverRechargeTransactions::driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.updateById() instead.
            "::updateById::DriverRechargeTransactions::driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions() instead.
            "::get::DriverRechargeTransactions::driverAccountTransactions": {
              isArray: true,
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.create() instead.
            "::create::DriverRechargeTransactions::driverAccountTransactions": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.createMany() instead.
            "::createMany::DriverRechargeTransactions::driverAccountTransactions": {
              isArray: true,
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.destroyAll() instead.
            "::delete::DriverRechargeTransactions::driverAccountTransactions": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.count() instead.
            "::count::DriverRechargeTransactions::driverAccountTransactions": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#updateOrCreate
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#update
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#destroyById
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#removeById
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverAccountTransactions#modelName
        * @propertyOf lbServices.DriverAccountTransactions
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverAccountTransactions`.
        */
        R.modelName = "DriverAccountTransactions";

    /**
     * @ngdoc object
     * @name lbServices.DriverAccountTransactions.bookings
     * @header lbServices.DriverAccountTransactions.bookings
     * @object
     * @description
     *
     * The object `DriverAccountTransactions.bookings` groups methods
     * manipulating `Bookings` instances related to `DriverAccountTransactions`.
     *
     * Call {@link lbServices.DriverAccountTransactions#bookings DriverAccountTransactions.bookings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#bookings
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Queries bookings of DriverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::DriverAccountTransactions::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions.bookings#count
             * @methodOf lbServices.DriverAccountTransactions.bookings
             *
             * @description
             *
             * Counts bookings of DriverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookings.count = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::count::DriverAccountTransactions::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions.bookings#create
             * @methodOf lbServices.DriverAccountTransactions.bookings
             *
             * @description
             *
             * Creates a new instance in bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.create = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::create::DriverAccountTransactions::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions.bookings#createMany
             * @methodOf lbServices.DriverAccountTransactions.bookings
             *
             * @description
             *
             * Creates a new instance in bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.createMany = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::createMany::DriverAccountTransactions::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions.bookings#destroyAll
             * @methodOf lbServices.DriverAccountTransactions.bookings
             *
             * @description
             *
             * Deletes all bookings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookings.destroyAll = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::delete::DriverAccountTransactions::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions.bookings#destroyById
             * @methodOf lbServices.DriverAccountTransactions.bookings
             *
             * @description
             *
             * Delete a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookings.destroyById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::destroyById::DriverAccountTransactions::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions.bookings#findById
             * @methodOf lbServices.DriverAccountTransactions.bookings
             *
             * @description
             *
             * Find a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.findById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::findById::DriverAccountTransactions::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions.bookings#updateById
             * @methodOf lbServices.DriverAccountTransactions.bookings
             *
             * @description
             *
             * Update a related item by id for bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings.updateById = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::updateById::DriverAccountTransactions::bookings"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#driverAccount
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Fetches belongsTo relation driverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             R.driverAccount = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::get::DriverAccountTransactions::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccountTransactions#driverRechargeTransactions
             * @methodOf lbServices.DriverAccountTransactions
             *
             * @description
             *
             * Fetches belongsTo relation driverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::get::DriverAccountTransactions::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.DriverAccount
 * @header lbServices.DriverAccount
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverAccount` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverAccount",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverAccounts/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverAccount.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/DriverAccounts/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.findById() instead.
            "prototype$__findById__driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.destroyById() instead.
            "prototype$__destroyById__driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.updateById() instead.
            "prototype$__updateById__driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.findById() instead.
            "prototype$__findById__driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.destroyById() instead.
            "prototype$__destroyById__driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.updateById() instead.
            "prototype$__updateById__driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions() instead.
            "prototype$__get__driverAccountTransactions": {
              isArray: true,
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.create() instead.
            "prototype$__create__driverAccountTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.destroyAll() instead.
            "prototype$__delete__driverAccountTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccount.driverAccountTransactions.count() instead.
            "prototype$__count__driverAccountTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverAccountTransactions/count",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions() instead.
            "prototype$__get__driverRechargeTransactions": {
              isArray: true,
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.create() instead.
            "prototype$__create__driverRechargeTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.destroyAll() instead.
            "prototype$__delete__driverRechargeTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.count() instead.
            "prototype$__count__driverRechargeTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#create
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverAccounts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#createMany
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverAccounts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#upsert
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverAccounts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#exists
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverAccounts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#findById
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverAccounts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#find
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverAccounts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#findOne
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverAccounts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#updateAll
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverAccounts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#deleteById
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverAccounts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#count
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverAccounts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#prototype$updateAttributes
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverAccounts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#createChangeStream
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverAccounts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#driverAmountDeposit
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `amount` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `description` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "driverAmountDeposit": {
              url: urlBase + "/DriverAccounts/driverAmountDeposit",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#driverAmountDeduct
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `amount` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `description` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             "driverAmountDeduct": {
              url: urlBase + "/DriverAccounts/driverAmountDeduct",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverAccount.findById() instead.
            "::findById::DriverDetails::driverAccount": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverAccount/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverAccount.destroyById() instead.
            "::destroyById::DriverDetails::driverAccount": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverAccount/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverAccount.updateById() instead.
            "::updateById::DriverDetails::driverAccount": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverAccount/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.driverAccount() instead.
            "::get::DriverDetails::driverAccount": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverAccount",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverAccount.create() instead.
            "::create::DriverDetails::driverAccount": {
              url: urlBase + "/DriverDetails/:id/driverAccount",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverAccount.createMany() instead.
            "::createMany::DriverDetails::driverAccount": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverAccount",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverAccount.destroyAll() instead.
            "::delete::DriverDetails::driverAccount": {
              url: urlBase + "/DriverDetails/:id/driverAccount",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverAccount.count() instead.
            "::count::DriverDetails::driverAccount": {
              url: urlBase + "/DriverDetails/:id/driverAccount/count",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.driverAccount() instead.
            "::get::DriverAccountTransactions::driverAccount": {
              url: urlBase + "/DriverAccountTransactions/:id/driverAccount",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccount() instead.
            "::get::DriverRechargeTransactions::driverAccount": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccount",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#updateOrCreate
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#update
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#destroyById
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#removeById
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverAccount#modelName
        * @propertyOf lbServices.DriverAccount
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverAccount`.
        */
        R.modelName = "DriverAccount";


            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#driverDetails
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::DriverAccount::driverDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverAccount.driverAccountTransactions
     * @header lbServices.DriverAccount.driverAccountTransactions
     * @object
     * @description
     *
     * The object `DriverAccount.driverAccountTransactions` groups methods
     * manipulating `DriverAccountTransactions` instances related to `DriverAccount`.
     *
     * Call {@link lbServices.DriverAccount#driverAccountTransactions DriverAccount.driverAccountTransactions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#driverAccountTransactions
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Queries driverAccountTransactions of DriverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::get::DriverAccount::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverAccountTransactions#count
             * @methodOf lbServices.DriverAccount.driverAccountTransactions
             *
             * @description
             *
             * Counts driverAccountTransactions of DriverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverAccountTransactions.count = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::count::DriverAccount::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverAccountTransactions#create
             * @methodOf lbServices.DriverAccount.driverAccountTransactions
             *
             * @description
             *
             * Creates a new instance in driverAccountTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions.create = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::create::DriverAccount::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverAccountTransactions#createMany
             * @methodOf lbServices.DriverAccount.driverAccountTransactions
             *
             * @description
             *
             * Creates a new instance in driverAccountTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions.createMany = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::createMany::DriverAccount::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverAccountTransactions#destroyAll
             * @methodOf lbServices.DriverAccount.driverAccountTransactions
             *
             * @description
             *
             * Deletes all driverAccountTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAccountTransactions.destroyAll = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::delete::DriverAccount::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverAccountTransactions#destroyById
             * @methodOf lbServices.DriverAccount.driverAccountTransactions
             *
             * @description
             *
             * Delete a related item by id for driverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccountTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAccountTransactions.destroyById = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::destroyById::DriverAccount::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverAccountTransactions#findById
             * @methodOf lbServices.DriverAccount.driverAccountTransactions
             *
             * @description
             *
             * Find a related item by id for driverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccountTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions.findById = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::findById::DriverAccount::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverAccountTransactions#updateById
             * @methodOf lbServices.DriverAccount.driverAccountTransactions
             *
             * @description
             *
             * Update a related item by id for driverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccountTransactions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions.updateById = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::updateById::DriverAccount::driverAccountTransactions"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverAccount.driverRechargeTransactions
     * @header lbServices.DriverAccount.driverRechargeTransactions
     * @object
     * @description
     *
     * The object `DriverAccount.driverRechargeTransactions` groups methods
     * manipulating `DriverRechargeTransactions` instances related to `DriverAccount`.
     *
     * Call {@link lbServices.DriverAccount#driverRechargeTransactions DriverAccount.driverRechargeTransactions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverAccount#driverRechargeTransactions
             * @methodOf lbServices.DriverAccount
             *
             * @description
             *
             * Queries driverRechargeTransactions of DriverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::get::DriverAccount::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverRechargeTransactions#count
             * @methodOf lbServices.DriverAccount.driverRechargeTransactions
             *
             * @description
             *
             * Counts driverRechargeTransactions of DriverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverRechargeTransactions.count = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::count::DriverAccount::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverRechargeTransactions#create
             * @methodOf lbServices.DriverAccount.driverRechargeTransactions
             *
             * @description
             *
             * Creates a new instance in driverRechargeTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions.create = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::create::DriverAccount::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverRechargeTransactions#createMany
             * @methodOf lbServices.DriverAccount.driverRechargeTransactions
             *
             * @description
             *
             * Creates a new instance in driverRechargeTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions.createMany = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::createMany::DriverAccount::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverRechargeTransactions#destroyAll
             * @methodOf lbServices.DriverAccount.driverRechargeTransactions
             *
             * @description
             *
             * Deletes all driverRechargeTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverRechargeTransactions.destroyAll = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::delete::DriverAccount::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverRechargeTransactions#destroyById
             * @methodOf lbServices.DriverAccount.driverRechargeTransactions
             *
             * @description
             *
             * Delete a related item by id for driverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverRechargeTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverRechargeTransactions.destroyById = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::destroyById::DriverAccount::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverRechargeTransactions#findById
             * @methodOf lbServices.DriverAccount.driverRechargeTransactions
             *
             * @description
             *
             * Find a related item by id for driverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverRechargeTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions.findById = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::findById::DriverAccount::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAccount.driverRechargeTransactions#updateById
             * @methodOf lbServices.DriverAccount.driverRechargeTransactions
             *
             * @description
             *
             * Update a related item by id for driverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverRechargeTransactions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R.driverRechargeTransactions.updateById = function() {
              var TargetResource = $injector.get("DriverRechargeTransactions");
              var action = TargetResource["::updateById::DriverAccount::driverRechargeTransactions"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.BookingAnalysisData
 * @header lbServices.BookingAnalysisData
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BookingAnalysisData` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "BookingAnalysisData",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/BookingAnalysisData/:id",
      { 'id': '@id' },
      {

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#create
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/BookingAnalysisData",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#createMany
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/BookingAnalysisData",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#upsert
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/BookingAnalysisData",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#exists
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/BookingAnalysisData/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#findById
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/BookingAnalysisData/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#find
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/BookingAnalysisData",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#findOne
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/BookingAnalysisData/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#updateAll
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/BookingAnalysisData/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#deleteById
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/BookingAnalysisData/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#count
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/BookingAnalysisData/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#prototype$updateAttributes
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/BookingAnalysisData/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#createChangeStream
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/BookingAnalysisData/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#getAnalysisDataofYears
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "getAnalysisDataofYears": {
              url: urlBase + "/BookingAnalysisData/getAnalysisDataofYears",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#getAnalysisDataofAll
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `year` – `{string}` -
             *
             *  - `firstMonth` – `{string}` -
             *
             *  - `secondMonth` – `{string}` -
             *
             *  - `thirdMonth` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             "getAnalysisDataofAll": {
              url: urlBase + "/BookingAnalysisData/getAnalysisDataofAll",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#updateOrCreate
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingAnalysisData` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#update
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#destroyById
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BookingAnalysisData#removeById
             * @methodOf lbServices.BookingAnalysisData
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BookingAnalysisData#modelName
        * @propertyOf lbServices.BookingAnalysisData
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BookingAnalysisData`.
        */
        R.modelName = "BookingAnalysisData";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.DriverRechargeTransactions
 * @header lbServices.DriverRechargeTransactions
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverRechargeTransactions` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverRechargeTransactions",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverRechargeTransactions/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.findById() instead.
            "prototype$__findById__driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.destroyById() instead.
            "prototype$__destroyById__driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.updateById() instead.
            "prototype$__updateById__driverAccountTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccount() instead.
            "prototype$__get__driverAccount": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccount",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions() instead.
            "prototype$__get__driverAccountTransactions": {
              isArray: true,
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.create() instead.
            "prototype$__create__driverAccountTransactions": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.destroyAll() instead.
            "prototype$__delete__driverAccountTransactions": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DriverRechargeTransactions.driverAccountTransactions.count() instead.
            "prototype$__count__driverAccountTransactions": {
              url: urlBase + "/DriverRechargeTransactions/:id/driverAccountTransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#create
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverRechargeTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#createMany
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverRechargeTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#upsert
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverRechargeTransactions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#exists
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverRechargeTransactions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#findById
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverRechargeTransactions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#find
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverRechargeTransactions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#findOne
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverRechargeTransactions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#updateAll
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverRechargeTransactions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#deleteById
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverRechargeTransactions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#count
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverRechargeTransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#prototype$updateAttributes
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverRechargeTransactions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#createChangeStream
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverRechargeTransactions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#driverRechargeOnline
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `transactionId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             "driverRechargeOnline": {
              url: urlBase + "/DriverRechargeTransactions/driverRechargeOnline",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.findById() instead.
            "::findById::DriverDetails::driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.destroyById() instead.
            "::destroyById::DriverDetails::driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.updateById() instead.
            "::updateById::DriverDetails::driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions() instead.
            "::get::DriverDetails::driverRechargeTransactions": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.create() instead.
            "::create::DriverDetails::driverRechargeTransactions": {
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.createMany() instead.
            "::createMany::DriverDetails::driverRechargeTransactions": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.destroyAll() instead.
            "::delete::DriverDetails::driverRechargeTransactions": {
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverRechargeTransactions.count() instead.
            "::count::DriverDetails::driverRechargeTransactions": {
              url: urlBase + "/DriverDetails/:id/driverRechargeTransactions/count",
              method: "GET",
            },

            // INTERNAL. Use DriverAccountTransactions.driverRechargeTransactions() instead.
            "::get::DriverAccountTransactions::driverRechargeTransactions": {
              url: urlBase + "/DriverAccountTransactions/:id/driverRechargeTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.findById() instead.
            "::findById::DriverAccount::driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.destroyById() instead.
            "::destroyById::DriverAccount::driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.updateById() instead.
            "::updateById::DriverAccount::driverRechargeTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions() instead.
            "::get::DriverAccount::driverRechargeTransactions": {
              isArray: true,
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions",
              method: "GET",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.create() instead.
            "::create::DriverAccount::driverRechargeTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.createMany() instead.
            "::createMany::DriverAccount::driverRechargeTransactions": {
              isArray: true,
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions",
              method: "POST",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.destroyAll() instead.
            "::delete::DriverAccount::driverRechargeTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DriverAccount.driverRechargeTransactions.count() instead.
            "::count::DriverAccount::driverRechargeTransactions": {
              url: urlBase + "/DriverAccounts/:id/driverRechargeTransactions/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#updateOrCreate
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverRechargeTransactions` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#update
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#destroyById
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#removeById
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverRechargeTransactions#modelName
        * @propertyOf lbServices.DriverRechargeTransactions
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverRechargeTransactions`.
        */
        R.modelName = "DriverRechargeTransactions";

    /**
     * @ngdoc object
     * @name lbServices.DriverRechargeTransactions.driverAccountTransactions
     * @header lbServices.DriverRechargeTransactions.driverAccountTransactions
     * @object
     * @description
     *
     * The object `DriverRechargeTransactions.driverAccountTransactions` groups methods
     * manipulating `DriverAccountTransactions` instances related to `DriverRechargeTransactions`.
     *
     * Call {@link lbServices.DriverRechargeTransactions#driverAccountTransactions DriverRechargeTransactions.driverAccountTransactions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#driverAccountTransactions
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Queries driverAccountTransactions of DriverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::get::DriverRechargeTransactions::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions.driverAccountTransactions#count
             * @methodOf lbServices.DriverRechargeTransactions.driverAccountTransactions
             *
             * @description
             *
             * Counts driverAccountTransactions of DriverRechargeTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverAccountTransactions.count = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::count::DriverRechargeTransactions::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions.driverAccountTransactions#create
             * @methodOf lbServices.DriverRechargeTransactions.driverAccountTransactions
             *
             * @description
             *
             * Creates a new instance in driverAccountTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions.create = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::create::DriverRechargeTransactions::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions.driverAccountTransactions#createMany
             * @methodOf lbServices.DriverRechargeTransactions.driverAccountTransactions
             *
             * @description
             *
             * Creates a new instance in driverAccountTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions.createMany = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::createMany::DriverRechargeTransactions::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions.driverAccountTransactions#destroyAll
             * @methodOf lbServices.DriverRechargeTransactions.driverAccountTransactions
             *
             * @description
             *
             * Deletes all driverAccountTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAccountTransactions.destroyAll = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::delete::DriverRechargeTransactions::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions.driverAccountTransactions#destroyById
             * @methodOf lbServices.DriverRechargeTransactions.driverAccountTransactions
             *
             * @description
             *
             * Delete a related item by id for driverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccountTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAccountTransactions.destroyById = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::destroyById::DriverRechargeTransactions::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions.driverAccountTransactions#findById
             * @methodOf lbServices.DriverRechargeTransactions.driverAccountTransactions
             *
             * @description
             *
             * Find a related item by id for driverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccountTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions.findById = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::findById::DriverRechargeTransactions::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions.driverAccountTransactions#updateById
             * @methodOf lbServices.DriverRechargeTransactions.driverAccountTransactions
             *
             * @description
             *
             * Update a related item by id for driverAccountTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAccountTransactions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccountTransactions` object.)
             * </em>
             */
             R.driverAccountTransactions.updateById = function() {
              var TargetResource = $injector.get("DriverAccountTransactions");
              var action = TargetResource["::updateById::DriverRechargeTransactions::driverAccountTransactions"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#driverAccount
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Fetches belongsTo relation driverAccount.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAccount` object.)
             * </em>
             */
             R.driverAccount = function() {
              var TargetResource = $injector.get("DriverAccount");
              var action = TargetResource["::get::DriverRechargeTransactions::driverAccount"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverRechargeTransactions#driverDetails
             * @methodOf lbServices.DriverRechargeTransactions
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::DriverRechargeTransactions::driverDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company1BillDetails
 * @header lbServices.Company1BillDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company1BillDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company1BillDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company1BillDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company1BillDetails.company1Items() instead.
            "prototype$__get__company1Items": {
              url: urlBase + "/Company1BillDetails/:id/company1Items",
              method: "GET",
            },

            // INTERNAL. Use Company1BillDetails.company1CustomerBills() instead.
            "prototype$__get__company1CustomerBills": {
              url: urlBase + "/Company1BillDetails/:id/company1CustomerBills",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#create
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company1BillDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#createMany
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company1BillDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#upsert
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company1BillDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#exists
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company1BillDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#findById
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company1BillDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#find
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company1BillDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#findOne
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company1BillDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#updateAll
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company1BillDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#deleteById
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company1BillDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#count
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company1BillDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#prototype$updateAttributes
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company1BillDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#createChangeStream
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company1BillDetails/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.findById() instead.
            "::findById::Company1Items::company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1BillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.destroyById() instead.
            "::destroyById::Company1Items::company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1BillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.updateById() instead.
            "::updateById::Company1Items::company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1BillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1Items.company1BillDetails() instead.
            "::get::Company1Items::company1BillDetails": {
              isArray: true,
              url: urlBase + "/Company1Items/:id/company1BillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.create() instead.
            "::create::Company1Items::company1BillDetails": {
              url: urlBase + "/Company1Items/:id/company1BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.createMany() instead.
            "::createMany::Company1Items::company1BillDetails": {
              isArray: true,
              url: urlBase + "/Company1Items/:id/company1BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.destroyAll() instead.
            "::delete::Company1Items::company1BillDetails": {
              url: urlBase + "/Company1Items/:id/company1BillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.count() instead.
            "::count::Company1Items::company1BillDetails": {
              url: urlBase + "/Company1Items/:id/company1BillDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.findById() instead.
            "::findById::Company1CustomerBills::company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.destroyById() instead.
            "::destroyById::Company1CustomerBills::company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.updateById() instead.
            "::updateById::Company1CustomerBills::company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails() instead.
            "::get::Company1CustomerBills::company1BillDetails": {
              isArray: true,
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.create() instead.
            "::create::Company1CustomerBills::company1BillDetails": {
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.createMany() instead.
            "::createMany::Company1CustomerBills::company1BillDetails": {
              isArray: true,
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.destroyAll() instead.
            "::delete::Company1CustomerBills::company1BillDetails": {
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.count() instead.
            "::count::Company1CustomerBills::company1BillDetails": {
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#updateOrCreate
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#update
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#destroyById
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#removeById
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company1BillDetails#modelName
        * @propertyOf lbServices.Company1BillDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company1BillDetails`.
        */
        R.modelName = "Company1BillDetails";


            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#company1Items
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Fetches belongsTo relation company1Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             R.company1Items = function() {
              var TargetResource = $injector.get("Company1Items");
              var action = TargetResource["::get::Company1BillDetails::company1Items"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1BillDetails#company1CustomerBills
             * @methodOf lbServices.Company1BillDetails
             *
             * @description
             *
             * Fetches belongsTo relation company1CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             R.company1CustomerBills = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::get::Company1BillDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company1Items
 * @header lbServices.Company1Items
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company1Items` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company1Items",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company1Items/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company1Items.company1BillDetails.findById() instead.
            "prototype$__findById__company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1BillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.destroyById() instead.
            "prototype$__destroyById__company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1BillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.updateById() instead.
            "prototype$__updateById__company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1BillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.findById() instead.
            "prototype$__findById__company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.destroyById() instead.
            "prototype$__destroyById__company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.updateById() instead.
            "prototype$__updateById__company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1Items.company1BillDetails() instead.
            "prototype$__get__company1BillDetails": {
              isArray: true,
              url: urlBase + "/Company1Items/:id/company1BillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.create() instead.
            "prototype$__create__company1BillDetails": {
              url: urlBase + "/Company1Items/:id/company1BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.destroyAll() instead.
            "prototype$__delete__company1BillDetails": {
              url: urlBase + "/Company1Items/:id/company1BillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company1Items.company1BillDetails.count() instead.
            "prototype$__count__company1BillDetails": {
              url: urlBase + "/Company1Items/:id/company1BillDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate() instead.
            "prototype$__get__company1CustomerRate": {
              isArray: true,
              url: urlBase + "/Company1Items/:id/company1CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.create() instead.
            "prototype$__create__company1CustomerRate": {
              url: urlBase + "/Company1Items/:id/company1CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.destroyAll() instead.
            "prototype$__delete__company1CustomerRate": {
              url: urlBase + "/Company1Items/:id/company1CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.count() instead.
            "prototype$__count__company1CustomerRate": {
              url: urlBase + "/Company1Items/:id/company1CustomerRate/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#create
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company1Items",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#createMany
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company1Items",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#upsert
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company1Items",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#exists
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company1Items/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#findById
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company1Items/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#find
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company1Items",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#findOne
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company1Items/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#updateAll
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company1Items/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#deleteById
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company1Items/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#count
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company1Items/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#prototype$updateAttributes
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company1Items/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#createChangeStream
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company1Items/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Company1BillDetails.company1Items() instead.
            "::get::Company1BillDetails::company1Items": {
              url: urlBase + "/Company1BillDetails/:id/company1Items",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerRate.company1Items() instead.
            "::get::Company1CustomerRate::company1Items": {
              url: urlBase + "/Company1CustomerRates/:id/company1Items",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company1Items#updateOrCreate
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#update
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#destroyById
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company1Items#removeById
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company1Items#modelName
        * @propertyOf lbServices.Company1Items
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company1Items`.
        */
        R.modelName = "Company1Items";

    /**
     * @ngdoc object
     * @name lbServices.Company1Items.company1BillDetails
     * @header lbServices.Company1Items.company1BillDetails
     * @object
     * @description
     *
     * The object `Company1Items.company1BillDetails` groups methods
     * manipulating `Company1BillDetails` instances related to `Company1Items`.
     *
     * Call {@link lbServices.Company1Items#company1BillDetails Company1Items.company1BillDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company1Items#company1BillDetails
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Queries company1BillDetails of Company1Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::get::Company1Items::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1BillDetails#count
             * @methodOf lbServices.Company1Items.company1BillDetails
             *
             * @description
             *
             * Counts company1BillDetails of Company1Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company1BillDetails.count = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::count::Company1Items::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1BillDetails#create
             * @methodOf lbServices.Company1Items.company1BillDetails
             *
             * @description
             *
             * Creates a new instance in company1BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails.create = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::create::Company1Items::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1BillDetails#createMany
             * @methodOf lbServices.Company1Items.company1BillDetails
             *
             * @description
             *
             * Creates a new instance in company1BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails.createMany = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::createMany::Company1Items::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1BillDetails#destroyAll
             * @methodOf lbServices.Company1Items.company1BillDetails
             *
             * @description
             *
             * Deletes all company1BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1BillDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::delete::Company1Items::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1BillDetails#destroyById
             * @methodOf lbServices.Company1Items.company1BillDetails
             *
             * @description
             *
             * Delete a related item by id for company1BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1BillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1BillDetails.destroyById = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::destroyById::Company1Items::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1BillDetails#findById
             * @methodOf lbServices.Company1Items.company1BillDetails
             *
             * @description
             *
             * Find a related item by id for company1BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1BillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails.findById = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::findById::Company1Items::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1BillDetails#updateById
             * @methodOf lbServices.Company1Items.company1BillDetails
             *
             * @description
             *
             * Update a related item by id for company1BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1BillDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails.updateById = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::updateById::Company1Items::company1BillDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company1Items.company1CustomerRate
     * @header lbServices.Company1Items.company1CustomerRate
     * @object
     * @description
     *
     * The object `Company1Items.company1CustomerRate` groups methods
     * manipulating `Company1CustomerRate` instances related to `Company1Items`.
     *
     * Call {@link lbServices.Company1Items#company1CustomerRate Company1Items.company1CustomerRate()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company1Items#company1CustomerRate
             * @methodOf lbServices.Company1Items
             *
             * @description
             *
             * Queries company1CustomerRate of Company1Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::get::Company1Items::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1CustomerRate#count
             * @methodOf lbServices.Company1Items.company1CustomerRate
             *
             * @description
             *
             * Counts company1CustomerRate of Company1Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company1CustomerRate.count = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::count::Company1Items::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1CustomerRate#create
             * @methodOf lbServices.Company1Items.company1CustomerRate
             *
             * @description
             *
             * Creates a new instance in company1CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate.create = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::create::Company1Items::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1CustomerRate#createMany
             * @methodOf lbServices.Company1Items.company1CustomerRate
             *
             * @description
             *
             * Creates a new instance in company1CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate.createMany = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::createMany::Company1Items::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1CustomerRate#destroyAll
             * @methodOf lbServices.Company1Items.company1CustomerRate
             *
             * @description
             *
             * Deletes all company1CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1CustomerRate.destroyAll = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::delete::Company1Items::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1CustomerRate#destroyById
             * @methodOf lbServices.Company1Items.company1CustomerRate
             *
             * @description
             *
             * Delete a related item by id for company1CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1CustomerRate.destroyById = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::destroyById::Company1Items::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1CustomerRate#findById
             * @methodOf lbServices.Company1Items.company1CustomerRate
             *
             * @description
             *
             * Find a related item by id for company1CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate.findById = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::findById::Company1Items::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1Items.company1CustomerRate#updateById
             * @methodOf lbServices.Company1Items.company1CustomerRate
             *
             * @description
             *
             * Update a related item by id for company1CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerRate
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate.updateById = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::updateById::Company1Items::company1CustomerRate"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company2Items
 * @header lbServices.Company2Items
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company2Items` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company2Items",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company2Items/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company2Items.company2CustomerRate.findById() instead.
            "prototype$__findById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.destroyById() instead.
            "prototype$__destroyById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.updateById() instead.
            "prototype$__updateById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.findById() instead.
            "prototype$__findById__company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2BillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.destroyById() instead.
            "prototype$__destroyById__company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2BillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.updateById() instead.
            "prototype$__updateById__company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2BillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.findById() instead.
            "prototype$__findById__company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.destroyById() instead.
            "prototype$__destroyById__company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.updateById() instead.
            "prototype$__updateById__company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate() instead.
            "prototype$__get__company2CustomerRate": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.create() instead.
            "prototype$__create__company2CustomerRate": {
              url: urlBase + "/Company2Items/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.destroyAll() instead.
            "prototype$__delete__company2CustomerRate": {
              url: urlBase + "/Company2Items/:id/company2CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.count() instead.
            "prototype$__count__company2CustomerRate": {
              url: urlBase + "/Company2Items/:id/company2CustomerRate/count",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2BillDetails() instead.
            "prototype$__get__company2BillDetails": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2BillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.create() instead.
            "prototype$__create__company2BillDetails": {
              url: urlBase + "/Company2Items/:id/company2BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.destroyAll() instead.
            "prototype$__delete__company2BillDetails": {
              url: urlBase + "/Company2Items/:id/company2BillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.count() instead.
            "prototype$__count__company2BillDetails": {
              url: urlBase + "/Company2Items/:id/company2BillDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails() instead.
            "prototype$__get__company2MultipleBillDetails": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.create() instead.
            "prototype$__create__company2MultipleBillDetails": {
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.destroyAll() instead.
            "prototype$__delete__company2MultipleBillDetails": {
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.count() instead.
            "prototype$__count__company2MultipleBillDetails": {
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#create
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company2Items",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#createMany
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company2Items",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#upsert
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company2Items",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#exists
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company2Items/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#findById
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company2Items/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#find
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company2Items",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#findOne
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company2Items/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#updateAll
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company2Items/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#deleteById
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company2Items/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#count
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company2Items/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#prototype$updateAttributes
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company2Items/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#createChangeStream
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company2Items/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerRate.company2Items() instead.
            "::get::Company2CustomerRate::company2Items": {
              url: urlBase + "/Company2CustomerRates/:id/company2Items",
              method: "GET",
            },

            // INTERNAL. Use Company2BillDetails.company2Items() instead.
            "::get::Company2BillDetails::company2Items": {
              url: urlBase + "/Company2BillDetails/:id/company2Items",
              method: "GET",
            },

            // INTERNAL. Use Company2MultipleBillDetails.company2Items() instead.
            "::get::Company2MultipleBillDetails::company2Items": {
              url: urlBase + "/Company2MultipleBillDetails/:id/company2Items",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company2Items#updateOrCreate
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#update
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#destroyById
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company2Items#removeById
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company2Items#modelName
        * @propertyOf lbServices.Company2Items
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company2Items`.
        */
        R.modelName = "Company2Items";

    /**
     * @ngdoc object
     * @name lbServices.Company2Items.company2CustomerRate
     * @header lbServices.Company2Items.company2CustomerRate
     * @object
     * @description
     *
     * The object `Company2Items.company2CustomerRate` groups methods
     * manipulating `Company2CustomerRate` instances related to `Company2Items`.
     *
     * Call {@link lbServices.Company2Items#company2CustomerRate Company2Items.company2CustomerRate()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2Items#company2CustomerRate
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Queries company2CustomerRate of Company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::get::Company2Items::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2CustomerRate#count
             * @methodOf lbServices.Company2Items.company2CustomerRate
             *
             * @description
             *
             * Counts company2CustomerRate of Company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2CustomerRate.count = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::count::Company2Items::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2CustomerRate#create
             * @methodOf lbServices.Company2Items.company2CustomerRate
             *
             * @description
             *
             * Creates a new instance in company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.create = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::create::Company2Items::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2CustomerRate#createMany
             * @methodOf lbServices.Company2Items.company2CustomerRate
             *
             * @description
             *
             * Creates a new instance in company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.createMany = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::createMany::Company2Items::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2CustomerRate#destroyAll
             * @methodOf lbServices.Company2Items.company2CustomerRate
             *
             * @description
             *
             * Deletes all company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerRate.destroyAll = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::delete::Company2Items::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2CustomerRate#destroyById
             * @methodOf lbServices.Company2Items.company2CustomerRate
             *
             * @description
             *
             * Delete a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerRate.destroyById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::destroyById::Company2Items::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2CustomerRate#findById
             * @methodOf lbServices.Company2Items.company2CustomerRate
             *
             * @description
             *
             * Find a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.findById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::findById::Company2Items::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2CustomerRate#updateById
             * @methodOf lbServices.Company2Items.company2CustomerRate
             *
             * @description
             *
             * Update a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.updateById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::updateById::Company2Items::company2CustomerRate"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company2Items.company2BillDetails
     * @header lbServices.Company2Items.company2BillDetails
     * @object
     * @description
     *
     * The object `Company2Items.company2BillDetails` groups methods
     * manipulating `Company2BillDetails` instances related to `Company2Items`.
     *
     * Call {@link lbServices.Company2Items#company2BillDetails Company2Items.company2BillDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2Items#company2BillDetails
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Queries company2BillDetails of Company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::get::Company2Items::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2BillDetails#count
             * @methodOf lbServices.Company2Items.company2BillDetails
             *
             * @description
             *
             * Counts company2BillDetails of Company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2BillDetails.count = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::count::Company2Items::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2BillDetails#create
             * @methodOf lbServices.Company2Items.company2BillDetails
             *
             * @description
             *
             * Creates a new instance in company2BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails.create = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::create::Company2Items::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2BillDetails#createMany
             * @methodOf lbServices.Company2Items.company2BillDetails
             *
             * @description
             *
             * Creates a new instance in company2BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails.createMany = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::createMany::Company2Items::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2BillDetails#destroyAll
             * @methodOf lbServices.Company2Items.company2BillDetails
             *
             * @description
             *
             * Deletes all company2BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2BillDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::delete::Company2Items::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2BillDetails#destroyById
             * @methodOf lbServices.Company2Items.company2BillDetails
             *
             * @description
             *
             * Delete a related item by id for company2BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2BillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2BillDetails.destroyById = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::destroyById::Company2Items::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2BillDetails#findById
             * @methodOf lbServices.Company2Items.company2BillDetails
             *
             * @description
             *
             * Find a related item by id for company2BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2BillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails.findById = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::findById::Company2Items::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2BillDetails#updateById
             * @methodOf lbServices.Company2Items.company2BillDetails
             *
             * @description
             *
             * Update a related item by id for company2BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2BillDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails.updateById = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::updateById::Company2Items::company2BillDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company2Items.company2MultipleBillDetails
     * @header lbServices.Company2Items.company2MultipleBillDetails
     * @object
     * @description
     *
     * The object `Company2Items.company2MultipleBillDetails` groups methods
     * manipulating `Company2MultipleBillDetails` instances related to `Company2Items`.
     *
     * Call {@link lbServices.Company2Items#company2MultipleBillDetails Company2Items.company2MultipleBillDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2Items#company2MultipleBillDetails
             * @methodOf lbServices.Company2Items
             *
             * @description
             *
             * Queries company2MultipleBillDetails of Company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::get::Company2Items::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2MultipleBillDetails#count
             * @methodOf lbServices.Company2Items.company2MultipleBillDetails
             *
             * @description
             *
             * Counts company2MultipleBillDetails of Company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2MultipleBillDetails.count = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::count::Company2Items::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2MultipleBillDetails#create
             * @methodOf lbServices.Company2Items.company2MultipleBillDetails
             *
             * @description
             *
             * Creates a new instance in company2MultipleBillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails.create = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::create::Company2Items::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2MultipleBillDetails#createMany
             * @methodOf lbServices.Company2Items.company2MultipleBillDetails
             *
             * @description
             *
             * Creates a new instance in company2MultipleBillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails.createMany = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::createMany::Company2Items::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2MultipleBillDetails#destroyAll
             * @methodOf lbServices.Company2Items.company2MultipleBillDetails
             *
             * @description
             *
             * Deletes all company2MultipleBillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2MultipleBillDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::delete::Company2Items::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2MultipleBillDetails#destroyById
             * @methodOf lbServices.Company2Items.company2MultipleBillDetails
             *
             * @description
             *
             * Delete a related item by id for company2MultipleBillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2MultipleBillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2MultipleBillDetails.destroyById = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::destroyById::Company2Items::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2MultipleBillDetails#findById
             * @methodOf lbServices.Company2Items.company2MultipleBillDetails
             *
             * @description
             *
             * Find a related item by id for company2MultipleBillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2MultipleBillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails.findById = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::findById::Company2Items::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2Items.company2MultipleBillDetails#updateById
             * @methodOf lbServices.Company2Items.company2MultipleBillDetails
             *
             * @description
             *
             * Update a related item by id for company2MultipleBillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2MultipleBillDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails.updateById = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::updateById::Company2Items::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company1CustomerDetails
 * @header lbServices.Company1CustomerDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company1CustomerDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company1CustomerDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company1CustomerDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company1CustomerDetails.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/Company1CustomerDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.findById() instead.
            "prototype$__findById__company1CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.destroyById() instead.
            "prototype$__destroyById__company1CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.updateById() instead.
            "prototype$__updateById__company1CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.findById() instead.
            "prototype$__findById__company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.destroyById() instead.
            "prototype$__destroyById__company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.updateById() instead.
            "prototype$__updateById__company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills() instead.
            "prototype$__get__company1CustomerBills": {
              isArray: true,
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.create() instead.
            "prototype$__create__company1CustomerBills": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.destroyAll() instead.
            "prototype$__delete__company1CustomerBills": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.count() instead.
            "prototype$__count__company1CustomerBills": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills/count",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate() instead.
            "prototype$__get__company1CustomerRate": {
              isArray: true,
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.create() instead.
            "prototype$__create__company1CustomerRate": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.destroyAll() instead.
            "prototype$__delete__company1CustomerRate": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.count() instead.
            "prototype$__count__company1CustomerRate": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#create
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company1CustomerDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#createMany
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company1CustomerDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#upsert
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company1CustomerDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#exists
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company1CustomerDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#findById
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company1CustomerDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#find
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company1CustomerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#findOne
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company1CustomerDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#updateAll
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company1CustomerDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#deleteById
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company1CustomerDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#count
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company1CustomerDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#prototype$updateAttributes
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company1CustomerDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#createChangeStream
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company1CustomerDetails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#createBillingCustomer
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `firstName` – `{string}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `address` – `{string}` -
             *
             *  - `agreementNumber` – `{string}` -
             *
             *  - `landline` – `{string=}` -
             *
             *  - `contactPersonName` – `{string}` -
             *
             *  - `contactPersonEmail` – `{string}` -
             *
             *  - `vehicleName` – `{string}` -
             *
             *  - `vehicleType` – `{string}` -
             *
             *  - `gstnNumber` – `{string}` -
             *
             *  - `hsaNumber` – `{string=}` -
             *
             *  - `dutyHours` – `{string}` -
             *
             *  - `weeklyOff` – `{string=}` -
             *
             *  - `monthlySalary` – `{string}` -
             *
             *  - `otRate` – `{string}` -
             *
             *  - `osaRate` – `{string}` -
             *
             *  - `nsaRate` – `{string}` -
             *
             *  - `edRate` – `{string}` -
             *
             *  - `adminCharge` – `{string}` -
             *
             *  - `companyName` – `{string}` -
             *
             *  - `agreementStartDate` – `{string}` -
             *
             *  - `agreementEndDate` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `adminChargeType` – `{string}` -
             *
             *  - `driverName` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "createBillingCustomer": {
              url: urlBase + "/Company1CustomerDetails/createBillingCustomer",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#createExistingBillingCustomer
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `conuserId` – `{string}` -
             *
             *  - `agreementNumber` – `{string}` -
             *
             *  - `landline` – `{string=}` -
             *
             *  - `contactPersonName` – `{string}` -
             *
             *  - `contactPersonEmail` – `{string}` -
             *
             *  - `vehicleName` – `{string}` -
             *
             *  - `vehicleType` – `{string}` -
             *
             *  - `gstnNumber` – `{string}` -
             *
             *  - `hsaNumber` – `{string=}` -
             *
             *  - `dutyHours` – `{string}` -
             *
             *  - `weeklyOff` – `{string=}` -
             *
             *  - `monthlySalary` – `{string}` -
             *
             *  - `otRate` – `{string}` -
             *
             *  - `osaRate` – `{string}` -
             *
             *  - `nsaRate` – `{string}` -
             *
             *  - `edRate` – `{string}` -
             *
             *  - `adminCharge` – `{string}` -
             *
             *  - `companyName` – `{string}` -
             *
             *  - `agreementStartDate` – `{string}` -
             *
             *  - `agreementEndDate` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `adminChargeType` – `{string}` -
             *
             *  - `driverName` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             "createExistingBillingCustomer": {
              url: urlBase + "/Company1CustomerDetails/createExistingBillingCustomer",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.findById() instead.
            "::findById::ConUsers::company1CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company1CustomerDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.destroyById() instead.
            "::destroyById::ConUsers::company1CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company1CustomerDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.updateById() instead.
            "::updateById::ConUsers::company1CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company1CustomerDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails() instead.
            "::get::ConUsers::company1CustomerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/company1CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.create() instead.
            "::create::ConUsers::company1CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company1CustomerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.createMany() instead.
            "::createMany::ConUsers::company1CustomerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/company1CustomerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.destroyAll() instead.
            "::delete::ConUsers::company1CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company1CustomerDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.company1CustomerDetails.count() instead.
            "::count::ConUsers::company1CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company1CustomerDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerBills.company1CustomerDetails() instead.
            "::get::Company1CustomerBills::company1CustomerDetails": {
              url: urlBase + "/Company1CustomerBills/:id/company1CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerRate.company1CustomerDetails() instead.
            "::get::Company1CustomerRate::company1CustomerDetails": {
              url: urlBase + "/Company1CustomerRates/:id/company1CustomerDetails",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#updateOrCreate
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#update
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#destroyById
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#removeById
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company1CustomerDetails#modelName
        * @propertyOf lbServices.Company1CustomerDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company1CustomerDetails`.
        */
        R.modelName = "Company1CustomerDetails";


            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#conUsers
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::Company1CustomerDetails::conUsers"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company1CustomerDetails.company1CustomerBills
     * @header lbServices.Company1CustomerDetails.company1CustomerBills
     * @object
     * @description
     *
     * The object `Company1CustomerDetails.company1CustomerBills` groups methods
     * manipulating `Company1CustomerBills` instances related to `Company1CustomerDetails`.
     *
     * Call {@link lbServices.Company1CustomerDetails#company1CustomerBills Company1CustomerDetails.company1CustomerBills()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#company1CustomerBills
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Queries company1CustomerBills of Company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             R.company1CustomerBills = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::get::Company1CustomerDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerBills#count
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerBills
             *
             * @description
             *
             * Counts company1CustomerBills of Company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company1CustomerBills.count = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::count::Company1CustomerDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerBills#create
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerBills
             *
             * @description
             *
             * Creates a new instance in company1CustomerBills of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             R.company1CustomerBills.create = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::create::Company1CustomerDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerBills#createMany
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerBills
             *
             * @description
             *
             * Creates a new instance in company1CustomerBills of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             R.company1CustomerBills.createMany = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::createMany::Company1CustomerDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerBills#destroyAll
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerBills
             *
             * @description
             *
             * Deletes all company1CustomerBills of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1CustomerBills.destroyAll = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::delete::Company1CustomerDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerBills#destroyById
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerBills
             *
             * @description
             *
             * Delete a related item by id for company1CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerBills
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1CustomerBills.destroyById = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::destroyById::Company1CustomerDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerBills#findById
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerBills
             *
             * @description
             *
             * Find a related item by id for company1CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerBills
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             R.company1CustomerBills.findById = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::findById::Company1CustomerDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerBills#updateById
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerBills
             *
             * @description
             *
             * Update a related item by id for company1CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerBills
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             R.company1CustomerBills.updateById = function() {
              var TargetResource = $injector.get("Company1CustomerBills");
              var action = TargetResource["::updateById::Company1CustomerDetails::company1CustomerBills"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company1CustomerDetails.company1CustomerRate
     * @header lbServices.Company1CustomerDetails.company1CustomerRate
     * @object
     * @description
     *
     * The object `Company1CustomerDetails.company1CustomerRate` groups methods
     * manipulating `Company1CustomerRate` instances related to `Company1CustomerDetails`.
     *
     * Call {@link lbServices.Company1CustomerDetails#company1CustomerRate Company1CustomerDetails.company1CustomerRate()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails#company1CustomerRate
             * @methodOf lbServices.Company1CustomerDetails
             *
             * @description
             *
             * Queries company1CustomerRate of Company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::get::Company1CustomerDetails::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerRate#count
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerRate
             *
             * @description
             *
             * Counts company1CustomerRate of Company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company1CustomerRate.count = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::count::Company1CustomerDetails::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerRate#create
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerRate
             *
             * @description
             *
             * Creates a new instance in company1CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate.create = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::create::Company1CustomerDetails::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerRate#createMany
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerRate
             *
             * @description
             *
             * Creates a new instance in company1CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate.createMany = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::createMany::Company1CustomerDetails::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerRate#destroyAll
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerRate
             *
             * @description
             *
             * Deletes all company1CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1CustomerRate.destroyAll = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::delete::Company1CustomerDetails::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerRate#destroyById
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerRate
             *
             * @description
             *
             * Delete a related item by id for company1CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1CustomerRate.destroyById = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::destroyById::Company1CustomerDetails::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerRate#findById
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerRate
             *
             * @description
             *
             * Find a related item by id for company1CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate.findById = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::findById::Company1CustomerDetails::company1CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerDetails.company1CustomerRate#updateById
             * @methodOf lbServices.Company1CustomerDetails.company1CustomerRate
             *
             * @description
             *
             * Update a related item by id for company1CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1CustomerRate
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R.company1CustomerRate.updateById = function() {
              var TargetResource = $injector.get("Company1CustomerRate");
              var action = TargetResource["::updateById::Company1CustomerDetails::company1CustomerRate"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company2CustomerDetails
 * @header lbServices.Company2CustomerDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company2CustomerDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company2CustomerDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company2CustomerDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company2CustomerDetails.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/Company2CustomerDetails/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.findById() instead.
            "prototype$__findById__customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.destroyById() instead.
            "prototype$__destroyById__customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.updateById() instead.
            "prototype$__updateById__customerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.findById() instead.
            "prototype$__findById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.destroyById() instead.
            "prototype$__destroyById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.updateById() instead.
            "prototype$__updateById__company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.findById() instead.
            "prototype$__findById__company2CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.destroyById() instead.
            "prototype$__destroyById__company2CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.updateById() instead.
            "prototype$__updateById__company2CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.findById() instead.
            "prototype$__findById__driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.destroyById() instead.
            "prototype$__destroyById__driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.updateById() instead.
            "prototype$__updateById__driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails() instead.
            "prototype$__get__customerDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.create() instead.
            "prototype$__create__customerDetails": {
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.destroyAll() instead.
            "prototype$__delete__customerDetails": {
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.customerDetails.count() instead.
            "prototype$__count__customerDetails": {
              url: urlBase + "/Company2CustomerDetails/:id/customerDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate() instead.
            "prototype$__get__company2CustomerRate": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.create() instead.
            "prototype$__create__company2CustomerRate": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.destroyAll() instead.
            "prototype$__delete__company2CustomerRate": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.count() instead.
            "prototype$__count__company2CustomerRate": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills() instead.
            "prototype$__get__company2CustomerBills": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.create() instead.
            "prototype$__create__company2CustomerBills": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.destroyAll() instead.
            "prototype$__delete__company2CustomerBills": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.count() instead.
            "prototype$__count__company2CustomerBills": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance() instead.
            "prototype$__get__driverAttendance": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.create() instead.
            "prototype$__create__driverAttendance": {
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.destroyAll() instead.
            "prototype$__delete__driverAttendance": {
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.count() instead.
            "prototype$__count__driverAttendance": {
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#create
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company2CustomerDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#createMany
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#upsert
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company2CustomerDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#exists
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company2CustomerDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#findById
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company2CustomerDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#find
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#findOne
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company2CustomerDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#updateAll
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company2CustomerDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#deleteById
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company2CustomerDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#count
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company2CustomerDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#prototype$updateAttributes
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company2CustomerDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#createChangeStream
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company2CustomerDetails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#createBillingAttendanceCustomer
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `firstName` – `{string}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `address` – `{string}` -
             *
             *  - `agreementNumber` – `{string}` -
             *
             *  - `landline` – `{string=}` -
             *
             *  - `contactPersonName` – `{string}` -
             *
             *  - `contactPersonEmail` – `{string}` -
             *
             *  - `vehicleName` – `{string}` -
             *
             *  - `vehicleType` – `{string}` -
             *
             *  - `gstnNumber` – `{string}` -
             *
             *  - `hsaNumber` – `{string=}` -
             *
             *  - `adminCharge` – `{string}` -
             *
             *  - `agreementStartDate` – `{string}` -
             *
             *  - `agreementEndDate` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `adminChargeType` – `{string}` -
             *
             *  - `contactPerson2Name` – `{string=}` -
             *
             *  - `contactPerson2Email` – `{string=}` -
             *
             *  - `contactPerson2MobileNumber` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "createBillingAttendanceCustomer": {
              url: urlBase + "/Company2CustomerDetails/createBillingAttendanceCustomer",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#createBillingCustomerMDrivers
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `firstName` – `{string}` -
             *
             *  - `lastName` – `{string}` -
             *
             *  - `mobileNumber` – `{string}` -
             *
             *  - `email` – `{string}` -
             *
             *  - `address` – `{string}` -
             *
             *  - `agreementNumber` – `{string}` -
             *
             *  - `landline` – `{string=}` -
             *
             *  - `contactPersonName` – `{string}` -
             *
             *  - `contactPersonEmail` – `{string}` -
             *
             *  - `vehicleName` – `{string}` -
             *
             *  - `vehicleType` – `{string}` -
             *
             *  - `gstnNumber` – `{string}` -
             *
             *  - `hsaNumber` – `{string=}` -
             *
             *  - `agreementStartDate` – `{string}` -
             *
             *  - `agreementEndDate` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `contactPerson2Name` – `{string=}` -
             *
             *  - `contactPerson2Email` – `{string=}` -
             *
             *  - `contactPerson2MobileNumber` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "createBillingCustomerMDrivers": {
              url: urlBase + "/Company2CustomerDetails/createBillingCustomerMDrivers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#getCompany2Customers
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "getCompany2Customers": {
              url: urlBase + "/Company2CustomerDetails/getCompany2Customers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#addAppointDriver
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `driverName` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `driverHours` – `{string}` -
             *
             *  - `weeklyOff` – `{string}` -
             *
             *  - `otRate` – `{string}` -
             *
             *  - `nsaRate` – `{string}` -
             *
             *  - `edRate` – `{string}` -
             *
             *  - `monthlySalary` – `{string}` -
             *
             *  - `driverCycle` – `{string}` -
             *
             *  - `appointedDate` – `{string}` -
             *
             *  - `osaRate` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `directorId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "addAppointDriver": {
              url: urlBase + "/Company2CustomerDetails/addAppointDriver",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#AppointDriverforBilling
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `driverName` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `driverHours` – `{string}` -
             *
             *  - `weeklyOff` – `{string=}` -
             *
             *  - `otRate` – `{string}` -
             *
             *  - `nsaRate` – `{string}` -
             *
             *  - `edRate` – `{string}` -
             *
             *  - `monthlySalary` – `{string}` -
             *
             *  - `driverCycle` – `{string}` -
             *
             *  - `appointedDate` – `{string}` -
             *
             *  - `osaRate` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `adminCharge` – `{string}` -
             *
             *  - `adminChargeType` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "AppointDriverforBilling": {
              url: urlBase + "/Company2CustomerDetails/AppointDriverforBilling",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#getCompany2CustomerDetails
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `company2CustomerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             "getCompany2CustomerDetails": {
              url: urlBase + "/Company2CustomerDetails/getCompany2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerDetails() instead.
            "::get::CustomerDetails::company2CustomerDetails": {
              url: urlBase + "/CustomerDetails/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.findById() instead.
            "::findById::ConUsers::company2CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company2CustomerDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.destroyById() instead.
            "::destroyById::ConUsers::company2CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company2CustomerDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.updateById() instead.
            "::updateById::ConUsers::company2CustomerDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/company2CustomerDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails() instead.
            "::get::ConUsers::company2CustomerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.create() instead.
            "::create::ConUsers::company2CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company2CustomerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.createMany() instead.
            "::createMany::ConUsers::company2CustomerDetails": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/company2CustomerDetails",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.destroyAll() instead.
            "::delete::ConUsers::company2CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company2CustomerDetails",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.company2CustomerDetails.count() instead.
            "::count::ConUsers::company2CustomerDetails": {
              url: urlBase + "/ConUsers/:id/company2CustomerDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerRate.company2CustomerDetails() instead.
            "::get::Company2CustomerRate::company2CustomerDetails": {
              url: urlBase + "/Company2CustomerRates/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2CustomerDetails() instead.
            "::get::Company2CustomerBills::company2CustomerDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2DriverDetails.company2CustomerDetails() instead.
            "::get::Company2DriverDetails::company2CustomerDetails": {
              url: urlBase + "/Company2DriverDetails/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverAttendance.company2CustomerDetails() instead.
            "::get::DriverAttendance::company2CustomerDetails": {
              url: urlBase + "/DriverAttendances/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use AppointedDriverHistoricalData.company2CustomerDetails() instead.
            "::get::AppointedDriverHistoricalData::company2CustomerDetails": {
              url: urlBase + "/AppointedDriverHistoricalData/:id/company2CustomerDetails",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#updateOrCreate
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#update
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#destroyById
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#removeById
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company2CustomerDetails#modelName
        * @propertyOf lbServices.Company2CustomerDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company2CustomerDetails`.
        */
        R.modelName = "Company2CustomerDetails";


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#conUsers
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::Company2CustomerDetails::conUsers"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company2CustomerDetails.customerDetails
     * @header lbServices.Company2CustomerDetails.customerDetails
     * @object
     * @description
     *
     * The object `Company2CustomerDetails.customerDetails` groups methods
     * manipulating `CustomerDetails` instances related to `Company2CustomerDetails`.
     *
     * Call {@link lbServices.Company2CustomerDetails#customerDetails Company2CustomerDetails.customerDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#customerDetails
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Queries customerDetails of Company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::Company2CustomerDetails::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.customerDetails#count
             * @methodOf lbServices.Company2CustomerDetails.customerDetails
             *
             * @description
             *
             * Counts customerDetails of Company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.customerDetails.count = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::count::Company2CustomerDetails::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.customerDetails#create
             * @methodOf lbServices.Company2CustomerDetails.customerDetails
             *
             * @description
             *
             * Creates a new instance in customerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails.create = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::create::Company2CustomerDetails::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.customerDetails#createMany
             * @methodOf lbServices.Company2CustomerDetails.customerDetails
             *
             * @description
             *
             * Creates a new instance in customerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails.createMany = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::createMany::Company2CustomerDetails::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.customerDetails#destroyAll
             * @methodOf lbServices.Company2CustomerDetails.customerDetails
             *
             * @description
             *
             * Deletes all customerDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.customerDetails.destroyAll = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::delete::Company2CustomerDetails::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.customerDetails#destroyById
             * @methodOf lbServices.Company2CustomerDetails.customerDetails
             *
             * @description
             *
             * Delete a related item by id for customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customerDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.customerDetails.destroyById = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::destroyById::Company2CustomerDetails::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.customerDetails#findById
             * @methodOf lbServices.Company2CustomerDetails.customerDetails
             *
             * @description
             *
             * Find a related item by id for customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customerDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails.findById = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::findById::Company2CustomerDetails::customerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.customerDetails#updateById
             * @methodOf lbServices.Company2CustomerDetails.customerDetails
             *
             * @description
             *
             * Update a related item by id for customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customerDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails.updateById = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::updateById::Company2CustomerDetails::customerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company2CustomerDetails.company2CustomerRate
     * @header lbServices.Company2CustomerDetails.company2CustomerRate
     * @object
     * @description
     *
     * The object `Company2CustomerDetails.company2CustomerRate` groups methods
     * manipulating `Company2CustomerRate` instances related to `Company2CustomerDetails`.
     *
     * Call {@link lbServices.Company2CustomerDetails#company2CustomerRate Company2CustomerDetails.company2CustomerRate()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#company2CustomerRate
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Queries company2CustomerRate of Company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::get::Company2CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerRate#count
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Counts company2CustomerRate of Company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2CustomerRate.count = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::count::Company2CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerRate#create
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Creates a new instance in company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.create = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::create::Company2CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerRate#createMany
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Creates a new instance in company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.createMany = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::createMany::Company2CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerRate#destroyAll
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Deletes all company2CustomerRate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerRate.destroyAll = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::delete::Company2CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerRate#destroyById
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Delete a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerRate.destroyById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::destroyById::Company2CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerRate#findById
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Find a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.findById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::findById::Company2CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerRate#updateById
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerRate
             *
             * @description
             *
             * Update a related item by id for company2CustomerRate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerRate
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R.company2CustomerRate.updateById = function() {
              var TargetResource = $injector.get("Company2CustomerRate");
              var action = TargetResource["::updateById::Company2CustomerDetails::company2CustomerRate"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company2CustomerDetails.company2CustomerBills
     * @header lbServices.Company2CustomerDetails.company2CustomerBills
     * @object
     * @description
     *
     * The object `Company2CustomerDetails.company2CustomerBills` groups methods
     * manipulating `Company2CustomerBills` instances related to `Company2CustomerDetails`.
     *
     * Call {@link lbServices.Company2CustomerDetails#company2CustomerBills Company2CustomerDetails.company2CustomerBills()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#company2CustomerBills
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Queries company2CustomerBills of Company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             R.company2CustomerBills = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::get::Company2CustomerDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerBills#count
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerBills
             *
             * @description
             *
             * Counts company2CustomerBills of Company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2CustomerBills.count = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::count::Company2CustomerDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerBills#create
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerBills
             *
             * @description
             *
             * Creates a new instance in company2CustomerBills of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             R.company2CustomerBills.create = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::create::Company2CustomerDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerBills#createMany
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerBills
             *
             * @description
             *
             * Creates a new instance in company2CustomerBills of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             R.company2CustomerBills.createMany = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::createMany::Company2CustomerDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerBills#destroyAll
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerBills
             *
             * @description
             *
             * Deletes all company2CustomerBills of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerBills.destroyAll = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::delete::Company2CustomerDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerBills#destroyById
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerBills
             *
             * @description
             *
             * Delete a related item by id for company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerBills
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2CustomerBills.destroyById = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::destroyById::Company2CustomerDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerBills#findById
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerBills
             *
             * @description
             *
             * Find a related item by id for company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerBills
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             R.company2CustomerBills.findById = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::findById::Company2CustomerDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.company2CustomerBills#updateById
             * @methodOf lbServices.Company2CustomerDetails.company2CustomerBills
             *
             * @description
             *
             * Update a related item by id for company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2CustomerBills
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             R.company2CustomerBills.updateById = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::updateById::Company2CustomerDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company2CustomerDetails.driverAttendance
     * @header lbServices.Company2CustomerDetails.driverAttendance
     * @object
     * @description
     *
     * The object `Company2CustomerDetails.driverAttendance` groups methods
     * manipulating `DriverAttendance` instances related to `Company2CustomerDetails`.
     *
     * Call {@link lbServices.Company2CustomerDetails#driverAttendance Company2CustomerDetails.driverAttendance()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails#driverAttendance
             * @methodOf lbServices.Company2CustomerDetails
             *
             * @description
             *
             * Queries driverAttendance of Company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::get::Company2CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.driverAttendance#count
             * @methodOf lbServices.Company2CustomerDetails.driverAttendance
             *
             * @description
             *
             * Counts driverAttendance of Company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverAttendance.count = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::count::Company2CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.driverAttendance#create
             * @methodOf lbServices.Company2CustomerDetails.driverAttendance
             *
             * @description
             *
             * Creates a new instance in driverAttendance of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance.create = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::create::Company2CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.driverAttendance#createMany
             * @methodOf lbServices.Company2CustomerDetails.driverAttendance
             *
             * @description
             *
             * Creates a new instance in driverAttendance of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance.createMany = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::createMany::Company2CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.driverAttendance#destroyAll
             * @methodOf lbServices.Company2CustomerDetails.driverAttendance
             *
             * @description
             *
             * Deletes all driverAttendance of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAttendance.destroyAll = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::delete::Company2CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.driverAttendance#destroyById
             * @methodOf lbServices.Company2CustomerDetails.driverAttendance
             *
             * @description
             *
             * Delete a related item by id for driverAttendance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAttendance
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverAttendance.destroyById = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::destroyById::Company2CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.driverAttendance#findById
             * @methodOf lbServices.Company2CustomerDetails.driverAttendance
             *
             * @description
             *
             * Find a related item by id for driverAttendance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAttendance
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance.findById = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::findById::Company2CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerDetails.driverAttendance#updateById
             * @methodOf lbServices.Company2CustomerDetails.driverAttendance
             *
             * @description
             *
             * Update a related item by id for driverAttendance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverAttendance
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R.driverAttendance.updateById = function() {
              var TargetResource = $injector.get("DriverAttendance");
              var action = TargetResource["::updateById::Company2CustomerDetails::driverAttendance"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company1CustomerBills
 * @header lbServices.Company1CustomerBills
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company1CustomerBills` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company1CustomerBills",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company1CustomerBills/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company1CustomerBills.company1CustomerDetails() instead.
            "prototype$__get__company1CustomerDetails": {
              url: urlBase + "/Company1CustomerBills/:id/company1CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.findById() instead.
            "prototype$__findById__company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.destroyById() instead.
            "prototype$__destroyById__company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.updateById() instead.
            "prototype$__updateById__company1BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails() instead.
            "prototype$__get__company1BillDetails": {
              isArray: true,
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.create() instead.
            "prototype$__create__company1BillDetails": {
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.destroyAll() instead.
            "prototype$__delete__company1BillDetails": {
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerBills.company1BillDetails.count() instead.
            "prototype$__count__company1BillDetails": {
              url: urlBase + "/Company1CustomerBills/:id/company1BillDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#create
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company1CustomerBills",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#createMany
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company1CustomerBills",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#upsert
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company1CustomerBills",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#exists
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company1CustomerBills/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#findById
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company1CustomerBills/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#find
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company1CustomerBills",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#findOne
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company1CustomerBills/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#updateAll
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company1CustomerBills/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#deleteById
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company1CustomerBills/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#count
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company1CustomerBills/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#prototype$updateAttributes
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company1CustomerBills/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#createChangeStream
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company1CustomerBills/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#generateCustomerBills
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `billFromDate` – `{string=}` -
             *
             *  - `billTodate` – `{string=}` -
             *
             *  - `grandTotal` – `{string=}` -
             *
             *  - `userId` – `{string=}` -
             *
             *  - `subTotal` – `{string=}` -
             *
             *  - `cgst` – `{string=}` -
             *
             *  - `sgst` – `{string=}` -
             *
             *  - `status` – `{string=}` -
             *
             *  - `companyName` – `{string=}` -
             *
             *  - `salaryChargedAmount` – `{string=}` -
             *
             *  - `overtimeAmount` – `{string=}` -
             *
             *  - `outstationAmount` – `{string=}` -
             *
             *  - `nightStayAmount` – `{string=}` -
             *
             *  - `extraDayAmount` – `{string=}` -
             *
             *  - `adminCharge` – `{string=}` -
             *
             *  - `salaryChargedQuantity` – `{string=}` -
             *
             *  - `overtimeQuantity` – `{string=}` -
             *
             *  - `outstationQuantity` – `{string=}` -
             *
             *  - `nightStayQuantity` – `{string=}` -
             *
             *  - `extraDayQuantity` – `{string=}` -
             *
             *  - `reverseCharge` – `{string=}` -
             *
             *  - `adminChargeRate` – `{string=}` -
             *
             *  - `adminChargeUnit` – `{string=}` -
             *
             *  - `advanceAmount` – `{string=}` -
             *
             *  - `netAmount` – `{string=}` -
             *
             *  - `remark` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "generateCustomerBills": {
              url: urlBase + "/Company1CustomerBills/generateCustomerBills",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#generateCustomerMultipleBills
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `billFromDate` – `{string=}` -
             *
             *  - `billTodate` – `{string=}` -
             *
             *  - `grandTotal` – `{string=}` -
             *
             *  - `userId` – `{string=}` -
             *
             *  - `subTotal` – `{string=}` -
             *
             *  - `cgst` – `{string=}` -
             *
             *  - `sgst` – `{string=}` -
             *
             *  - `status` – `{string=}` -
             *
             *  - `companyName` – `{string=}` -
             *
             *  - `salaryChargedAmount` – `{string=}` -
             *
             *  - `overtimeAmount` – `{string=}` -
             *
             *  - `outstationAmount` – `{string=}` -
             *
             *  - `nightStayAmount` – `{string=}` -
             *
             *  - `extraDayAmount` – `{string=}` -
             *
             *  - `adminCharge` – `{string=}` -
             *
             *  - `salaryChargedQuantity` – `{string=}` -
             *
             *  - `overtimeQuantity` – `{string=}` -
             *
             *  - `outstationQuantity` – `{string=}` -
             *
             *  - `nightStayQuantity` – `{string=}` -
             *
             *  - `extraDayQuantity` – `{string=}` -
             *
             *  - `reverseCharge` – `{string=}` -
             *
             *  - `adminChargeRate` – `{string=}` -
             *
             *  - `adminChargeUnit` – `{string=}` -
             *
             *  - `advanceAmount` – `{string=}` -
             *
             *  - `netAmount` – `{string=}` -
             *
             *  - `remark` – `{string=}` -
             *
             *  - `driverId` – `{string}` -
             * 
             *  - `company2driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "generateCustomerMultipleBills": {
              url: urlBase + "/Company1CustomerBills/generateCustomerMultipleBills",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#generateCustomerOtherBills
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `billFromDate` – `{string}` -
             *
             *  - `billTodate` – `{string}` -
             *
             *  - `grandTotal` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `subTotal` – `{string}` -
             *
             *  - `cgst` – `{string}` -
             *
             *  - `sgst` – `{string}` -
             *
             *  - `companyName` – `{string}` -
             *
             *  - `reverseCharge` – `{string}` -
             *
             *  - `advanceAmount` – `{string}` -
             *
             *  - `netAmount` – `{string}` -
             *
             *  - `itemId` – `{string}` -
             *
             *  - `amount` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             "generateCustomerOtherBills": {
              url: urlBase + "/Company1CustomerBills/generateCustomerOtherBills",
              method: "POST",
            },

            // INTERNAL. Use Company1BillDetails.company1CustomerBills() instead.
            "::get::Company1BillDetails::company1CustomerBills": {
              url: urlBase + "/Company1BillDetails/:id/company1CustomerBills",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.findById() instead.
            "::findById::Company1CustomerDetails::company1CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.destroyById() instead.
            "::destroyById::Company1CustomerDetails::company1CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.updateById() instead.
            "::updateById::Company1CustomerDetails::company1CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills() instead.
            "::get::Company1CustomerDetails::company1CustomerBills": {
              isArray: true,
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.create() instead.
            "::create::Company1CustomerDetails::company1CustomerBills": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.createMany() instead.
            "::createMany::Company1CustomerDetails::company1CustomerBills": {
              isArray: true,
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.destroyAll() instead.
            "::delete::Company1CustomerDetails::company1CustomerBills": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerBills.count() instead.
            "::count::Company1CustomerDetails::company1CustomerBills": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerBills/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#updateOrCreate
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerBills` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#update
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#destroyById
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#removeById
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company1CustomerBills#modelName
        * @propertyOf lbServices.Company1CustomerBills
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company1CustomerBills`.
        */
        R.modelName = "Company1CustomerBills";


            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#company1CustomerDetails
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Fetches belongsTo relation company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             R.company1CustomerDetails = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::get::Company1CustomerBills::company1CustomerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company1CustomerBills.company1BillDetails
     * @header lbServices.Company1CustomerBills.company1BillDetails
     * @object
     * @description
     *
     * The object `Company1CustomerBills.company1BillDetails` groups methods
     * manipulating `Company1BillDetails` instances related to `Company1CustomerBills`.
     *
     * Call {@link lbServices.Company1CustomerBills#company1BillDetails Company1CustomerBills.company1BillDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills#company1BillDetails
             * @methodOf lbServices.Company1CustomerBills
             *
             * @description
             *
             * Queries company1BillDetails of Company1CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::get::Company1CustomerBills::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills.company1BillDetails#count
             * @methodOf lbServices.Company1CustomerBills.company1BillDetails
             *
             * @description
             *
             * Counts company1BillDetails of Company1CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company1BillDetails.count = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::count::Company1CustomerBills::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills.company1BillDetails#create
             * @methodOf lbServices.Company1CustomerBills.company1BillDetails
             *
             * @description
             *
             * Creates a new instance in company1BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails.create = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::create::Company1CustomerBills::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills.company1BillDetails#createMany
             * @methodOf lbServices.Company1CustomerBills.company1BillDetails
             *
             * @description
             *
             * Creates a new instance in company1BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails.createMany = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::createMany::Company1CustomerBills::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills.company1BillDetails#destroyAll
             * @methodOf lbServices.Company1CustomerBills.company1BillDetails
             *
             * @description
             *
             * Deletes all company1BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1BillDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::delete::Company1CustomerBills::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills.company1BillDetails#destroyById
             * @methodOf lbServices.Company1CustomerBills.company1BillDetails
             *
             * @description
             *
             * Delete a related item by id for company1BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1BillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company1BillDetails.destroyById = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::destroyById::Company1CustomerBills::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills.company1BillDetails#findById
             * @methodOf lbServices.Company1CustomerBills.company1BillDetails
             *
             * @description
             *
             * Find a related item by id for company1BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1BillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails.findById = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::findById::Company1CustomerBills::company1BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerBills.company1BillDetails#updateById
             * @methodOf lbServices.Company1CustomerBills.company1BillDetails
             *
             * @description
             *
             * Update a related item by id for company1BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company1BillDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1BillDetails` object.)
             * </em>
             */
             R.company1BillDetails.updateById = function() {
              var TargetResource = $injector.get("Company1BillDetails");
              var action = TargetResource["::updateById::Company1CustomerBills::company1BillDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company1CustomerRate
 * @header lbServices.Company1CustomerRate
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company1CustomerRate` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company1CustomerRate",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company1CustomerRates/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company1CustomerRate.company1Items() instead.
            "prototype$__get__company1Items": {
              url: urlBase + "/Company1CustomerRates/:id/company1Items",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerRate.company1CustomerDetails() instead.
            "prototype$__get__company1CustomerDetails": {
              url: urlBase + "/Company1CustomerRates/:id/company1CustomerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#create
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company1CustomerRates",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#createMany
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company1CustomerRates",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#upsert
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company1CustomerRates",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#exists
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company1CustomerRates/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#findById
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company1CustomerRates/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#find
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company1CustomerRates",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#findOne
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company1CustomerRates/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#updateAll
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company1CustomerRates/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#deleteById
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company1CustomerRates/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#count
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company1CustomerRates/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#prototype$updateAttributes
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company1CustomerRates/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#createChangeStream
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company1CustomerRates/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.findById() instead.
            "::findById::Company1Items::company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.destroyById() instead.
            "::destroyById::Company1Items::company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.updateById() instead.
            "::updateById::Company1Items::company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1Items/:id/company1CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate() instead.
            "::get::Company1Items::company1CustomerRate": {
              isArray: true,
              url: urlBase + "/Company1Items/:id/company1CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.create() instead.
            "::create::Company1Items::company1CustomerRate": {
              url: urlBase + "/Company1Items/:id/company1CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.createMany() instead.
            "::createMany::Company1Items::company1CustomerRate": {
              isArray: true,
              url: urlBase + "/Company1Items/:id/company1CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.destroyAll() instead.
            "::delete::Company1Items::company1CustomerRate": {
              url: urlBase + "/Company1Items/:id/company1CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use Company1Items.company1CustomerRate.count() instead.
            "::count::Company1Items::company1CustomerRate": {
              url: urlBase + "/Company1Items/:id/company1CustomerRate/count",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.findById() instead.
            "::findById::Company1CustomerDetails::company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.destroyById() instead.
            "::destroyById::Company1CustomerDetails::company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.updateById() instead.
            "::updateById::Company1CustomerDetails::company1CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate() instead.
            "::get::Company1CustomerDetails::company1CustomerRate": {
              isArray: true,
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.create() instead.
            "::create::Company1CustomerDetails::company1CustomerRate": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.createMany() instead.
            "::createMany::Company1CustomerDetails::company1CustomerRate": {
              isArray: true,
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.destroyAll() instead.
            "::delete::Company1CustomerDetails::company1CustomerRate": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use Company1CustomerDetails.company1CustomerRate.count() instead.
            "::count::Company1CustomerDetails::company1CustomerRate": {
              url: urlBase + "/Company1CustomerDetails/:id/company1CustomerRate/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#updateOrCreate
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerRate` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#update
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#destroyById
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#removeById
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company1CustomerRate#modelName
        * @propertyOf lbServices.Company1CustomerRate
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company1CustomerRate`.
        */
        R.modelName = "Company1CustomerRate";


            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#company1Items
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Fetches belongsTo relation company1Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1Items` object.)
             * </em>
             */
             R.company1Items = function() {
              var TargetResource = $injector.get("Company1Items");
              var action = TargetResource["::get::Company1CustomerRate::company1Items"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company1CustomerRate#company1CustomerDetails
             * @methodOf lbServices.Company1CustomerRate
             *
             * @description
             *
             * Fetches belongsTo relation company1CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company1CustomerDetails` object.)
             * </em>
             */
             R.company1CustomerDetails = function() {
              var TargetResource = $injector.get("Company1CustomerDetails");
              var action = TargetResource["::get::Company1CustomerRate::company1CustomerDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company2CustomerRate
 * @header lbServices.Company2CustomerRate
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company2CustomerRate` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company2CustomerRate",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company2CustomerRates/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company2CustomerRate.company2Items() instead.
            "prototype$__get__company2Items": {
              url: urlBase + "/Company2CustomerRates/:id/company2Items",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerRate.company2CustomerDetails() instead.
            "prototype$__get__company2CustomerDetails": {
              url: urlBase + "/Company2CustomerRates/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerRate.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/Company2CustomerRates/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerRate.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/Company2CustomerRates/:id/customerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#create
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company2CustomerRates",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#createMany
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company2CustomerRates",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#upsert
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company2CustomerRates",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#exists
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company2CustomerRates/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#findById
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company2CustomerRates/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#find
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company2CustomerRates",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#findOne
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company2CustomerRates/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#updateAll
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company2CustomerRates/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#deleteById
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company2CustomerRates/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#count
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company2CustomerRates/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#prototype$updateAttributes
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company2CustomerRates/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#createChangeStream
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company2CustomerRates/change-stream",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.findById() instead.
            "::findById::CustomerDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.destroyById() instead.
            "::destroyById::CustomerDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.updateById() instead.
            "::updateById::CustomerDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate() instead.
            "::get::CustomerDetails::company2CustomerRate": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.create() instead.
            "::create::CustomerDetails::company2CustomerRate": {
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.createMany() instead.
            "::createMany::CustomerDetails::company2CustomerRate": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.destroyAll() instead.
            "::delete::CustomerDetails::company2CustomerRate": {
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.company2CustomerRate.count() instead.
            "::count::CustomerDetails::company2CustomerRate": {
              url: urlBase + "/CustomerDetails/:id/company2CustomerRate/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.findById() instead.
            "::findById::DriverDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.destroyById() instead.
            "::destroyById::DriverDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.updateById() instead.
            "::updateById::DriverDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate() instead.
            "::get::DriverDetails::company2CustomerRate": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/company2CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.create() instead.
            "::create::DriverDetails::company2CustomerRate": {
              url: urlBase + "/DriverDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.createMany() instead.
            "::createMany::DriverDetails::company2CustomerRate": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.destroyAll() instead.
            "::delete::DriverDetails::company2CustomerRate": {
              url: urlBase + "/DriverDetails/:id/company2CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.company2CustomerRate.count() instead.
            "::count::DriverDetails::company2CustomerRate": {
              url: urlBase + "/DriverDetails/:id/company2CustomerRate/count",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.findById() instead.
            "::findById::Company2Items::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.destroyById() instead.
            "::destroyById::Company2Items::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.updateById() instead.
            "::updateById::Company2Items::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate() instead.
            "::get::Company2Items::company2CustomerRate": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.create() instead.
            "::create::Company2Items::company2CustomerRate": {
              url: urlBase + "/Company2Items/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.createMany() instead.
            "::createMany::Company2Items::company2CustomerRate": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.destroyAll() instead.
            "::delete::Company2Items::company2CustomerRate": {
              url: urlBase + "/Company2Items/:id/company2CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2CustomerRate.count() instead.
            "::count::Company2Items::company2CustomerRate": {
              url: urlBase + "/Company2Items/:id/company2CustomerRate/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.findById() instead.
            "::findById::Company2CustomerDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.destroyById() instead.
            "::destroyById::Company2CustomerDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.updateById() instead.
            "::updateById::Company2CustomerDetails::company2CustomerRate": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate() instead.
            "::get::Company2CustomerDetails::company2CustomerRate": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.create() instead.
            "::create::Company2CustomerDetails::company2CustomerRate": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.createMany() instead.
            "::createMany::Company2CustomerDetails::company2CustomerRate": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.destroyAll() instead.
            "::delete::Company2CustomerDetails::company2CustomerRate": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerRate.count() instead.
            "::count::Company2CustomerDetails::company2CustomerRate": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerRate/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#updateOrCreate
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerRate` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#update
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#destroyById
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#removeById
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company2CustomerRate#modelName
        * @propertyOf lbServices.Company2CustomerRate
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company2CustomerRate`.
        */
        R.modelName = "Company2CustomerRate";


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#company2Items
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Fetches belongsTo relation company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             R.company2Items = function() {
              var TargetResource = $injector.get("Company2Items");
              var action = TargetResource["::get::Company2CustomerRate::company2Items"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#company2CustomerDetails
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Fetches belongsTo relation company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::get::Company2CustomerRate::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#driverDetails
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::Company2CustomerRate::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerRate#customerDetails
             * @methodOf lbServices.Company2CustomerRate
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::Company2CustomerRate::customerDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company2CustomerBills
 * @header lbServices.Company2CustomerBills
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company2CustomerBills` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company2CustomerBills",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company2CustomerBills/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company2CustomerBills.company2CustomerDetails() instead.
            "prototype$__get__company2CustomerDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.findById() instead.
            "prototype$__findById__company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.destroyById() instead.
            "prototype$__destroyById__company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.updateById() instead.
            "prototype$__updateById__company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.findById() instead.
            "prototype$__findById__company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.destroyById() instead.
            "prototype$__destroyById__company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.updateById() instead.
            "prototype$__updateById__company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails() instead.
            "prototype$__get__company2BillDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.create() instead.
            "prototype$__create__company2BillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.destroyAll() instead.
            "prototype$__delete__company2BillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.count() instead.
            "prototype$__count__company2BillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails() instead.
            "prototype$__get__company2MultipleBillDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.create() instead.
            "prototype$__create__company2MultipleBillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.destroyAll() instead.
            "prototype$__delete__company2MultipleBillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.count() instead.
            "prototype$__count__company2MultipleBillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#create
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company2CustomerBills",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#createMany
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company2CustomerBills",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#upsert
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company2CustomerBills",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#exists
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company2CustomerBills/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#findById
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company2CustomerBills/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#find
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company2CustomerBills",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#findOne
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company2CustomerBills/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#updateAll
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company2CustomerBills/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#deleteById
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company2CustomerBills/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#count
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company2CustomerBills/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#prototype$updateAttributes
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company2CustomerBills/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#createChangeStream
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company2CustomerBills/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#getCompany2CustomerBills
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `company2CustomerId` – `{string}` -
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "getCompany2CustomerBills": {
              url: urlBase + "/Company2CustomerBills/getCompany2CustomerBills",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#getCompany2CustomerBillsById
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `company2CustomerBillId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             "getCompany2CustomerBillsById": {
              url: urlBase + "/Company2CustomerBills/getCompany2CustomerBillsById",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.findById() instead.
            "::findById::Company2CustomerDetails::company2CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.destroyById() instead.
            "::destroyById::Company2CustomerDetails::company2CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.updateById() instead.
            "::updateById::Company2CustomerDetails::company2CustomerBills": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills() instead.
            "::get::Company2CustomerDetails::company2CustomerBills": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.create() instead.
            "::create::Company2CustomerDetails::company2CustomerBills": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.createMany() instead.
            "::createMany::Company2CustomerDetails::company2CustomerBills": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.destroyAll() instead.
            "::delete::Company2CustomerDetails::company2CustomerBills": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.company2CustomerBills.count() instead.
            "::count::Company2CustomerDetails::company2CustomerBills": {
              url: urlBase + "/Company2CustomerDetails/:id/company2CustomerBills/count",
              method: "GET",
            },

            // INTERNAL. Use Company2BillDetails.company2CustomerBills() instead.
            "::get::Company2BillDetails::company2CustomerBills": {
              url: urlBase + "/Company2BillDetails/:id/company2CustomerBills",
              method: "GET",
            },

            // INTERNAL. Use Company2MultipleBillDetails.company2CustomerBills() instead.
            "::get::Company2MultipleBillDetails::company2CustomerBills": {
              url: urlBase + "/Company2MultipleBillDetails/:id/company2CustomerBills",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#updateOrCreate
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#update
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#destroyById
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#removeById
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company2CustomerBills#modelName
        * @propertyOf lbServices.Company2CustomerBills
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company2CustomerBills`.
        */
        R.modelName = "Company2CustomerBills";


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#company2CustomerDetails
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Fetches belongsTo relation company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::get::Company2CustomerBills::company2CustomerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company2CustomerBills.company2BillDetails
     * @header lbServices.Company2CustomerBills.company2BillDetails
     * @object
     * @description
     *
     * The object `Company2CustomerBills.company2BillDetails` groups methods
     * manipulating `Company2BillDetails` instances related to `Company2CustomerBills`.
     *
     * Call {@link lbServices.Company2CustomerBills#company2BillDetails Company2CustomerBills.company2BillDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#company2BillDetails
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Queries company2BillDetails of Company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::get::Company2CustomerBills::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2BillDetails#count
             * @methodOf lbServices.Company2CustomerBills.company2BillDetails
             *
             * @description
             *
             * Counts company2BillDetails of Company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2BillDetails.count = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::count::Company2CustomerBills::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2BillDetails#create
             * @methodOf lbServices.Company2CustomerBills.company2BillDetails
             *
             * @description
             *
             * Creates a new instance in company2BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails.create = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::create::Company2CustomerBills::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2BillDetails#createMany
             * @methodOf lbServices.Company2CustomerBills.company2BillDetails
             *
             * @description
             *
             * Creates a new instance in company2BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails.createMany = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::createMany::Company2CustomerBills::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2BillDetails#destroyAll
             * @methodOf lbServices.Company2CustomerBills.company2BillDetails
             *
             * @description
             *
             * Deletes all company2BillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2BillDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::delete::Company2CustomerBills::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2BillDetails#destroyById
             * @methodOf lbServices.Company2CustomerBills.company2BillDetails
             *
             * @description
             *
             * Delete a related item by id for company2BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2BillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2BillDetails.destroyById = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::destroyById::Company2CustomerBills::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2BillDetails#findById
             * @methodOf lbServices.Company2CustomerBills.company2BillDetails
             *
             * @description
             *
             * Find a related item by id for company2BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2BillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails.findById = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::findById::Company2CustomerBills::company2BillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2BillDetails#updateById
             * @methodOf lbServices.Company2CustomerBills.company2BillDetails
             *
             * @description
             *
             * Update a related item by id for company2BillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2BillDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R.company2BillDetails.updateById = function() {
              var TargetResource = $injector.get("Company2BillDetails");
              var action = TargetResource["::updateById::Company2CustomerBills::company2BillDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.Company2CustomerBills.company2MultipleBillDetails
     * @header lbServices.Company2CustomerBills.company2MultipleBillDetails
     * @object
     * @description
     *
     * The object `Company2CustomerBills.company2MultipleBillDetails` groups methods
     * manipulating `Company2MultipleBillDetails` instances related to `Company2CustomerBills`.
     *
     * Call {@link lbServices.Company2CustomerBills#company2MultipleBillDetails Company2CustomerBills.company2MultipleBillDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills#company2MultipleBillDetails
             * @methodOf lbServices.Company2CustomerBills
             *
             * @description
             *
             * Queries company2MultipleBillDetails of Company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::get::Company2CustomerBills::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2MultipleBillDetails#count
             * @methodOf lbServices.Company2CustomerBills.company2MultipleBillDetails
             *
             * @description
             *
             * Counts company2MultipleBillDetails of Company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.company2MultipleBillDetails.count = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::count::Company2CustomerBills::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2MultipleBillDetails#create
             * @methodOf lbServices.Company2CustomerBills.company2MultipleBillDetails
             *
             * @description
             *
             * Creates a new instance in company2MultipleBillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails.create = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::create::Company2CustomerBills::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2MultipleBillDetails#createMany
             * @methodOf lbServices.Company2CustomerBills.company2MultipleBillDetails
             *
             * @description
             *
             * Creates a new instance in company2MultipleBillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails.createMany = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::createMany::Company2CustomerBills::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2MultipleBillDetails#destroyAll
             * @methodOf lbServices.Company2CustomerBills.company2MultipleBillDetails
             *
             * @description
             *
             * Deletes all company2MultipleBillDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2MultipleBillDetails.destroyAll = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::delete::Company2CustomerBills::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2MultipleBillDetails#destroyById
             * @methodOf lbServices.Company2CustomerBills.company2MultipleBillDetails
             *
             * @description
             *
             * Delete a related item by id for company2MultipleBillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2MultipleBillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.company2MultipleBillDetails.destroyById = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::destroyById::Company2CustomerBills::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2MultipleBillDetails#findById
             * @methodOf lbServices.Company2CustomerBills.company2MultipleBillDetails
             *
             * @description
             *
             * Find a related item by id for company2MultipleBillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2MultipleBillDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails.findById = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::findById::Company2CustomerBills::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2CustomerBills.company2MultipleBillDetails#updateById
             * @methodOf lbServices.Company2CustomerBills.company2MultipleBillDetails
             *
             * @description
             *
             * Update a related item by id for company2MultipleBillDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for company2MultipleBillDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R.company2MultipleBillDetails.updateById = function() {
              var TargetResource = $injector.get("Company2MultipleBillDetails");
              var action = TargetResource["::updateById::Company2CustomerBills::company2MultipleBillDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company2BillDetails
 * @header lbServices.Company2BillDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company2BillDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company2BillDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company2BillDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company2BillDetails.company2CustomerBills() instead.
            "prototype$__get__company2CustomerBills": {
              url: urlBase + "/Company2BillDetails/:id/company2CustomerBills",
              method: "GET",
            },

            // INTERNAL. Use Company2BillDetails.company2Items() instead.
            "prototype$__get__company2Items": {
              url: urlBase + "/Company2BillDetails/:id/company2Items",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#create
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company2BillDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#createMany
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company2BillDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#upsert
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company2BillDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#exists
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company2BillDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#findById
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company2BillDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#find
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company2BillDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#findOne
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company2BillDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#updateAll
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company2BillDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#deleteById
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company2BillDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#count
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company2BillDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#prototype$updateAttributes
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company2BillDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#createChangeStream
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company2BillDetails/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.findById() instead.
            "::findById::Company2Items::company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2BillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.destroyById() instead.
            "::destroyById::Company2Items::company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2BillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.updateById() instead.
            "::updateById::Company2Items::company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2BillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2Items.company2BillDetails() instead.
            "::get::Company2Items::company2BillDetails": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2BillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.create() instead.
            "::create::Company2Items::company2BillDetails": {
              url: urlBase + "/Company2Items/:id/company2BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.createMany() instead.
            "::createMany::Company2Items::company2BillDetails": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.destroyAll() instead.
            "::delete::Company2Items::company2BillDetails": {
              url: urlBase + "/Company2Items/:id/company2BillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2BillDetails.count() instead.
            "::count::Company2Items::company2BillDetails": {
              url: urlBase + "/Company2Items/:id/company2BillDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.findById() instead.
            "::findById::Company2CustomerBills::company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.destroyById() instead.
            "::destroyById::Company2CustomerBills::company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.updateById() instead.
            "::updateById::Company2CustomerBills::company2BillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails() instead.
            "::get::Company2CustomerBills::company2BillDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.create() instead.
            "::create::Company2CustomerBills::company2BillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.createMany() instead.
            "::createMany::Company2CustomerBills::company2BillDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.destroyAll() instead.
            "::delete::Company2CustomerBills::company2BillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerBills.company2BillDetails.count() instead.
            "::count::Company2CustomerBills::company2BillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2BillDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#updateOrCreate
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2BillDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#update
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#destroyById
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#removeById
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company2BillDetails#modelName
        * @propertyOf lbServices.Company2BillDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company2BillDetails`.
        */
        R.modelName = "Company2BillDetails";


            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#company2CustomerBills
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Fetches belongsTo relation company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             R.company2CustomerBills = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::get::Company2BillDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2BillDetails#company2Items
             * @methodOf lbServices.Company2BillDetails
             *
             * @description
             *
             * Fetches belongsTo relation company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             R.company2Items = function() {
              var TargetResource = $injector.get("Company2Items");
              var action = TargetResource["::get::Company2BillDetails::company2Items"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.BookingRating
 * @header lbServices.BookingRating
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BookingRating` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "BookingRating",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/BookingRatings/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use BookingRating.bookings() instead.
            "prototype$__get__bookings": {
              url: urlBase + "/BookingRatings/:id/bookings",
              method: "GET",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.findById() instead.
            "prototype$__findById__bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.destroyById() instead.
            "prototype$__destroyById__bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.updateById() instead.
            "prototype$__updateById__bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails() instead.
            "prototype$__get__bookingRatingDetails": {
              isArray: true,
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails",
              method: "GET",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.create() instead.
            "prototype$__create__bookingRatingDetails": {
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails",
              method: "POST",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.destroyAll() instead.
            "prototype$__delete__bookingRatingDetails": {
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails",
              method: "DELETE",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.count() instead.
            "prototype$__count__bookingRatingDetails": {
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#create
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/BookingRatings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#createMany
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/BookingRatings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#upsert
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/BookingRatings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#exists
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/BookingRatings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#findById
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/BookingRatings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#find
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/BookingRatings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#findOne
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/BookingRatings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#updateAll
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/BookingRatings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#deleteById
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/BookingRatings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#count
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/BookingRatings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#prototype$updateAttributes
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/BookingRatings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#createChangeStream
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/BookingRatings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#submitFeedback
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `questionId` – `{string}` -
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `rating` – `{string}` -
             *
             *  - `comment` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             "submitFeedback": {
              url: urlBase + "/BookingRatings/submitFeedback",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingRating.findById() instead.
            "::findById::Bookings::bookingRating": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingRating/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingRating.destroyById() instead.
            "::destroyById::Bookings::bookingRating": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingRating/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingRating.updateById() instead.
            "::updateById::Bookings::bookingRating": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingRating/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.bookingRating() instead.
            "::get::Bookings::bookingRating": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingRating",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingRating.create() instead.
            "::create::Bookings::bookingRating": {
              url: urlBase + "/Bookings/:id/bookingRating",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingRating.createMany() instead.
            "::createMany::Bookings::bookingRating": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingRating",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingRating.destroyAll() instead.
            "::delete::Bookings::bookingRating": {
              url: urlBase + "/Bookings/:id/bookingRating",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingRating.count() instead.
            "::count::Bookings::bookingRating": {
              url: urlBase + "/Bookings/:id/bookingRating/count",
              method: "GET",
            },

            // INTERNAL. Use BookingRatingDetails.bookingRating() instead.
            "::get::BookingRatingDetails::bookingRating": {
              url: urlBase + "/BookingRatingDetails/:id/bookingRating",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.BookingRating#updateOrCreate
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#update
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#destroyById
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BookingRating#removeById
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BookingRating#modelName
        * @propertyOf lbServices.BookingRating
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BookingRating`.
        */
        R.modelName = "BookingRating";


            /**
             * @ngdoc method
             * @name lbServices.BookingRating#bookings
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Fetches belongsTo relation bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::BookingRating::bookings"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.BookingRating.bookingRatingDetails
     * @header lbServices.BookingRating.bookingRatingDetails
     * @object
     * @description
     *
     * The object `BookingRating.bookingRatingDetails` groups methods
     * manipulating `BookingRatingDetails` instances related to `BookingRating`.
     *
     * Call {@link lbServices.BookingRating#bookingRatingDetails BookingRating.bookingRatingDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.BookingRating#bookingRatingDetails
             * @methodOf lbServices.BookingRating
             *
             * @description
             *
             * Queries bookingRatingDetails of BookingRating.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::get::BookingRating::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingRating.bookingRatingDetails#count
             * @methodOf lbServices.BookingRating.bookingRatingDetails
             *
             * @description
             *
             * Counts bookingRatingDetails of BookingRating.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookingRatingDetails.count = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::count::BookingRating::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingRating.bookingRatingDetails#create
             * @methodOf lbServices.BookingRating.bookingRatingDetails
             *
             * @description
             *
             * Creates a new instance in bookingRatingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails.create = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::create::BookingRating::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingRating.bookingRatingDetails#createMany
             * @methodOf lbServices.BookingRating.bookingRatingDetails
             *
             * @description
             *
             * Creates a new instance in bookingRatingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails.createMany = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::createMany::BookingRating::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingRating.bookingRatingDetails#destroyAll
             * @methodOf lbServices.BookingRating.bookingRatingDetails
             *
             * @description
             *
             * Deletes all bookingRatingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingRatingDetails.destroyAll = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::delete::BookingRating::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingRating.bookingRatingDetails#destroyById
             * @methodOf lbServices.BookingRating.bookingRatingDetails
             *
             * @description
             *
             * Delete a related item by id for bookingRatingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRatingDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingRatingDetails.destroyById = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::destroyById::BookingRating::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingRating.bookingRatingDetails#findById
             * @methodOf lbServices.BookingRating.bookingRatingDetails
             *
             * @description
             *
             * Find a related item by id for bookingRatingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRatingDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails.findById = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::findById::BookingRating::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingRating.bookingRatingDetails#updateById
             * @methodOf lbServices.BookingRating.bookingRatingDetails
             *
             * @description
             *
             * Update a related item by id for bookingRatingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRatingDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails.updateById = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::updateById::BookingRating::bookingRatingDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.RatingQuestions
 * @header lbServices.RatingQuestions
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RatingQuestions` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "RatingQuestions",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/RatingQuestions/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.findById() instead.
            "prototype$__findById__bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.destroyById() instead.
            "prototype$__destroyById__bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.updateById() instead.
            "prototype$__updateById__bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails() instead.
            "prototype$__get__bookingRatingDetails": {
              isArray: true,
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails",
              method: "GET",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.create() instead.
            "prototype$__create__bookingRatingDetails": {
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails",
              method: "POST",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.destroyAll() instead.
            "prototype$__delete__bookingRatingDetails": {
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails",
              method: "DELETE",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.count() instead.
            "prototype$__count__bookingRatingDetails": {
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#create
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/RatingQuestions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#createMany
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/RatingQuestions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#upsert
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/RatingQuestions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#exists
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/RatingQuestions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#findById
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/RatingQuestions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#find
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/RatingQuestions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#findOne
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/RatingQuestions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#updateAll
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/RatingQuestions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#deleteById
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/RatingQuestions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#count
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/RatingQuestions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#prototype$updateAttributes
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/RatingQuestions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#createChangeStream
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/RatingQuestions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use BookingRatingDetails.ratingQuestions() instead.
            "::get::BookingRatingDetails::ratingQuestions": {
              url: urlBase + "/BookingRatingDetails/:id/ratingQuestions",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#updateOrCreate
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#update
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#destroyById
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#removeById
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RatingQuestions#modelName
        * @propertyOf lbServices.RatingQuestions
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RatingQuestions`.
        */
        R.modelName = "RatingQuestions";

    /**
     * @ngdoc object
     * @name lbServices.RatingQuestions.bookingRatingDetails
     * @header lbServices.RatingQuestions.bookingRatingDetails
     * @object
     * @description
     *
     * The object `RatingQuestions.bookingRatingDetails` groups methods
     * manipulating `BookingRatingDetails` instances related to `RatingQuestions`.
     *
     * Call {@link lbServices.RatingQuestions#bookingRatingDetails RatingQuestions.bookingRatingDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions#bookingRatingDetails
             * @methodOf lbServices.RatingQuestions
             *
             * @description
             *
             * Queries bookingRatingDetails of RatingQuestions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::get::RatingQuestions::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions.bookingRatingDetails#count
             * @methodOf lbServices.RatingQuestions.bookingRatingDetails
             *
             * @description
             *
             * Counts bookingRatingDetails of RatingQuestions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.bookingRatingDetails.count = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::count::RatingQuestions::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions.bookingRatingDetails#create
             * @methodOf lbServices.RatingQuestions.bookingRatingDetails
             *
             * @description
             *
             * Creates a new instance in bookingRatingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails.create = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::create::RatingQuestions::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions.bookingRatingDetails#createMany
             * @methodOf lbServices.RatingQuestions.bookingRatingDetails
             *
             * @description
             *
             * Creates a new instance in bookingRatingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails.createMany = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::createMany::RatingQuestions::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions.bookingRatingDetails#destroyAll
             * @methodOf lbServices.RatingQuestions.bookingRatingDetails
             *
             * @description
             *
             * Deletes all bookingRatingDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingRatingDetails.destroyAll = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::delete::RatingQuestions::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions.bookingRatingDetails#destroyById
             * @methodOf lbServices.RatingQuestions.bookingRatingDetails
             *
             * @description
             *
             * Delete a related item by id for bookingRatingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRatingDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.bookingRatingDetails.destroyById = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::destroyById::RatingQuestions::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions.bookingRatingDetails#findById
             * @methodOf lbServices.RatingQuestions.bookingRatingDetails
             *
             * @description
             *
             * Find a related item by id for bookingRatingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRatingDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails.findById = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::findById::RatingQuestions::bookingRatingDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.RatingQuestions.bookingRatingDetails#updateById
             * @methodOf lbServices.RatingQuestions.bookingRatingDetails
             *
             * @description
             *
             * Update a related item by id for bookingRatingDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bookingRatingDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R.bookingRatingDetails.updateById = function() {
              var TargetResource = $injector.get("BookingRatingDetails");
              var action = TargetResource["::updateById::RatingQuestions::bookingRatingDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.BookingRatingDetails
 * @header lbServices.BookingRatingDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BookingRatingDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "BookingRatingDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/BookingRatingDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use BookingRatingDetails.bookingRating() instead.
            "prototype$__get__bookingRating": {
              url: urlBase + "/BookingRatingDetails/:id/bookingRating",
              method: "GET",
            },

            // INTERNAL. Use BookingRatingDetails.ratingQuestions() instead.
            "prototype$__get__ratingQuestions": {
              url: urlBase + "/BookingRatingDetails/:id/ratingQuestions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#create
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/BookingRatingDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#createMany
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/BookingRatingDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#upsert
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/BookingRatingDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#exists
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/BookingRatingDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#findById
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/BookingRatingDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#find
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/BookingRatingDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#findOne
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/BookingRatingDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#updateAll
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/BookingRatingDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#deleteById
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/BookingRatingDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#count
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/BookingRatingDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#prototype$updateAttributes
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/BookingRatingDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#createChangeStream
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/BookingRatingDetails/change-stream",
              method: "POST",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.findById() instead.
            "::findById::BookingRating::bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.destroyById() instead.
            "::destroyById::BookingRating::bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.updateById() instead.
            "::updateById::BookingRating::bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails() instead.
            "::get::BookingRating::bookingRatingDetails": {
              isArray: true,
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails",
              method: "GET",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.create() instead.
            "::create::BookingRating::bookingRatingDetails": {
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails",
              method: "POST",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.createMany() instead.
            "::createMany::BookingRating::bookingRatingDetails": {
              isArray: true,
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails",
              method: "POST",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.destroyAll() instead.
            "::delete::BookingRating::bookingRatingDetails": {
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails",
              method: "DELETE",
            },

            // INTERNAL. Use BookingRating.bookingRatingDetails.count() instead.
            "::count::BookingRating::bookingRatingDetails": {
              url: urlBase + "/BookingRatings/:id/bookingRatingDetails/count",
              method: "GET",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.findById() instead.
            "::findById::RatingQuestions::bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.destroyById() instead.
            "::destroyById::RatingQuestions::bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.updateById() instead.
            "::updateById::RatingQuestions::bookingRatingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails() instead.
            "::get::RatingQuestions::bookingRatingDetails": {
              isArray: true,
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails",
              method: "GET",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.create() instead.
            "::create::RatingQuestions::bookingRatingDetails": {
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails",
              method: "POST",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.createMany() instead.
            "::createMany::RatingQuestions::bookingRatingDetails": {
              isArray: true,
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails",
              method: "POST",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.destroyAll() instead.
            "::delete::RatingQuestions::bookingRatingDetails": {
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails",
              method: "DELETE",
            },

            // INTERNAL. Use RatingQuestions.bookingRatingDetails.count() instead.
            "::count::RatingQuestions::bookingRatingDetails": {
              url: urlBase + "/RatingQuestions/:id/bookingRatingDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#updateOrCreate
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRatingDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#update
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#destroyById
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#removeById
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BookingRatingDetails#modelName
        * @propertyOf lbServices.BookingRatingDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BookingRatingDetails`.
        */
        R.modelName = "BookingRatingDetails";


            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#bookingRating
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Fetches belongsTo relation bookingRating.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingRating` object.)
             * </em>
             */
             R.bookingRating = function() {
              var TargetResource = $injector.get("BookingRating");
              var action = TargetResource["::get::BookingRatingDetails::bookingRating"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.BookingRatingDetails#ratingQuestions
             * @methodOf lbServices.BookingRatingDetails
             *
             * @description
             *
             * Fetches belongsTo relation ratingQuestions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RatingQuestions` object.)
             * </em>
             */
             R.ratingQuestions = function() {
              var TargetResource = $injector.get("RatingQuestions");
              var action = TargetResource["::get::BookingRatingDetails::ratingQuestions"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.DriverJobDetails
 * @header lbServices.DriverJobDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverJobDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverJobDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverJobDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverJobDetails.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/DriverJobDetails/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.findById() instead.
            "prototype$__findById__driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.destroyById() instead.
            "prototype$__destroyById__driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.updateById() instead.
            "prototype$__updateById__driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest() instead.
            "prototype$__get__driverJobRequest": {
              isArray: true,
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest",
              method: "GET",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.create() instead.
            "prototype$__create__driverJobRequest": {
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.destroyAll() instead.
            "prototype$__delete__driverJobRequest": {
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest",
              method: "DELETE",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.count() instead.
            "prototype$__count__driverJobRequest": {
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#create
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverJobDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#createMany
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverJobDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#upsert
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverJobDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#exists
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverJobDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#findById
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverJobDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#find
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverJobDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#findOne
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverJobDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#updateAll
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverJobDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#deleteById
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverJobDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#count
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverJobDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#prototype$updateAttributes
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverJobDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#createChangeStream
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverJobDetails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#createNewJob
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `area` – `{string}` -
             *
             *  - `carType` – `{string}` -
             *
             *  - `dutyHours` – `{string}` -
             *
             *  - `dutyType` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `clientId` – `{string}` -
             *
             *  - `weeklyOff` – `{string=}` -
             *
             *  - `dutyTime` – `{string}` -
             *
             *  - `outstationDays` – `{string}` -
             *
             *  - `driverAge` – `{string}` -
             *
             *  - `drivingExp` – `{string}` -
             *
             *  - `carName` – `{string}` -
             *
             *  - `clientSalary` – `{string}` -
             *
             *  - `driverSalary` – `{string}` -
             *
             *  - `role` – `{string}` -
             *
             *  - `other` – `{string=}` -
             *
             *  - `location` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "createNewJob": {
              url: urlBase + "/DriverJobDetails/createNewJob",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#getDriverJobReport
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `fromDate` – `{string}` -
             *
             *  - `ToDate` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "getDriverJobReport": {
              url: urlBase + "/DriverJobDetails/getDriverJobReport",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#getDriverJobOpenReport
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "getDriverJobOpenReport": {
              url: urlBase + "/DriverJobDetails/getDriverJobOpenReport",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#getDriverJobOnArea
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `Area` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "getDriverJobOnArea": {
              url: urlBase + "/DriverJobDetails/getDriverJobOnArea",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#getCustomerJob
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "getCustomerJob": {
              url: urlBase + "/DriverJobDetails/getCustomerJob",
              method: "GET",
            },
            
            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#getDriverJobReportByOepenedDate
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `from_date` – `{string}` -
             *
             *  - `to_date` – `{string}` -
             * 
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             "getDriverJobReportByOepenedDate": {
              url: urlBase + "/DriverJobDetails/getDriverJobReportByOepenedDate",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.findById() instead.
            "::findById::CustomerDetails::driverJobDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverJobDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.destroyById() instead.
            "::destroyById::CustomerDetails::driverJobDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverJobDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.updateById() instead.
            "::updateById::CustomerDetails::driverJobDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverJobDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails() instead.
            "::get::CustomerDetails::driverJobDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/driverJobDetails",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.create() instead.
            "::create::CustomerDetails::driverJobDetails": {
              url: urlBase + "/CustomerDetails/:id/driverJobDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.createMany() instead.
            "::createMany::CustomerDetails::driverJobDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/driverJobDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.destroyAll() instead.
            "::delete::CustomerDetails::driverJobDetails": {
              url: urlBase + "/CustomerDetails/:id/driverJobDetails",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.driverJobDetails.count() instead.
            "::count::CustomerDetails::driverJobDetails": {
              url: urlBase + "/CustomerDetails/:id/driverJobDetails/count",
              method: "GET",
            },

            // INTERNAL. Use DriverJobRequest.driverJobDetails() instead.
            "::get::DriverJobRequest::driverJobDetails": {
              url: urlBase + "/DriverJobRequests/:id/driverJobDetails",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#updateOrCreate
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#update
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#destroyById
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#removeById
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverJobDetails#modelName
        * @propertyOf lbServices.DriverJobDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverJobDetails`.
        */
        R.modelName = "DriverJobDetails";


            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#customerDetails
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::DriverJobDetails::customerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.DriverJobDetails.driverJobRequest
     * @header lbServices.DriverJobDetails.driverJobRequest
     * @object
     * @description
     *
     * The object `DriverJobDetails.driverJobRequest` groups methods
     * manipulating `DriverJobRequest` instances related to `DriverJobDetails`.
     *
     * Call {@link lbServices.DriverJobDetails#driverJobRequest DriverJobDetails.driverJobRequest()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails#driverJobRequest
             * @methodOf lbServices.DriverJobDetails
             *
             * @description
             *
             * Queries driverJobRequest of DriverJobDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::get::DriverJobDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails.driverJobRequest#count
             * @methodOf lbServices.DriverJobDetails.driverJobRequest
             *
             * @description
             *
             * Counts driverJobRequest of DriverJobDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.driverJobRequest.count = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::count::DriverJobDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails.driverJobRequest#create
             * @methodOf lbServices.DriverJobDetails.driverJobRequest
             *
             * @description
             *
             * Creates a new instance in driverJobRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest.create = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::create::DriverJobDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails.driverJobRequest#createMany
             * @methodOf lbServices.DriverJobDetails.driverJobRequest
             *
             * @description
             *
             * Creates a new instance in driverJobRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest.createMany = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::createMany::DriverJobDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails.driverJobRequest#destroyAll
             * @methodOf lbServices.DriverJobDetails.driverJobRequest
             *
             * @description
             *
             * Deletes all driverJobRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverJobRequest.destroyAll = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::delete::DriverJobDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails.driverJobRequest#destroyById
             * @methodOf lbServices.DriverJobDetails.driverJobRequest
             *
             * @description
             *
             * Delete a related item by id for driverJobRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.driverJobRequest.destroyById = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::destroyById::DriverJobDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails.driverJobRequest#findById
             * @methodOf lbServices.DriverJobDetails.driverJobRequest
             *
             * @description
             *
             * Find a related item by id for driverJobRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest.findById = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::findById::DriverJobDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverJobDetails.driverJobRequest#updateById
             * @methodOf lbServices.DriverJobDetails.driverJobRequest
             *
             * @description
             *
             * Update a related item by id for driverJobRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for driverJobRequest
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R.driverJobRequest.updateById = function() {
              var TargetResource = $injector.get("DriverJobRequest");
              var action = TargetResource["::updateById::DriverJobDetails::driverJobRequest"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.DriverJobRequest
 * @header lbServices.DriverJobRequest
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverJobRequest` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverJobRequest",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverJobRequests/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverJobRequest.driverJobDetails() instead.
            "prototype$__get__driverJobDetails": {
              url: urlBase + "/DriverJobRequests/:id/driverJobDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverJobRequest.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/DriverJobRequests/:id/driverDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#create
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverJobRequests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#createMany
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverJobRequests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#upsert
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverJobRequests",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#exists
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverJobRequests/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#findById
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverJobRequests/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#find
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverJobRequests",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#findOne
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverJobRequests/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#updateAll
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverJobRequests/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#deleteById
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverJobRequests/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#count
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverJobRequests/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#prototype$updateAttributes
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverJobRequests/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#createChangeStream
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverJobRequests/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#applyDriverJob
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `jobId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "applyDriverJob": {
              url: urlBase + "/DriverJobRequests/applyDriverJob",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#DriverJobStatus
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "DriverJobStatus": {
              url: urlBase + "/DriverJobRequests/DriverJobStatus",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#DriverJobRequestCheck
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `jobId` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "DriverJobRequestCheck": {
              url: urlBase + "/DriverJobRequests/DriverJobRequestCheck",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#DriverJobRequestDataByJobId
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `jobId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             "DriverJobRequestDataByJobId": {
              url: urlBase + "/DriverJobRequests/DriverJobRequestDataByJobId",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.findById() instead.
            "::findById::DriverDetails::driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverJobRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.destroyById() instead.
            "::destroyById::DriverDetails::driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverJobRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.updateById() instead.
            "::updateById::DriverDetails::driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/driverJobRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest() instead.
            "::get::DriverDetails::driverJobRequest": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverJobRequest",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.create() instead.
            "::create::DriverDetails::driverJobRequest": {
              url: urlBase + "/DriverDetails/:id/driverJobRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.createMany() instead.
            "::createMany::DriverDetails::driverJobRequest": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/driverJobRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.destroyAll() instead.
            "::delete::DriverDetails::driverJobRequest": {
              url: urlBase + "/DriverDetails/:id/driverJobRequest",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.driverJobRequest.count() instead.
            "::count::DriverDetails::driverJobRequest": {
              url: urlBase + "/DriverDetails/:id/driverJobRequest/count",
              method: "GET",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.findById() instead.
            "::findById::DriverJobDetails::driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.destroyById() instead.
            "::destroyById::DriverJobDetails::driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.updateById() instead.
            "::updateById::DriverJobDetails::driverJobRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest() instead.
            "::get::DriverJobDetails::driverJobRequest": {
              isArray: true,
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest",
              method: "GET",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.create() instead.
            "::create::DriverJobDetails::driverJobRequest": {
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.createMany() instead.
            "::createMany::DriverJobDetails::driverJobRequest": {
              isArray: true,
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.destroyAll() instead.
            "::delete::DriverJobDetails::driverJobRequest": {
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest",
              method: "DELETE",
            },

            // INTERNAL. Use DriverJobDetails.driverJobRequest.count() instead.
            "::count::DriverJobDetails::driverJobRequest": {
              url: urlBase + "/DriverJobDetails/:id/driverJobRequest/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#updateOrCreate
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobRequest` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#update
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#destroyById
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#removeById
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverJobRequest#modelName
        * @propertyOf lbServices.DriverJobRequest
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverJobRequest`.
        */
        R.modelName = "DriverJobRequest";


            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#driverJobDetails
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Fetches belongsTo relation driverJobDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverJobDetails` object.)
             * </em>
             */
             R.driverJobDetails = function() {
              var TargetResource = $injector.get("DriverJobDetails");
              var action = TargetResource["::get::DriverJobRequest::driverJobDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverJobRequest#driverDetails
             * @methodOf lbServices.DriverJobRequest
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::DriverJobRequest::driverDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.DriverAllocationReport
 * @header lbServices.DriverAllocationReport
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverAllocationReport` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverAllocationReport",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverAllocationReports/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverAllocationReport.bookings() instead.
            "prototype$__get__bookings": {
              url: urlBase + "/DriverAllocationReports/:id/bookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#create
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverAllocationReports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#createMany
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverAllocationReports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#upsert
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverAllocationReports",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#exists
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverAllocationReports/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#findById
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverAllocationReports/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#find
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverAllocationReports",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#findOne
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverAllocationReports/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#updateAll
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverAllocationReports/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#deleteById
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverAllocationReports/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#count
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverAllocationReports/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#prototype$updateAttributes
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverAllocationReports/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#createChangeStream
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverAllocationReports/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#createAllocationHistory
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bookingId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `allocationStatus` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             "createAllocationHistory": {
              url: urlBase + "/DriverAllocationReports/createAllocationHistory",
              method: "POST",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.findById() instead.
            "::findById::Bookings::driverAllocationReport": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/driverAllocationReport/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.destroyById() instead.
            "::destroyById::Bookings::driverAllocationReport": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/driverAllocationReport/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.updateById() instead.
            "::updateById::Bookings::driverAllocationReport": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/driverAllocationReport/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.driverAllocationReport() instead.
            "::get::Bookings::driverAllocationReport": {
              isArray: true,
              url: urlBase + "/Bookings/:id/driverAllocationReport",
              method: "GET",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.create() instead.
            "::create::Bookings::driverAllocationReport": {
              url: urlBase + "/Bookings/:id/driverAllocationReport",
              method: "POST",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.createMany() instead.
            "::createMany::Bookings::driverAllocationReport": {
              isArray: true,
              url: urlBase + "/Bookings/:id/driverAllocationReport",
              method: "POST",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.destroyAll() instead.
            "::delete::Bookings::driverAllocationReport": {
              url: urlBase + "/Bookings/:id/driverAllocationReport",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.driverAllocationReport.count() instead.
            "::count::Bookings::driverAllocationReport": {
              url: urlBase + "/Bookings/:id/driverAllocationReport/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#updateOrCreate
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAllocationReport` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#update
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#destroyById
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#removeById
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverAllocationReport#modelName
        * @propertyOf lbServices.DriverAllocationReport
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverAllocationReport`.
        */
        R.modelName = "DriverAllocationReport";


            /**
             * @ngdoc method
             * @name lbServices.DriverAllocationReport#bookings
             * @methodOf lbServices.DriverAllocationReport
             *
             * @description
             *
             * Fetches belongsTo relation bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::DriverAllocationReport::bookings"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.DriverBlockReport
 * @header lbServices.DriverBlockReport
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverBlockReport` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverBlockReport",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverBlockReports/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverBlockReport.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/DriverBlockReports/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverBlockReport.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/DriverBlockReports/:id/customerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#create
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverBlockReports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#createMany
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverBlockReports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#upsert
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverBlockReports",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#exists
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverBlockReports/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#findById
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverBlockReports/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#find
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverBlockReports",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#findOne
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverBlockReports/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#updateAll
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverBlockReports/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#deleteById
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverBlockReports/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#count
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverBlockReports/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#prototype$updateAttributes
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverBlockReports/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#createChangeStream
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverBlockReports/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#driverBlockForCustomer
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "driverBlockForCustomer": {
              url: urlBase + "/DriverBlockReports/driverBlockForCustomer",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#driverUnblockForCustomer
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             "driverUnblockForCustomer": {
              url: urlBase + "/DriverBlockReports/driverUnblockForCustomer",
              method: "POST",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#updateOrCreate
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverBlockReport` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#update
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#destroyById
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#removeById
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverBlockReport#modelName
        * @propertyOf lbServices.DriverBlockReport
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverBlockReport`.
        */
        R.modelName = "DriverBlockReport";


            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#driverDetails
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::DriverBlockReport::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverBlockReport#customerDetails
             * @methodOf lbServices.DriverBlockReport
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::DriverBlockReport::customerDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.News
 * @header lbServices.News
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `News` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "News",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/News/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use News.cities() instead.
            "prototype$__get__cities": {
              url: urlBase + "/News/:id/cities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#create
             * @methodOf lbServices.News
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/News",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#createMany
             * @methodOf lbServices.News
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/News",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#upsert
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/News",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#exists
             * @methodOf lbServices.News
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/News/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#findById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/News/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#find
             * @methodOf lbServices.News
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/News",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#findOne
             * @methodOf lbServices.News
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/News/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#updateAll
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/News/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#deleteById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/News/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#count
             * @methodOf lbServices.News
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/News/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#prototype$updateAttributes
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/News/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#createChangeStream
             * @methodOf lbServices.News
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/News/change-stream",
              method: "POST",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.News#updateOrCreate
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.News#update
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.News#destroyById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.News#removeById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.News#modelName
        * @propertyOf lbServices.News
        * @description
        * The name of the model represented by this $resource,
        * i.e. `News`.
        */
        R.modelName = "News";


            /**
             * @ngdoc method
             * @name lbServices.News#cities
             * @methodOf lbServices.News
             *
             * @description
             *
             * Fetches belongsTo relation cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::get::News::cities"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.CarType
 * @header lbServices.CarType
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CarType` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "CarType",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/CarTypes/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use CarType.carDetails.findById() instead.
            "prototype$__findById__carDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarTypes/:id/carDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use CarType.carDetails.destroyById() instead.
            "prototype$__destroyById__carDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarTypes/:id/carDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CarType.carDetails.updateById() instead.
            "prototype$__updateById__carDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarTypes/:id/carDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CarType.carDetails() instead.
            "prototype$__get__carDetails": {
              isArray: true,
              url: urlBase + "/CarTypes/:id/carDetails",
              method: "GET",
            },

            // INTERNAL. Use CarType.carDetails.create() instead.
            "prototype$__create__carDetails": {
              url: urlBase + "/CarTypes/:id/carDetails",
              method: "POST",
            },

            // INTERNAL. Use CarType.carDetails.destroyAll() instead.
            "prototype$__delete__carDetails": {
              url: urlBase + "/CarTypes/:id/carDetails",
              method: "DELETE",
            },

            // INTERNAL. Use CarType.carDetails.count() instead.
            "prototype$__count__carDetails": {
              url: urlBase + "/CarTypes/:id/carDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#create
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/CarTypes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#createMany
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/CarTypes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#upsert
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/CarTypes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#exists
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/CarTypes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#findById
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/CarTypes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#find
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/CarTypes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#findOne
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/CarTypes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#updateAll
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/CarTypes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#deleteById
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/CarTypes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#count
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/CarTypes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#prototype$updateAttributes
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/CarTypes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarType#createChangeStream
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/CarTypes/change-stream",
              method: "POST",
            },

            // INTERNAL. Use CarDetails.carType() instead.
            "::get::CarDetails::carType": {
              url: urlBase + "/CarDetails/:id/carType",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.CarType#updateOrCreate
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CarType#update
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CarType#destroyById
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CarType#removeById
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CarType#modelName
        * @propertyOf lbServices.CarType
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CarType`.
        */
        R.modelName = "CarType";

    /**
     * @ngdoc object
     * @name lbServices.CarType.carDetails
     * @header lbServices.CarType.carDetails
     * @object
     * @description
     *
     * The object `CarType.carDetails` groups methods
     * manipulating `CarDetails` instances related to `CarType`.
     *
     * Call {@link lbServices.CarType#carDetails CarType.carDetails()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CarType#carDetails
             * @methodOf lbServices.CarType
             *
             * @description
             *
             * Queries carDetails of CarType.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             R.carDetails = function() {
              var TargetResource = $injector.get("CarDetails");
              var action = TargetResource["::get::CarType::carDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarType.carDetails#count
             * @methodOf lbServices.CarType.carDetails
             *
             * @description
             *
             * Counts carDetails of CarType.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.carDetails.count = function() {
              var TargetResource = $injector.get("CarDetails");
              var action = TargetResource["::count::CarType::carDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarType.carDetails#create
             * @methodOf lbServices.CarType.carDetails
             *
             * @description
             *
             * Creates a new instance in carDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             R.carDetails.create = function() {
              var TargetResource = $injector.get("CarDetails");
              var action = TargetResource["::create::CarType::carDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarType.carDetails#createMany
             * @methodOf lbServices.CarType.carDetails
             *
             * @description
             *
             * Creates a new instance in carDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             R.carDetails.createMany = function() {
              var TargetResource = $injector.get("CarDetails");
              var action = TargetResource["::createMany::CarType::carDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarType.carDetails#destroyAll
             * @methodOf lbServices.CarType.carDetails
             *
             * @description
             *
             * Deletes all carDetails of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.carDetails.destroyAll = function() {
              var TargetResource = $injector.get("CarDetails");
              var action = TargetResource["::delete::CarType::carDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarType.carDetails#destroyById
             * @methodOf lbServices.CarType.carDetails
             *
             * @description
             *
             * Delete a related item by id for carDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for carDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.carDetails.destroyById = function() {
              var TargetResource = $injector.get("CarDetails");
              var action = TargetResource["::destroyById::CarType::carDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarType.carDetails#findById
             * @methodOf lbServices.CarType.carDetails
             *
             * @description
             *
             * Find a related item by id for carDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for carDetails
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             R.carDetails.findById = function() {
              var TargetResource = $injector.get("CarDetails");
              var action = TargetResource["::findById::CarType::carDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarType.carDetails#updateById
             * @methodOf lbServices.CarType.carDetails
             *
             * @description
             *
             * Update a related item by id for carDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for carDetails
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             R.carDetails.updateById = function() {
              var TargetResource = $injector.get("CarDetails");
              var action = TargetResource["::updateById::CarType::carDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.CarDetails
 * @header lbServices.CarDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CarDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "CarDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/CarDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use CarDetails.carType() instead.
            "prototype$__get__carType": {
              url: urlBase + "/CarDetails/:id/carType",
              method: "GET",
            },

            // INTERNAL. Use CarDetails.carOwner.findById() instead.
            "prototype$__findById__carOwner": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarDetails/:id/carOwner/:fk",
              method: "GET",
            },

            // INTERNAL. Use CarDetails.carOwner.destroyById() instead.
            "prototype$__destroyById__carOwner": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarDetails/:id/carOwner/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CarDetails.carOwner.updateById() instead.
            "prototype$__updateById__carOwner": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarDetails/:id/carOwner/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CarDetails.carOwner() instead.
            "prototype$__get__carOwner": {
              isArray: true,
              url: urlBase + "/CarDetails/:id/carOwner",
              method: "GET",
            },

            // INTERNAL. Use CarDetails.carOwner.create() instead.
            "prototype$__create__carOwner": {
              url: urlBase + "/CarDetails/:id/carOwner",
              method: "POST",
            },

            // INTERNAL. Use CarDetails.carOwner.destroyAll() instead.
            "prototype$__delete__carOwner": {
              url: urlBase + "/CarDetails/:id/carOwner",
              method: "DELETE",
            },

            // INTERNAL. Use CarDetails.carOwner.count() instead.
            "prototype$__count__carOwner": {
              url: urlBase + "/CarDetails/:id/carOwner/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#create
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/CarDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#createMany
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/CarDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#upsert
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/CarDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#exists
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/CarDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#findById
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/CarDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#find
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/CarDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#findOne
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/CarDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#updateAll
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/CarDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#deleteById
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/CarDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#count
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/CarDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#prototype$updateAttributes
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/CarDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#createChangeStream
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/CarDetails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#driverCarDetails
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `carName` – `{string}` -
             *
             *  - `carVariant` – `{string}` -
             *
             *  - `carType` – `{string}` -
             *
             *  - `carCategory` – `{string}` -
             *
             *  - `carInsuranceCompany` – `{string}` -
             *
             *  - `engineNo` – `{string}` -
             *
             *  - `chassisNo` – `{string}` -
             *
             *  - `carRegistartionNumber` – `{string}` -
             *
             *  - `manufacturingDate` – `{string}` -
             *
             *  - `vehiclePassingDate` – `{string}` -
             *
             *  - `rcInsuranceCopyDocumented` – `{string}` -
             *
             *  - `pvDate` – `{string}` -
             *
             *  - `permitExpiryDate` – `{string}` -
             *
             *  - `kmCovered` – `{string}` -
             *
             *  - `remark` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             "driverCarDetails": {
              url: urlBase + "/CarDetails/driverCarDetails",
              method: "GET",
            },

            // INTERNAL. Use CarType.carDetails.findById() instead.
            "::findById::CarType::carDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarTypes/:id/carDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use CarType.carDetails.destroyById() instead.
            "::destroyById::CarType::carDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarTypes/:id/carDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CarType.carDetails.updateById() instead.
            "::updateById::CarType::carDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarTypes/:id/carDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CarType.carDetails() instead.
            "::get::CarType::carDetails": {
              isArray: true,
              url: urlBase + "/CarTypes/:id/carDetails",
              method: "GET",
            },

            // INTERNAL. Use CarType.carDetails.create() instead.
            "::create::CarType::carDetails": {
              url: urlBase + "/CarTypes/:id/carDetails",
              method: "POST",
            },

            // INTERNAL. Use CarType.carDetails.createMany() instead.
            "::createMany::CarType::carDetails": {
              isArray: true,
              url: urlBase + "/CarTypes/:id/carDetails",
              method: "POST",
            },

            // INTERNAL. Use CarType.carDetails.destroyAll() instead.
            "::delete::CarType::carDetails": {
              url: urlBase + "/CarTypes/:id/carDetails",
              method: "DELETE",
            },

            // INTERNAL. Use CarType.carDetails.count() instead.
            "::count::CarType::carDetails": {
              url: urlBase + "/CarTypes/:id/carDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.CarDetails#updateOrCreate
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#update
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#destroyById
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CarDetails#removeById
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CarDetails#modelName
        * @propertyOf lbServices.CarDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CarDetails`.
        */
        R.modelName = "CarDetails";


            /**
             * @ngdoc method
             * @name lbServices.CarDetails#carType
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Fetches belongsTo relation carType.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarType` object.)
             * </em>
             */
             R.carType = function() {
              var TargetResource = $injector.get("CarType");
              var action = TargetResource["::get::CarDetails::carType"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.CarDetails.carOwner
     * @header lbServices.CarDetails.carOwner
     * @object
     * @description
     *
     * The object `CarDetails.carOwner` groups methods
     * manipulating `CarOwner` instances related to `CarDetails`.
     *
     * Call {@link lbServices.CarDetails#carOwner CarDetails.carOwner()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CarDetails#carOwner
             * @methodOf lbServices.CarDetails
             *
             * @description
             *
             * Queries carOwner of CarDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             R.carOwner = function() {
              var TargetResource = $injector.get("CarOwner");
              var action = TargetResource["::get::CarDetails::carOwner"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarDetails.carOwner#count
             * @methodOf lbServices.CarDetails.carOwner
             *
             * @description
             *
             * Counts carOwner of CarDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.carOwner.count = function() {
              var TargetResource = $injector.get("CarOwner");
              var action = TargetResource["::count::CarDetails::carOwner"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarDetails.carOwner#create
             * @methodOf lbServices.CarDetails.carOwner
             *
             * @description
             *
             * Creates a new instance in carOwner of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             R.carOwner.create = function() {
              var TargetResource = $injector.get("CarOwner");
              var action = TargetResource["::create::CarDetails::carOwner"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarDetails.carOwner#createMany
             * @methodOf lbServices.CarDetails.carOwner
             *
             * @description
             *
             * Creates a new instance in carOwner of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             R.carOwner.createMany = function() {
              var TargetResource = $injector.get("CarOwner");
              var action = TargetResource["::createMany::CarDetails::carOwner"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarDetails.carOwner#destroyAll
             * @methodOf lbServices.CarDetails.carOwner
             *
             * @description
             *
             * Deletes all carOwner of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.carOwner.destroyAll = function() {
              var TargetResource = $injector.get("CarOwner");
              var action = TargetResource["::delete::CarDetails::carOwner"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarDetails.carOwner#destroyById
             * @methodOf lbServices.CarDetails.carOwner
             *
             * @description
             *
             * Delete a related item by id for carOwner.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for carOwner
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.carOwner.destroyById = function() {
              var TargetResource = $injector.get("CarOwner");
              var action = TargetResource["::destroyById::CarDetails::carOwner"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarDetails.carOwner#findById
             * @methodOf lbServices.CarDetails.carOwner
             *
             * @description
             *
             * Find a related item by id for carOwner.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for carOwner
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             R.carOwner.findById = function() {
              var TargetResource = $injector.get("CarOwner");
              var action = TargetResource["::findById::CarDetails::carOwner"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.CarDetails.carOwner#updateById
             * @methodOf lbServices.CarDetails.carOwner
             *
             * @description
             *
             * Update a related item by id for carOwner.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for carOwner
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             R.carOwner.updateById = function() {
              var TargetResource = $injector.get("CarOwner");
              var action = TargetResource["::updateById::CarDetails::carOwner"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.CarOwner
 * @header lbServices.CarOwner
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CarOwner` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "CarOwner",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/CarOwners/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use CarOwner.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/CarOwners/:id/conUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#create
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/CarOwners",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#createMany
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/CarOwners",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#upsert
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/CarOwners",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#exists
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/CarOwners/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#findById
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/CarOwners/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#find
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/CarOwners",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#findOne
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/CarOwners/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#updateAll
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/CarOwners/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#deleteById
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/CarOwners/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#count
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/CarOwners/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#prototype$updateAttributes
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/CarOwners/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#createChangeStream
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/CarOwners/change-stream",
              method: "POST",
            },

            // INTERNAL. Use CarDetails.carOwner.findById() instead.
            "::findById::CarDetails::carOwner": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarDetails/:id/carOwner/:fk",
              method: "GET",
            },

            // INTERNAL. Use CarDetails.carOwner.destroyById() instead.
            "::destroyById::CarDetails::carOwner": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarDetails/:id/carOwner/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CarDetails.carOwner.updateById() instead.
            "::updateById::CarDetails::carOwner": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CarDetails/:id/carOwner/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CarDetails.carOwner() instead.
            "::get::CarDetails::carOwner": {
              isArray: true,
              url: urlBase + "/CarDetails/:id/carOwner",
              method: "GET",
            },

            // INTERNAL. Use CarDetails.carOwner.create() instead.
            "::create::CarDetails::carOwner": {
              url: urlBase + "/CarDetails/:id/carOwner",
              method: "POST",
            },

            // INTERNAL. Use CarDetails.carOwner.createMany() instead.
            "::createMany::CarDetails::carOwner": {
              isArray: true,
              url: urlBase + "/CarDetails/:id/carOwner",
              method: "POST",
            },

            // INTERNAL. Use CarDetails.carOwner.destroyAll() instead.
            "::delete::CarDetails::carOwner": {
              url: urlBase + "/CarDetails/:id/carOwner",
              method: "DELETE",
            },

            // INTERNAL. Use CarDetails.carOwner.count() instead.
            "::count::CarDetails::carOwner": {
              url: urlBase + "/CarDetails/:id/carOwner/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.CarOwner#updateOrCreate
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CarOwner` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#update
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#destroyById
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CarOwner#removeById
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CarOwner#modelName
        * @propertyOf lbServices.CarOwner
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CarOwner`.
        */
        R.modelName = "CarOwner";


            /**
             * @ngdoc method
             * @name lbServices.CarOwner#conUsers
             * @methodOf lbServices.CarOwner
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::CarOwner::conUsers"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.States
 * @header lbServices.States
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `States` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "States",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/States/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use States.cities.findById() instead.
            "prototype$__findById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use States.cities.destroyById() instead.
            "prototype$__destroyById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use States.cities.updateById() instead.
            "prototype$__updateById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use States.cities() instead.
            "prototype$__get__cities": {
              isArray: true,
              url: urlBase + "/States/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use States.cities.create() instead.
            "prototype$__create__cities": {
              url: urlBase + "/States/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use States.cities.destroyAll() instead.
            "prototype$__delete__cities": {
              url: urlBase + "/States/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use States.cities.count() instead.
            "prototype$__count__cities": {
              url: urlBase + "/States/:id/cities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#create
             * @methodOf lbServices.States
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/States",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#createMany
             * @methodOf lbServices.States
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/States",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#upsert
             * @methodOf lbServices.States
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/States",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#exists
             * @methodOf lbServices.States
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/States/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#findById
             * @methodOf lbServices.States
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/States/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#find
             * @methodOf lbServices.States
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/States",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#findOne
             * @methodOf lbServices.States
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/States/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#updateAll
             * @methodOf lbServices.States
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/States/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#deleteById
             * @methodOf lbServices.States
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/States/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#count
             * @methodOf lbServices.States
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/States/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#prototype$updateAttributes
             * @methodOf lbServices.States
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/States/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.States#createChangeStream
             * @methodOf lbServices.States
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/States/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Cities.states() instead.
            "::get::Cities::states": {
              url: urlBase + "/Cities/:id/states",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.States#updateOrCreate
             * @methodOf lbServices.States
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `States` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.States#update
             * @methodOf lbServices.States
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.States#destroyById
             * @methodOf lbServices.States
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.States#removeById
             * @methodOf lbServices.States
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.States#modelName
        * @propertyOf lbServices.States
        * @description
        * The name of the model represented by this $resource,
        * i.e. `States`.
        */
        R.modelName = "States";

    /**
     * @ngdoc object
     * @name lbServices.States.cities
     * @header lbServices.States.cities
     * @object
     * @description
     *
     * The object `States.cities` groups methods
     * manipulating `Cities` instances related to `States`.
     *
     * Call {@link lbServices.States#cities States.cities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.States#cities
             * @methodOf lbServices.States
             *
             * @description
             *
             * Queries cities of States.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::get::States::cities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.States.cities#count
             * @methodOf lbServices.States.cities
             *
             * @description
             *
             * Counts cities of States.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.cities.count = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::count::States::cities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.States.cities#create
             * @methodOf lbServices.States.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities.create = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::create::States::cities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.States.cities#createMany
             * @methodOf lbServices.States.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities.createMany = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::createMany::States::cities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.States.cities#destroyAll
             * @methodOf lbServices.States.cities
             *
             * @description
             *
             * Deletes all cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.cities.destroyAll = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::delete::States::cities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.States.cities#destroyById
             * @methodOf lbServices.States.cities
             *
             * @description
             *
             * Delete a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.cities.destroyById = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::destroyById::States::cities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.States.cities#findById
             * @methodOf lbServices.States.cities
             *
             * @description
             *
             * Find a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities.findById = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::findById::States::cities"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.States.cities#updateById
             * @methodOf lbServices.States.cities
             *
             * @description
             *
             * Update a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Cities` object.)
             * </em>
             */
             R.cities.updateById = function() {
              var TargetResource = $injector.get("Cities");
              var action = TargetResource["::updateById::States::cities"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company2DriverDetails
 * @header lbServices.Company2DriverDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company2DriverDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company2DriverDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company2DriverDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company2DriverDetails.company2CustomerDetails() instead.
            "prototype$__get__company2CustomerDetails": {
              url: urlBase + "/Company2DriverDetails/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2DriverDetails.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/Company2DriverDetails/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2DriverDetails.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/Company2DriverDetails/:id/customerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#create
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company2DriverDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#createMany
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company2DriverDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#upsert
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company2DriverDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#exists
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company2DriverDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#findById
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company2DriverDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#find
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company2DriverDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#findOne
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company2DriverDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#updateAll
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company2DriverDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#deleteById
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company2DriverDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#count
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company2DriverDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#prototype$updateAttributes
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company2DriverDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#createChangeStream
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company2DriverDetails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#assignDirector
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `company2CustomerId` – `{string}` -
             *
             *  - `customerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "assignDirector": {
              url: urlBase + "/Company2DriverDetails/assignDirector",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#assignDriverToBillingCustomer
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `driverCycle` – `{string}` -
             *
             *  - `dutyHours` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `reportingDate` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "assignDriverToBillingCustomer": {
              url: urlBase + "/Company2DriverDetails/assignDriverToBillingCustomer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#getAppointedDriverDetails
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `company2CustomerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "getAppointedDriverDetails": {
              url: urlBase + "/Company2DriverDetails/getAppointedDriverDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#getAppointedCustomerDetails
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "getAppointedCustomerDetails": {
              url: urlBase + "/Company2DriverDetails/getAppointedCustomerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#validateAppointedDriver
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "validateAppointedDriver": {
              url: urlBase + "/Company2DriverDetails/validateAppointedDriver",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#updateAppointDriverDetails
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `dutyHours` – `{string}` -
             *
             *  - `weeklyOff` – `{string}` -
             *
             *  - `otRate` – `{string}` -
             *
             *  - `nsaRate` – `{string}` -
             *
             *  - `edRate` – `{string}` -
             *
             *  - `monthlySalary` – `{string}` -
             *
             *  - `driverCycle` – `{string}` -
             *
             *  - `reportingDate` – `{string}` -
             *
             *  - `osaRate` – `{string}` -
             *
             *  - `updatedBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "updateAppointDriverDetails": {
              url: urlBase + "/Company2DriverDetails/updateAppointDriverDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#getBillingDriverHistoryDetails
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `company2CustomerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "getBillingDriverHistoryDetails": {
              url: urlBase + "/Company2DriverDetails/getBillingDriverHistoryDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#removeAppointDriver
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `dol` – `{string}` -
             *
             *  - `reason` – `{string}` -
             *
             *  - `updatedBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "removeAppointDriver": {
              url: urlBase + "/Company2DriverDetails/removeAppointDriver",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#removeDriver
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `customerId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             *  - `dol` – `{string}` -
             *
             *  - `reason` – `{string}` -
             *
             *  - `updatedBy` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             "removeDriver": {
              url: urlBase + "/Company2DriverDetails/removeDriver",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.findById() instead.
            "::findById::CustomerDetails::company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.destroyById() instead.
            "::destroyById::CustomerDetails::company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.updateById() instead.
            "::updateById::CustomerDetails::company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails() instead.
            "::get::CustomerDetails::company2DriverDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.create() instead.
            "::create::CustomerDetails::company2DriverDetails": {
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.createMany() instead.
            "::createMany::CustomerDetails::company2DriverDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.destroyAll() instead.
            "::delete::CustomerDetails::company2DriverDetails": {
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.company2DriverDetails.count() instead.
            "::count::CustomerDetails::company2DriverDetails": {
              url: urlBase + "/CustomerDetails/:id/company2DriverDetails/count",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.findById() instead.
            "::findById::DriverDetails::company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2DriverDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.destroyById() instead.
            "::destroyById::DriverDetails::company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2DriverDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.updateById() instead.
            "::updateById::DriverDetails::company2DriverDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/company2DriverDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails() instead.
            "::get::DriverDetails::company2DriverDetails": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/company2DriverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.create() instead.
            "::create::DriverDetails::company2DriverDetails": {
              url: urlBase + "/DriverDetails/:id/company2DriverDetails",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.createMany() instead.
            "::createMany::DriverDetails::company2DriverDetails": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/company2DriverDetails",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.destroyAll() instead.
            "::delete::DriverDetails::company2DriverDetails": {
              url: urlBase + "/DriverDetails/:id/company2DriverDetails",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.company2DriverDetails.count() instead.
            "::count::DriverDetails::company2DriverDetails": {
              url: urlBase + "/DriverDetails/:id/company2DriverDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#updateOrCreate
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2DriverDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#update
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#destroyById
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#removeById
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company2DriverDetails#modelName
        * @propertyOf lbServices.Company2DriverDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company2DriverDetails`.
        */
        R.modelName = "Company2DriverDetails";


            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#company2CustomerDetails
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Fetches belongsTo relation company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::get::Company2DriverDetails::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#driverDetails
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::Company2DriverDetails::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2DriverDetails#customerDetails
             * @methodOf lbServices.Company2DriverDetails
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::Company2DriverDetails::customerDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);


/**
 * @ngdoc object
 * @name lbServices.LocalBookings
 * @header lbServices.LocalBookings
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LocalBookings` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "LocalBoundries",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/LocalBoundries/:id",
      { 'id': '@id' },
      {

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#create
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBoundries` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/LocalBoundries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#createMany
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBoundries` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/LocalBoundries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#upsert
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBoundries` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/LocalBoundries",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#exists
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/LocalBoundries/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#findById
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBoundries` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/LocalBoundries/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#find
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBoundries` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/LocalBoundries",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#findOne
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBoundries` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/LocalBoundries/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#updateAll
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/LocalBoundries/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#deleteById
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/LocalBoundries/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#count
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/LocalBoundries/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#prototype$updateAttributes
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBoundries` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/LocalBoundries/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#createChangeStream
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/LocalBoundries/change-stream",
              method: "POST",
            }

           

    
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.LocalBookings#updateOrCreate
             * @methodOf lbServices.LocalBookings
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocalBoundries` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#update
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#destroyById
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#removeById
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LocalBoundries#modelName
        * @propertyOf lbServices.LocalBoundries
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LocalBoundries`.
        */
        R.modelName = "LocalBoundries";


            /**
             * @ngdoc method
             * @name lbServices.LocalBoundries#bookings
             * @methodOf lbServices.LocalBoundries
             *
             * @description
             *
             * Fetches belongsTo relation bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::LocalBoundries::bookings"];
              return action.apply(R, arguments);
            };


            return R;
          }]);


/**
 * @ngdoc object
 * @name lbServices.DriverAttendance
 * @header lbServices.DriverAttendance
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DriverAttendance` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "DriverAttendance",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/DriverAttendances/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use DriverAttendance.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/DriverAttendances/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverAttendance.company2CustomerDetails() instead.
            "prototype$__get__company2CustomerDetails": {
              url: urlBase + "/DriverAttendances/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use DriverAttendance.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/DriverAttendances/:id/customerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#create
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/DriverAttendances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#createMany
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/DriverAttendances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#upsert
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/DriverAttendances",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#exists
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/DriverAttendances/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#findById
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/DriverAttendances/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#find
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/DriverAttendances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#findOne
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/DriverAttendances/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#updateAll
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/DriverAttendances/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#deleteById
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/DriverAttendances/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#count
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/DriverAttendances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#prototype$updateAttributes
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/DriverAttendances/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#createChangeStream
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/DriverAttendances/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#addDriverAttendance
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `company2CustomerId` – `{string}` -
             *
             *  - `dutyType` – `{string}` -
             *
             *  - `inDate` – `{string}` -
             *
             *  - `inTime` – `{string}` -
             *
             *  - `outDate` – `{string}` -
             *
             *  - `outTime` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `city` – `{string}` -
             *
             *  - `customerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "addDriverAttendance": {
              url: urlBase + "/DriverAttendances/addDriverAttendance",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#driverOnDuty
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             *  - `company2CustomerId` – `{string}` -
             *
             *  - `dutyType` – `{string}` -
             *
             *  - `inDate` – `{string}` -
             *
             *  - `inTime` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `customerId` – `{string}` -
             *
             *  - `city` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "driverOnDuty": {
              url: urlBase + "/DriverAttendances/driverOnDuty",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#driverAttendanceStatus
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "driverAttendanceStatus": {
              url: urlBase + "/DriverAttendances/driverAttendanceStatus",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#verifyDriverExist
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             "verifyDriverExist": {
              url: urlBase + "/DriverAttendances/verifyDriverExist",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.findById() instead.
            "::findById::CustomerDetails::driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverAttendance/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.destroyById() instead.
            "::destroyById::CustomerDetails::driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverAttendance/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.updateById() instead.
            "::updateById::CustomerDetails::driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/driverAttendance/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance() instead.
            "::get::CustomerDetails::driverAttendance": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/driverAttendance",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.create() instead.
            "::create::CustomerDetails::driverAttendance": {
              url: urlBase + "/CustomerDetails/:id/driverAttendance",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.createMany() instead.
            "::createMany::CustomerDetails::driverAttendance": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/driverAttendance",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.destroyAll() instead.
            "::delete::CustomerDetails::driverAttendance": {
              url: urlBase + "/CustomerDetails/:id/driverAttendance",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.driverAttendance.count() instead.
            "::count::CustomerDetails::driverAttendance": {
              url: urlBase + "/CustomerDetails/:id/driverAttendance/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.findById() instead.
            "::findById::Company2CustomerDetails::driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.destroyById() instead.
            "::destroyById::Company2CustomerDetails::driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.updateById() instead.
            "::updateById::Company2CustomerDetails::driverAttendance": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance() instead.
            "::get::Company2CustomerDetails::driverAttendance": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.create() instead.
            "::create::Company2CustomerDetails::driverAttendance": {
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.createMany() instead.
            "::createMany::Company2CustomerDetails::driverAttendance": {
              isArray: true,
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.destroyAll() instead.
            "::delete::Company2CustomerDetails::driverAttendance": {
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerDetails.driverAttendance.count() instead.
            "::count::Company2CustomerDetails::driverAttendance": {
              url: urlBase + "/Company2CustomerDetails/:id/driverAttendance/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#updateOrCreate
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverAttendance` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#update
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#destroyById
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#removeById
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DriverAttendance#modelName
        * @propertyOf lbServices.DriverAttendance
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DriverAttendance`.
        */
        R.modelName = "DriverAttendance";


            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#driverDetails
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::DriverAttendance::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#company2CustomerDetails
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Fetches belongsTo relation company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::get::DriverAttendance::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.DriverAttendance#customerDetails
             * @methodOf lbServices.DriverAttendance
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::DriverAttendance::customerDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.AppointedDriverHistoricalData
 * @header lbServices.AppointedDriverHistoricalData
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AppointedDriverHistoricalData` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "AppointedDriverHistoricalData",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/AppointedDriverHistoricalData/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use AppointedDriverHistoricalData.company2CustomerDetails() instead.
            "prototype$__get__company2CustomerDetails": {
              url: urlBase + "/AppointedDriverHistoricalData/:id/company2CustomerDetails",
              method: "GET",
            },

            // INTERNAL. Use AppointedDriverHistoricalData.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/AppointedDriverHistoricalData/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use AppointedDriverHistoricalData.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/AppointedDriverHistoricalData/:id/customerDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#create
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppointedDriverHistoricalData` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/AppointedDriverHistoricalData",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#createMany
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppointedDriverHistoricalData` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/AppointedDriverHistoricalData",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#upsert
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppointedDriverHistoricalData` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/AppointedDriverHistoricalData",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#exists
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/AppointedDriverHistoricalData/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#findById
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppointedDriverHistoricalData` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/AppointedDriverHistoricalData/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#find
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppointedDriverHistoricalData` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/AppointedDriverHistoricalData",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#findOne
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppointedDriverHistoricalData` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/AppointedDriverHistoricalData/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#updateAll
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/AppointedDriverHistoricalData/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#deleteById
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/AppointedDriverHistoricalData/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#count
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/AppointedDriverHistoricalData/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#prototype$updateAttributes
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppointedDriverHistoricalData` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/AppointedDriverHistoricalData/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#createChangeStream
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/AppointedDriverHistoricalData/change-stream",
              method: "POST",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#updateOrCreate
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppointedDriverHistoricalData` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#update
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#destroyById
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#removeById
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AppointedDriverHistoricalData#modelName
        * @propertyOf lbServices.AppointedDriverHistoricalData
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AppointedDriverHistoricalData`.
        */
        R.modelName = "AppointedDriverHistoricalData";


            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#company2CustomerDetails
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Fetches belongsTo relation company2CustomerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerDetails` object.)
             * </em>
             */
             R.company2CustomerDetails = function() {
              var TargetResource = $injector.get("Company2CustomerDetails");
              var action = TargetResource["::get::AppointedDriverHistoricalData::company2CustomerDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#driverDetails
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::AppointedDriverHistoricalData::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.AppointedDriverHistoricalData#customerDetails
             * @methodOf lbServices.AppointedDriverHistoricalData
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::AppointedDriverHistoricalData::customerDetails"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.BookingDetails
 * @header lbServices.BookingDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BookingDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "BookingDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/BookingDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use BookingDetails.bookings() instead.
            "prototype$__get__bookings": {
              url: urlBase + "/BookingDetails/:id/bookings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#create
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/BookingDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#createMany
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/BookingDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#upsert
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/BookingDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#exists
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/BookingDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#findById
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/BookingDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#find
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/BookingDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#findOne
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/BookingDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#updateAll
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/BookingDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#deleteById
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/BookingDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#count
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/BookingDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#prototype$updateAttributes
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/BookingDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#createChangeStream
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/BookingDetails/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingDetails.findById() instead.
            "::findById::Bookings::bookingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingDetails.destroyById() instead.
            "::destroyById::Bookings::bookingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingDetails.updateById() instead.
            "::updateById::Bookings::bookingDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bookings/:id/bookingDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bookings.bookingDetails() instead.
            "::get::Bookings::bookingDetails": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingDetails",
              method: "GET",
            },

            // INTERNAL. Use Bookings.bookingDetails.create() instead.
            "::create::Bookings::bookingDetails": {
              url: urlBase + "/Bookings/:id/bookingDetails",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingDetails.createMany() instead.
            "::createMany::Bookings::bookingDetails": {
              isArray: true,
              url: urlBase + "/Bookings/:id/bookingDetails",
              method: "POST",
            },

            // INTERNAL. Use Bookings.bookingDetails.destroyAll() instead.
            "::delete::Bookings::bookingDetails": {
              url: urlBase + "/Bookings/:id/bookingDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Bookings.bookingDetails.count() instead.
            "::count::Bookings::bookingDetails": {
              url: urlBase + "/Bookings/:id/bookingDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#updateOrCreate
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BookingDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#update
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#destroyById
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#removeById
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BookingDetails#modelName
        * @propertyOf lbServices.BookingDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BookingDetails`.
        */
        R.modelName = "BookingDetails";


            /**
             * @ngdoc method
             * @name lbServices.BookingDetails#bookings
             * @methodOf lbServices.BookingDetails
             *
             * @description
             *
             * Fetches belongsTo relation bookings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bookings` object.)
             * </em>
             */
             R.bookings = function() {
              var TargetResource = $injector.get("Bookings");
              var action = TargetResource["::get::BookingDetails::bookings"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.OnlineTest
 * @header lbServices.OnlineTest
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `OnlineTest` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "OnlineTest",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/OnlineTests/:id",
      { 'id': '@id' },
      {

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#create
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/OnlineTests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#createMany
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/OnlineTests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#upsert
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/OnlineTests",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#exists
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/OnlineTests/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#findById
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/OnlineTests/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#find
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/OnlineTests",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#findOne
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/OnlineTests/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#updateAll
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/OnlineTests/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#deleteById
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/OnlineTests/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#count
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/OnlineTests/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#prototype$updateAttributes
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/OnlineTests/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#createChangeStream
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/OnlineTests/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#calculateTestScore
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `questionId` – `{string}` -
             *
             *  - `answerId` – `{string}` -
             *
             *  - `driverId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             "calculateTestScore": {
              url: urlBase + "/OnlineTests/calculateTestScore",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#updateOrCreate
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OnlineTest` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#update
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#destroyById
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.OnlineTest#removeById
             * @methodOf lbServices.OnlineTest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.OnlineTest#modelName
        * @propertyOf lbServices.OnlineTest
        * @description
        * The name of the model represented by this $resource,
        * i.e. `OnlineTest`.
        */
        R.modelName = "OnlineTest";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.OtherJobsDetails
 * @header lbServices.OtherJobsDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `OtherJobsDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "OtherJobsDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/OtherJobsDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use OtherJobsDetails.customerDetails() instead.
            "prototype$__get__customerDetails": {
              url: urlBase + "/OtherJobsDetails/:id/customerDetails",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.findById() instead.
            "prototype$__findById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.destroyById() instead.
            "prototype$__destroyById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.updateById() instead.
            "prototype$__updateById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest() instead.
            "prototype$__get__otherJobsRequest": {
              isArray: true,
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.create() instead.
            "prototype$__create__otherJobsRequest": {
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.destroyAll() instead.
            "prototype$__delete__otherJobsRequest": {
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest",
              method: "DELETE",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.count() instead.
            "prototype$__count__otherJobsRequest": {
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#create
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/OtherJobsDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#createMany
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/OtherJobsDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#upsert
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/OtherJobsDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#exists
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/OtherJobsDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#findById
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/OtherJobsDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#find
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/OtherJobsDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#findOne
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/OtherJobsDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#updateAll
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/OtherJobsDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#deleteById
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/OtherJobsDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#count
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/OtherJobsDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#prototype$updateAttributes
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/OtherJobsDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#createChangeStream
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/OtherJobsDetails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#createNewOtherJob
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `alternateNumber` – `{string=}` -
             *
             *  - `jobReportingAddress` – `{string}` -
             *
             *  - `designation` – `{string}` -
             *
             *  - `jobProfile` – `{string}` -
             *
             *  - `dutyTime` – `{string}` -
             *
             *  - `age` – `{string}` -
             *
             *  - `education` – `{string}` -
             *
             *  - `experience` – `{string}` -
             *
             *  - `salaryRange` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             *  - `status` – `{string}` -
             *
             *  - `customerId` – `{string}` -
             *
             *  - `weeklyOff` – `{string}` -
             *
             *  - `createdBy` – `{string}` -
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "createNewOtherJob": {
              url: urlBase + "/OtherJobsDetails/createNewOtherJob",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#getOtherJobOpenReport
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             "getOtherJobOpenReport": {
              url: urlBase + "/OtherJobsDetails/getOtherJobOpenReport",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.findById() instead.
            "::findById::CustomerDetails::otherJobsDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.destroyById() instead.
            "::destroyById::CustomerDetails::otherJobsDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.updateById() instead.
            "::updateById::CustomerDetails::otherJobsDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails() instead.
            "::get::CustomerDetails::otherJobsDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails",
              method: "GET",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.create() instead.
            "::create::CustomerDetails::otherJobsDetails": {
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.createMany() instead.
            "::createMany::CustomerDetails::otherJobsDetails": {
              isArray: true,
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails",
              method: "POST",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.destroyAll() instead.
            "::delete::CustomerDetails::otherJobsDetails": {
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerDetails.otherJobsDetails.count() instead.
            "::count::CustomerDetails::otherJobsDetails": {
              url: urlBase + "/CustomerDetails/:id/otherJobsDetails/count",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsRequest.otherJobsDetails() instead.
            "::get::OtherJobsRequest::otherJobsDetails": {
              url: urlBase + "/OtherJobsRequests/:id/otherJobsDetails",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#updateOrCreate
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#update
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#destroyById
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#removeById
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.OtherJobsDetails#modelName
        * @propertyOf lbServices.OtherJobsDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `OtherJobsDetails`.
        */
        R.modelName = "OtherJobsDetails";


            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#customerDetails
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Fetches belongsTo relation customerDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerDetails` object.)
             * </em>
             */
             R.customerDetails = function() {
              var TargetResource = $injector.get("CustomerDetails");
              var action = TargetResource["::get::OtherJobsDetails::customerDetails"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.OtherJobsDetails.otherJobsRequest
     * @header lbServices.OtherJobsDetails.otherJobsRequest
     * @object
     * @description
     *
     * The object `OtherJobsDetails.otherJobsRequest` groups methods
     * manipulating `OtherJobsRequest` instances related to `OtherJobsDetails`.
     *
     * Call {@link lbServices.OtherJobsDetails#otherJobsRequest OtherJobsDetails.otherJobsRequest()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails#otherJobsRequest
             * @methodOf lbServices.OtherJobsDetails
             *
             * @description
             *
             * Queries otherJobsRequest of OtherJobsDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::get::OtherJobsDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails.otherJobsRequest#count
             * @methodOf lbServices.OtherJobsDetails.otherJobsRequest
             *
             * @description
             *
             * Counts otherJobsRequest of OtherJobsDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.otherJobsRequest.count = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::count::OtherJobsDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails.otherJobsRequest#create
             * @methodOf lbServices.OtherJobsDetails.otherJobsRequest
             *
             * @description
             *
             * Creates a new instance in otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.create = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::create::OtherJobsDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails.otherJobsRequest#createMany
             * @methodOf lbServices.OtherJobsDetails.otherJobsRequest
             *
             * @description
             *
             * Creates a new instance in otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.createMany = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::createMany::OtherJobsDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails.otherJobsRequest#destroyAll
             * @methodOf lbServices.OtherJobsDetails.otherJobsRequest
             *
             * @description
             *
             * Deletes all otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherJobsRequest.destroyAll = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::delete::OtherJobsDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails.otherJobsRequest#destroyById
             * @methodOf lbServices.OtherJobsDetails.otherJobsRequest
             *
             * @description
             *
             * Delete a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherJobsRequest.destroyById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::destroyById::OtherJobsDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails.otherJobsRequest#findById
             * @methodOf lbServices.OtherJobsDetails.otherJobsRequest
             *
             * @description
             *
             * Find a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.findById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::findById::OtherJobsDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsDetails.otherJobsRequest#updateById
             * @methodOf lbServices.OtherJobsDetails.otherJobsRequest
             *
             * @description
             *
             * Update a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.updateById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::updateById::OtherJobsDetails::otherJobsRequest"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.OtherJobsRequest
 * @header lbServices.OtherJobsRequest
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `OtherJobsRequest` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "OtherJobsRequest",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/OtherJobsRequests/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use OtherJobsRequest.otherJobsDetails() instead.
            "prototype$__get__otherJobsDetails": {
              url: urlBase + "/OtherJobsRequests/:id/otherJobsDetails",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsRequest.driverDetails() instead.
            "prototype$__get__driverDetails": {
              url: urlBase + "/OtherJobsRequests/:id/driverDetails",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsRequest.otherUser() instead.
            "prototype$__get__otherUser": {
              url: urlBase + "/OtherJobsRequests/:id/otherUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#create
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/OtherJobsRequests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#createMany
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/OtherJobsRequests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#upsert
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/OtherJobsRequests",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#exists
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/OtherJobsRequests/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#findById
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/OtherJobsRequests/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#find
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/OtherJobsRequests",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#findOne
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/OtherJobsRequests/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#updateAll
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/OtherJobsRequests/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#deleteById
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/OtherJobsRequests/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#count
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/OtherJobsRequests/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#prototype$updateAttributes
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/OtherJobsRequests/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#createChangeStream
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/OtherJobsRequests/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#applyOtherJob
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `otherJobsId` – `{string}` -
             *
             *  - `otherUserId` – `{string}` -
             *
             *  - `userId` – `{string}` -
             *
             *  - `remark` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "applyOtherJob": {
              url: urlBase + "/OtherJobsRequests/applyOtherJob",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#checkOtherjobApplyValidations
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `otherJobsId` – `{string}` -
             *
             *  - `MobileNumber` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "checkOtherjobApplyValidations": {
              url: urlBase + "/OtherJobsRequests/checkOtherjobApplyValidations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#OtherJobRequestDataByJobId
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `jobId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             "OtherJobRequestDataByJobId": {
              url: urlBase + "/OtherJobsRequests/OtherJobRequestDataByJobId",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.findById() instead.
            "::findById::DriverDetails::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/otherJobsRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.destroyById() instead.
            "::destroyById::DriverDetails::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/otherJobsRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.updateById() instead.
            "::updateById::DriverDetails::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DriverDetails/:id/otherJobsRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest() instead.
            "::get::DriverDetails::otherJobsRequest": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/otherJobsRequest",
              method: "GET",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.create() instead.
            "::create::DriverDetails::otherJobsRequest": {
              url: urlBase + "/DriverDetails/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.createMany() instead.
            "::createMany::DriverDetails::otherJobsRequest": {
              isArray: true,
              url: urlBase + "/DriverDetails/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.destroyAll() instead.
            "::delete::DriverDetails::otherJobsRequest": {
              url: urlBase + "/DriverDetails/:id/otherJobsRequest",
              method: "DELETE",
            },

            // INTERNAL. Use DriverDetails.otherJobsRequest.count() instead.
            "::count::DriverDetails::otherJobsRequest": {
              url: urlBase + "/DriverDetails/:id/otherJobsRequest/count",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.findById() instead.
            "::findById::OtherJobsDetails::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.destroyById() instead.
            "::destroyById::OtherJobsDetails::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.updateById() instead.
            "::updateById::OtherJobsDetails::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest() instead.
            "::get::OtherJobsDetails::otherJobsRequest": {
              isArray: true,
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.create() instead.
            "::create::OtherJobsDetails::otherJobsRequest": {
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.createMany() instead.
            "::createMany::OtherJobsDetails::otherJobsRequest": {
              isArray: true,
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.destroyAll() instead.
            "::delete::OtherJobsDetails::otherJobsRequest": {
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest",
              method: "DELETE",
            },

            // INTERNAL. Use OtherJobsDetails.otherJobsRequest.count() instead.
            "::count::OtherJobsDetails::otherJobsRequest": {
              url: urlBase + "/OtherJobsDetails/:id/otherJobsRequest/count",
              method: "GET",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.findById() instead.
            "::findById::OtherUser::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherUsers/:id/otherJobsRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.destroyById() instead.
            "::destroyById::OtherUser::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherUsers/:id/otherJobsRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.updateById() instead.
            "::updateById::OtherUser::otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherUsers/:id/otherJobsRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest() instead.
            "::get::OtherUser::otherJobsRequest": {
              isArray: true,
              url: urlBase + "/OtherUsers/:id/otherJobsRequest",
              method: "GET",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.create() instead.
            "::create::OtherUser::otherJobsRequest": {
              url: urlBase + "/OtherUsers/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.createMany() instead.
            "::createMany::OtherUser::otherJobsRequest": {
              isArray: true,
              url: urlBase + "/OtherUsers/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.destroyAll() instead.
            "::delete::OtherUser::otherJobsRequest": {
              url: urlBase + "/OtherUsers/:id/otherJobsRequest",
              method: "DELETE",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.count() instead.
            "::count::OtherUser::otherJobsRequest": {
              url: urlBase + "/OtherUsers/:id/otherJobsRequest/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#updateOrCreate
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#update
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#destroyById
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#removeById
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.OtherJobsRequest#modelName
        * @propertyOf lbServices.OtherJobsRequest
        * @description
        * The name of the model represented by this $resource,
        * i.e. `OtherJobsRequest`.
        */
        R.modelName = "OtherJobsRequest";


            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#otherJobsDetails
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Fetches belongsTo relation otherJobsDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsDetails` object.)
             * </em>
             */
             R.otherJobsDetails = function() {
              var TargetResource = $injector.get("OtherJobsDetails");
              var action = TargetResource["::get::OtherJobsRequest::otherJobsDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#driverDetails
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Fetches belongsTo relation driverDetails.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DriverDetails` object.)
             * </em>
             */
             R.driverDetails = function() {
              var TargetResource = $injector.get("DriverDetails");
              var action = TargetResource["::get::OtherJobsRequest::driverDetails"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherJobsRequest#otherUser
             * @methodOf lbServices.OtherJobsRequest
             *
             * @description
             *
             * Fetches belongsTo relation otherUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             R.otherUser = function() {
              var TargetResource = $injector.get("OtherUser");
              var action = TargetResource["::get::OtherJobsRequest::otherUser"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.OtherUser
 * @header lbServices.OtherUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `OtherUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "OtherUser",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/OtherUsers/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use OtherUser.conUsers() instead.
            "prototype$__get__conUsers": {
              url: urlBase + "/OtherUsers/:id/conUsers",
              method: "GET",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.findById() instead.
            "prototype$__findById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherUsers/:id/otherJobsRequest/:fk",
              method: "GET",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.destroyById() instead.
            "prototype$__destroyById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherUsers/:id/otherJobsRequest/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.updateById() instead.
            "prototype$__updateById__otherJobsRequest": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OtherUsers/:id/otherJobsRequest/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest() instead.
            "prototype$__get__otherJobsRequest": {
              isArray: true,
              url: urlBase + "/OtherUsers/:id/otherJobsRequest",
              method: "GET",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.create() instead.
            "prototype$__create__otherJobsRequest": {
              url: urlBase + "/OtherUsers/:id/otherJobsRequest",
              method: "POST",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.destroyAll() instead.
            "prototype$__delete__otherJobsRequest": {
              url: urlBase + "/OtherUsers/:id/otherJobsRequest",
              method: "DELETE",
            },

            // INTERNAL. Use OtherUser.otherJobsRequest.count() instead.
            "prototype$__count__otherJobsRequest": {
              url: urlBase + "/OtherUsers/:id/otherJobsRequest/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#create
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/OtherUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#createMany
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/OtherUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#upsert
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/OtherUsers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#exists
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/OtherUsers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#findById
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/OtherUsers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#find
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/OtherUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#findOne
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/OtherUsers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#updateAll
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/OtherUsers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#deleteById
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/OtherUsers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#count
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/OtherUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#prototype$updateAttributes
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/OtherUsers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#createChangeStream
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/OtherUsers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#getUsers
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `operationCity` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             "getUsers": {
              url: urlBase + "/OtherUsers/getUsers",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.otherUser.findById() instead.
            "::findById::ConUsers::otherUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/otherUser/:fk",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.otherUser.destroyById() instead.
            "::destroyById::ConUsers::otherUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/otherUser/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.otherUser.updateById() instead.
            "::updateById::ConUsers::otherUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ConUsers/:id/otherUser/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ConUsers.otherUser() instead.
            "::get::ConUsers::otherUser": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/otherUser",
              method: "GET",
            },

            // INTERNAL. Use ConUsers.otherUser.create() instead.
            "::create::ConUsers::otherUser": {
              url: urlBase + "/ConUsers/:id/otherUser",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.otherUser.createMany() instead.
            "::createMany::ConUsers::otherUser": {
              isArray: true,
              url: urlBase + "/ConUsers/:id/otherUser",
              method: "POST",
            },

            // INTERNAL. Use ConUsers.otherUser.destroyAll() instead.
            "::delete::ConUsers::otherUser": {
              url: urlBase + "/ConUsers/:id/otherUser",
              method: "DELETE",
            },

            // INTERNAL. Use ConUsers.otherUser.count() instead.
            "::count::ConUsers::otherUser": {
              url: urlBase + "/ConUsers/:id/otherUser/count",
              method: "GET",
            },

            // INTERNAL. Use OtherJobsRequest.otherUser() instead.
            "::get::OtherJobsRequest::otherUser": {
              url: urlBase + "/OtherJobsRequests/:id/otherUser",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.OtherUser#updateOrCreate
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherUser` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#update
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#destroyById
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.OtherUser#removeById
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.OtherUser#modelName
        * @propertyOf lbServices.OtherUser
        * @description
        * The name of the model represented by this $resource,
        * i.e. `OtherUser`.
        */
        R.modelName = "OtherUser";


            /**
             * @ngdoc method
             * @name lbServices.OtherUser#conUsers
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Fetches belongsTo relation conUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ConUsers` object.)
             * </em>
             */
             R.conUsers = function() {
              var TargetResource = $injector.get("ConUsers");
              var action = TargetResource["::get::OtherUser::conUsers"];
              return action.apply(R, arguments);
            };
    /**
     * @ngdoc object
     * @name lbServices.OtherUser.otherJobsRequest
     * @header lbServices.OtherUser.otherJobsRequest
     * @object
     * @description
     *
     * The object `OtherUser.otherJobsRequest` groups methods
     * manipulating `OtherJobsRequest` instances related to `OtherUser`.
     *
     * Call {@link lbServices.OtherUser#otherJobsRequest OtherUser.otherJobsRequest()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OtherUser#otherJobsRequest
             * @methodOf lbServices.OtherUser
             *
             * @description
             *
             * Queries otherJobsRequest of OtherUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::get::OtherUser::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherUser.otherJobsRequest#count
             * @methodOf lbServices.OtherUser.otherJobsRequest
             *
             * @description
             *
             * Counts otherJobsRequest of OtherUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             R.otherJobsRequest.count = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::count::OtherUser::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherUser.otherJobsRequest#create
             * @methodOf lbServices.OtherUser.otherJobsRequest
             *
             * @description
             *
             * Creates a new instance in otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.create = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::create::OtherUser::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherUser.otherJobsRequest#createMany
             * @methodOf lbServices.OtherUser.otherJobsRequest
             *
             * @description
             *
             * Creates a new instance in otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.createMany = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::createMany::OtherUser::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherUser.otherJobsRequest#destroyAll
             * @methodOf lbServices.OtherUser.otherJobsRequest
             *
             * @description
             *
             * Deletes all otherJobsRequest of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherJobsRequest.destroyAll = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::delete::OtherUser::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherUser.otherJobsRequest#destroyById
             * @methodOf lbServices.OtherUser.otherJobsRequest
             *
             * @description
             *
             * Delete a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R.otherJobsRequest.destroyById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::destroyById::OtherUser::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherUser.otherJobsRequest#findById
             * @methodOf lbServices.OtherUser.otherJobsRequest
             *
             * @description
             *
             * Find a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.findById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::findById::OtherUser::otherJobsRequest"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.OtherUser.otherJobsRequest#updateById
             * @methodOf lbServices.OtherUser.otherJobsRequest
             *
             * @description
             *
             * Update a related item by id for otherJobsRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for otherJobsRequest
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OtherJobsRequest` object.)
             * </em>
             */
             R.otherJobsRequest.updateById = function() {
              var TargetResource = $injector.get("OtherJobsRequest");
              var action = TargetResource["::updateById::OtherUser::otherJobsRequest"];
              return action.apply(R, arguments);
            };


            return R;
          }]);

/**
 * @ngdoc object
 * @name lbServices.Company2MultipleBillDetails
 * @header lbServices.Company2MultipleBillDetails
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company2MultipleBillDetails` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
 module.factory(
  "Company2MultipleBillDetails",
  [
  'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
  function(LoopBackResource, LoopBackAuth, $injector, $q) {
    var R = LoopBackResource(
      urlBase + "/Company2MultipleBillDetails/:id",
      { 'id': '@id' },
      {

            // INTERNAL. Use Company2MultipleBillDetails.company2CustomerBills() instead.
            "prototype$__get__company2CustomerBills": {
              url: urlBase + "/Company2MultipleBillDetails/:id/company2CustomerBills",
              method: "GET",
            },

            // INTERNAL. Use Company2MultipleBillDetails.company2Items() instead.
            "prototype$__get__company2Items": {
              url: urlBase + "/Company2MultipleBillDetails/:id/company2Items",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#create
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             "create": {
              url: urlBase + "/Company2MultipleBillDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#createMany
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             "createMany": {
              isArray: true,
              url: urlBase + "/Company2MultipleBillDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#upsert
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             "upsert": {
              url: urlBase + "/Company2MultipleBillDetails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#exists
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
             "exists": {
              url: urlBase + "/Company2MultipleBillDetails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#findById
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             "findById": {
              url: urlBase + "/Company2MultipleBillDetails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#find
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             "find": {
              isArray: true,
              url: urlBase + "/Company2MultipleBillDetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#findOne
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             "findOne": {
              url: urlBase + "/Company2MultipleBillDetails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#updateAll
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "updateAll": {
              url: urlBase + "/Company2MultipleBillDetails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#deleteById
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             "deleteById": {
              url: urlBase + "/Company2MultipleBillDetails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#count
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
             "count": {
              url: urlBase + "/Company2MultipleBillDetails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#prototype$updateAttributes
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             "prototype$updateAttributes": {
              url: urlBase + "/Company2MultipleBillDetails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#createChangeStream
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
             "createChangeStream": {
              url: urlBase + "/Company2MultipleBillDetails/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.findById() instead.
            "::findById::Company2Items::company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.destroyById() instead.
            "::destroyById::Company2Items::company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.updateById() instead.
            "::updateById::Company2Items::company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails() instead.
            "::get::Company2Items::company2MultipleBillDetails": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.create() instead.
            "::create::Company2Items::company2MultipleBillDetails": {
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.createMany() instead.
            "::createMany::Company2Items::company2MultipleBillDetails": {
              isArray: true,
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.destroyAll() instead.
            "::delete::Company2Items::company2MultipleBillDetails": {
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2Items.company2MultipleBillDetails.count() instead.
            "::count::Company2Items::company2MultipleBillDetails": {
              url: urlBase + "/Company2Items/:id/company2MultipleBillDetails/count",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.findById() instead.
            "::findById::Company2CustomerBills::company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.destroyById() instead.
            "::destroyById::Company2CustomerBills::company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.updateById() instead.
            "::updateById::Company2CustomerBills::company2MultipleBillDetails": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails() instead.
            "::get::Company2CustomerBills::company2MultipleBillDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails",
              method: "GET",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.create() instead.
            "::create::Company2CustomerBills::company2MultipleBillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.createMany() instead.
            "::createMany::Company2CustomerBills::company2MultipleBillDetails": {
              isArray: true,
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails",
              method: "POST",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.destroyAll() instead.
            "::delete::Company2CustomerBills::company2MultipleBillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails",
              method: "DELETE",
            },

            // INTERNAL. Use Company2CustomerBills.company2MultipleBillDetails.count() instead.
            "::count::Company2CustomerBills::company2MultipleBillDetails": {
              url: urlBase + "/Company2CustomerBills/:id/company2MultipleBillDetails/count",
              method: "GET",
            },
          }
          );



            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#updateOrCreate
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2MultipleBillDetails` object.)
             * </em>
             */
             R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#update
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#destroyById
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#removeById
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
             R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Company2MultipleBillDetails#modelName
        * @propertyOf lbServices.Company2MultipleBillDetails
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company2MultipleBillDetails`.
        */
        R.modelName = "Company2MultipleBillDetails";


            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#company2CustomerBills
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Fetches belongsTo relation company2CustomerBills.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2CustomerBills` object.)
             * </em>
             */
             R.company2CustomerBills = function() {
              var TargetResource = $injector.get("Company2CustomerBills");
              var action = TargetResource["::get::Company2MultipleBillDetails::company2CustomerBills"];
              return action.apply(R, arguments);
            };

            /**
             * @ngdoc method
             * @name lbServices.Company2MultipleBillDetails#company2Items
             * @methodOf lbServices.Company2MultipleBillDetails
             *
             * @description
             *
             * Fetches belongsTo relation company2Items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company2Items` object.)
             * </em>
             */
             R.company2Items = function() {
              var TargetResource = $injector.get("Company2Items");
              var action = TargetResource["::get::Company2MultipleBillDetails::company2Items"];
              return action.apply(R, arguments);
            };


            return R;
          }]);


module
.factory('LoopBackAuth', function() {
  var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
  var propsPrefix = '$LoopBack$';

  function LoopBackAuth() {
    var self = this;
    props.forEach(function(name) {
      self[name] = load(name);
    });
    this.currentUserData = null;
  }

  LoopBackAuth.prototype.save = function() {
    var self = this;
    var storage = this.rememberMe ? localStorage : sessionStorage;
    props.forEach(function(name) {
      save(storage, name, self[name]);
    });
  };

  LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
    this.accessTokenId = accessTokenId;
    this.currentUserId = userId;
    this.currentUserData = userData;
  };

  LoopBackAuth.prototype.clearUser = function() {
    this.accessTokenId = null;
    this.currentUserId = null;
    this.currentUserData = null;
  };

  LoopBackAuth.prototype.clearStorage = function() {
    props.forEach(function(name) {
      save(sessionStorage, name, null);
      save(localStorage, name, null);
    });
  };

  return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
.config(['$httpProvider', function($httpProvider) {
  $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
}])
.factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
  function($q, LoopBackAuth) {
    return {
      'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
   .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
     this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
     this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
     this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
     this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
 })(window, window.angular);
